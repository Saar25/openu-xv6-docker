
kernel:     file format elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 f0 11 00       	mov    $0x11f000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc c0 25 12 80       	mov    $0x801225c0,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 30 3b 10 80       	mov    $0x80103b30,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax
80100034:	66 90                	xchg   %ax,%ax
80100036:	66 90                	xchg   %ax,%ax
80100038:	66 90                	xchg   %ax,%ax
8010003a:	66 90                	xchg   %ax,%ax
8010003c:	66 90                	xchg   %ax,%ax
8010003e:	66 90                	xchg   %ax,%ax

80100040 <binit>:
80100040:	55                   	push   %ebp
80100041:	89 e5                	mov    %esp,%ebp
80100043:	53                   	push   %ebx
80100044:	bb f4 25 12 80       	mov    $0x801225f4,%ebx
80100049:	83 ec 0c             	sub    $0xc,%esp
8010004c:	68 a0 e6 10 80       	push   $0x8010e6a0
80100051:	68 c0 25 12 80       	push   $0x801225c0
80100056:	e8 15 61 00 00       	call   80106170 <initlock>
8010005b:	c7 05 84 a9 12 80 34 	movl   $0x8012a934,0x8012a984
80100062:	a9 12 80 
80100065:	c7 05 88 a9 12 80 34 	movl   $0x8012a934,0x8012a988
8010006c:	a9 12 80 
8010006f:	83 c4 10             	add    $0x10,%esp
80100072:	ba 34 a9 12 80       	mov    $0x8012a934,%edx
80100077:	eb 09                	jmp    80100082 <binit+0x42>
80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100080:	89 c3                	mov    %eax,%ebx
80100082:	8d 43 0c             	lea    0xc(%ebx),%eax
80100085:	83 ec 08             	sub    $0x8,%esp
80100088:	89 53 54             	mov    %edx,0x54(%ebx)
8010008b:	c7 43 50 34 a9 12 80 	movl   $0x8012a934,0x50(%ebx)
80100092:	68 a7 e6 10 80       	push   $0x8010e6a7
80100097:	50                   	push   %eax
80100098:	e8 c3 5f 00 00       	call   80106060 <initsleeplock>
8010009d:	a1 88 a9 12 80       	mov    0x8012a988,%eax
801000a2:	83 c4 10             	add    $0x10,%esp
801000a5:	89 da                	mov    %ebx,%edx
801000a7:	89 58 50             	mov    %ebx,0x50(%eax)
801000aa:	8d 83 60 04 00 00    	lea    0x460(%ebx),%eax
801000b0:	89 1d 88 a9 12 80    	mov    %ebx,0x8012a988
801000b6:	3d 34 a9 12 80       	cmp    $0x8012a934,%eax
801000bb:	75 c3                	jne    80100080 <binit+0x40>
801000bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801000c0:	c9                   	leave  
801000c1:	c3                   	ret    
801000c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801000c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801000d0 <invalidateblocks>:
801000d0:	55                   	push   %ebp
801000d1:	89 e5                	mov    %esp,%ebp
801000d3:	53                   	push   %ebx
801000d4:	83 ec 10             	sub    $0x10,%esp
801000d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801000da:	68 c0 25 12 80       	push   $0x801225c0
801000df:	e8 8c 61 00 00       	call   80106270 <acquire>
801000e4:	a1 88 a9 12 80       	mov    0x8012a988,%eax
801000e9:	83 c4 10             	add    $0x10,%esp
801000ec:	3d 34 a9 12 80       	cmp    $0x8012a934,%eax
801000f1:	75 0f                	jne    80100102 <invalidateblocks+0x32>
801000f3:	eb 1f                	jmp    80100114 <invalidateblocks+0x44>
801000f5:	8d 76 00             	lea    0x0(%esi),%esi
801000f8:	8b 40 54             	mov    0x54(%eax),%eax
801000fb:	3d 34 a9 12 80       	cmp    $0x8012a934,%eax
80100100:	74 12                	je     80100114 <invalidateblocks+0x44>
80100102:	39 58 04             	cmp    %ebx,0x4(%eax)
80100105:	75 f1                	jne    801000f8 <invalidateblocks+0x28>
80100107:	83 20 f9             	andl   $0xfffffff9,(%eax)
8010010a:	8b 40 54             	mov    0x54(%eax),%eax
8010010d:	3d 34 a9 12 80       	cmp    $0x8012a934,%eax
80100112:	75 ee                	jne    80100102 <invalidateblocks+0x32>
80100114:	c7 45 08 c0 25 12 80 	movl   $0x801225c0,0x8(%ebp)
8010011b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010011e:	c9                   	leave  
8010011f:	e9 6c 62 00 00       	jmp    80106390 <release>
80100124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010012a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80100130 <devicerw>:
80100130:	55                   	push   %ebp
80100131:	89 e5                	mov    %esp,%ebp
80100133:	53                   	push   %ebx
80100134:	83 ec 04             	sub    $0x4,%esp
80100137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010013a:	8b 55 08             	mov    0x8(%ebp),%edx
8010013d:	f6 03 04             	testb  $0x4,(%ebx)
80100140:	74 2e                	je     80100170 <devicerw+0x40>
80100142:	68 00 04 00 00       	push   $0x400
80100147:	8b 43 08             	mov    0x8(%ebx),%eax
8010014a:	c1 e0 0a             	shl    $0xa,%eax
8010014d:	50                   	push   %eax
8010014e:	8d 43 60             	lea    0x60(%ebx),%eax
80100151:	50                   	push   %eax
80100152:	52                   	push   %edx
80100153:	e8 78 21 00 00       	call   801022d0 <writei>
80100158:	8b 03                	mov    (%ebx),%eax
8010015a:	83 c4 10             	add    $0x10,%esp
8010015d:	83 e0 fb             	and    $0xfffffffb,%eax
80100160:	83 c8 02             	or     $0x2,%eax
80100163:	89 03                	mov    %eax,(%ebx)
80100165:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100168:	c9                   	leave  
80100169:	c3                   	ret    
8010016a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100170:	68 00 04 00 00       	push   $0x400
80100175:	8b 43 08             	mov    0x8(%ebx),%eax
80100178:	c1 e0 0a             	shl    $0xa,%eax
8010017b:	50                   	push   %eax
8010017c:	8d 43 60             	lea    0x60(%ebx),%eax
8010017f:	50                   	push   %eax
80100180:	52                   	push   %edx
80100181:	e8 3a 20 00 00       	call   801021c0 <readi>
80100186:	8b 03                	mov    (%ebx),%eax
80100188:	83 c4 10             	add    $0x10,%esp
8010018b:	83 e0 fb             	and    $0xfffffffb,%eax
8010018e:	83 c8 02             	or     $0x2,%eax
80100191:	89 03                	mov    %eax,(%ebx)
80100193:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100196:	c9                   	leave  
80100197:	c3                   	ret    
80100198:	90                   	nop
80100199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801001a0 <brw>:
801001a0:	55                   	push   %ebp
801001a1:	89 e5                	mov    %esp,%ebp
801001a3:	53                   	push   %ebx
801001a4:	83 ec 10             	sub    $0x10,%esp
801001a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801001aa:	ff 73 04             	pushl  0x4(%ebx)
801001ad:	e8 5e 0e 00 00       	call   80101010 <getinodefordevice>
801001b2:	83 c4 10             	add    $0x10,%esp
801001b5:	85 c0                	test   %eax,%eax
801001b7:	74 17                	je     801001d0 <brw+0x30>
801001b9:	83 ec 08             	sub    $0x8,%esp
801001bc:	53                   	push   %ebx
801001bd:	50                   	push   %eax
801001be:	e8 6d ff ff ff       	call   80100130 <devicerw>
801001c3:	83 c4 10             	add    $0x10,%esp
801001c6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801001c9:	c9                   	leave  
801001ca:	c3                   	ret    
801001cb:	90                   	nop
801001cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801001d0:	89 5d 08             	mov    %ebx,0x8(%ebp)
801001d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801001d6:	c9                   	leave  
801001d7:	e9 34 29 00 00       	jmp    80102b10 <iderw>
801001dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801001e0 <bread>:
801001e0:	55                   	push   %ebp
801001e1:	89 e5                	mov    %esp,%ebp
801001e3:	57                   	push   %edi
801001e4:	56                   	push   %esi
801001e5:	53                   	push   %ebx
801001e6:	83 ec 1c             	sub    $0x1c,%esp
801001e9:	8b 7d 08             	mov    0x8(%ebp),%edi
801001ec:	8b 75 0c             	mov    0xc(%ebp),%esi
801001ef:	e8 40 5e 00 00       	call   80106034 <proc_get_cgroup>
801001f4:	83 ec 0c             	sub    $0xc,%esp
801001f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801001fa:	68 c0 25 12 80       	push   $0x801225c0
801001ff:	e8 6c 60 00 00       	call   80106270 <acquire>
80100204:	8b 1d 88 a9 12 80    	mov    0x8012a988,%ebx
8010020a:	83 c4 10             	add    $0x10,%esp
8010020d:	81 fb 34 a9 12 80    	cmp    $0x8012a934,%ebx
80100213:	75 16                	jne    8010022b <bread+0x4b>
80100215:	eb 59                	jmp    80100270 <bread+0x90>
80100217:	89 f6                	mov    %esi,%esi
80100219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80100220:	8b 5b 54             	mov    0x54(%ebx),%ebx
80100223:	81 fb 34 a9 12 80    	cmp    $0x8012a934,%ebx
80100229:	74 45                	je     80100270 <bread+0x90>
8010022b:	3b 7b 04             	cmp    0x4(%ebx),%edi
8010022e:	75 f0                	jne    80100220 <bread+0x40>
80100230:	3b 73 08             	cmp    0x8(%ebx),%esi
80100233:	75 eb                	jne    80100220 <bread+0x40>
80100235:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
80100239:	83 ec 0c             	sub    $0xc,%esp
8010023c:	68 c0 25 12 80       	push   $0x801225c0
80100241:	e8 4a 61 00 00       	call   80106390 <release>
80100246:	8d 43 0c             	lea    0xc(%ebx),%eax
80100249:	89 04 24             	mov    %eax,(%esp)
8010024c:	e8 4f 5e 00 00       	call   801060a0 <acquiresleep>
80100251:	59                   	pop    %ecx
80100252:	ff 75 e4             	pushl  -0x1c(%ebp)
80100255:	e8 46 e1 00 00       	call   8010e3a0 <cgroup_mem_stat_pgfault_incr>
8010025a:	83 c4 10             	add    $0x10,%esp
8010025d:	f6 03 02             	testb  $0x2,(%ebx)
80100260:	74 78                	je     801002da <bread+0xfa>
80100262:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100265:	89 d8                	mov    %ebx,%eax
80100267:	5b                   	pop    %ebx
80100268:	5e                   	pop    %esi
80100269:	5f                   	pop    %edi
8010026a:	5d                   	pop    %ebp
8010026b:	c3                   	ret    
8010026c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100270:	8b 1d 84 a9 12 80    	mov    0x8012a984,%ebx
80100276:	81 fb 34 a9 12 80    	cmp    $0x8012a934,%ebx
8010027c:	75 0d                	jne    8010028b <bread+0xab>
8010027e:	eb 70                	jmp    801002f0 <bread+0x110>
80100280:	8b 5b 50             	mov    0x50(%ebx),%ebx
80100283:	81 fb 34 a9 12 80    	cmp    $0x8012a934,%ebx
80100289:	74 65                	je     801002f0 <bread+0x110>
8010028b:	8b 53 4c             	mov    0x4c(%ebx),%edx
8010028e:	85 d2                	test   %edx,%edx
80100290:	75 ee                	jne    80100280 <bread+0xa0>
80100292:	f6 03 04             	testb  $0x4,(%ebx)
80100295:	75 e9                	jne    80100280 <bread+0xa0>
80100297:	83 ec 0c             	sub    $0xc,%esp
8010029a:	89 7b 04             	mov    %edi,0x4(%ebx)
8010029d:	89 73 08             	mov    %esi,0x8(%ebx)
801002a0:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
801002a6:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%ebx)
801002ad:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
801002b4:	68 c0 25 12 80       	push   $0x801225c0
801002b9:	e8 d2 60 00 00       	call   80106390 <release>
801002be:	8d 43 0c             	lea    0xc(%ebx),%eax
801002c1:	89 04 24             	mov    %eax,(%esp)
801002c4:	e8 d7 5d 00 00       	call   801060a0 <acquiresleep>
801002c9:	58                   	pop    %eax
801002ca:	ff 75 e4             	pushl  -0x1c(%ebp)
801002cd:	e8 fe e0 00 00       	call   8010e3d0 <cgroup_mem_stat_pgmajfault_incr>
801002d2:	83 c4 10             	add    $0x10,%esp
801002d5:	f6 03 02             	testb  $0x2,(%ebx)
801002d8:	75 88                	jne    80100262 <bread+0x82>
801002da:	83 ec 0c             	sub    $0xc,%esp
801002dd:	53                   	push   %ebx
801002de:	e8 bd fe ff ff       	call   801001a0 <brw>
801002e3:	83 c4 10             	add    $0x10,%esp
801002e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801002e9:	89 d8                	mov    %ebx,%eax
801002eb:	5b                   	pop    %ebx
801002ec:	5e                   	pop    %esi
801002ed:	5f                   	pop    %edi
801002ee:	5d                   	pop    %ebp
801002ef:	c3                   	ret    
801002f0:	83 ec 0c             	sub    $0xc,%esp
801002f3:	68 ae e6 10 80       	push   $0x8010e6ae
801002f8:	e8 d3 00 00 00       	call   801003d0 <panic>
801002fd:	8d 76 00             	lea    0x0(%esi),%esi

80100300 <bwrite>:
80100300:	55                   	push   %ebp
80100301:	89 e5                	mov    %esp,%ebp
80100303:	53                   	push   %ebx
80100304:	83 ec 10             	sub    $0x10,%esp
80100307:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010030a:	8d 43 0c             	lea    0xc(%ebx),%eax
8010030d:	50                   	push   %eax
8010030e:	e8 2d 5e 00 00       	call   80106140 <holdingsleep>
80100313:	83 c4 10             	add    $0x10,%esp
80100316:	85 c0                	test   %eax,%eax
80100318:	74 0f                	je     80100329 <bwrite+0x29>
8010031a:	83 0b 04             	orl    $0x4,(%ebx)
8010031d:	89 5d 08             	mov    %ebx,0x8(%ebp)
80100320:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100323:	c9                   	leave  
80100324:	e9 77 fe ff ff       	jmp    801001a0 <brw>
80100329:	83 ec 0c             	sub    $0xc,%esp
8010032c:	68 bf e6 10 80       	push   $0x8010e6bf
80100331:	e8 9a 00 00 00       	call   801003d0 <panic>
80100336:	8d 76 00             	lea    0x0(%esi),%esi
80100339:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100340 <brelse>:
80100340:	55                   	push   %ebp
80100341:	89 e5                	mov    %esp,%ebp
80100343:	56                   	push   %esi
80100344:	53                   	push   %ebx
80100345:	8b 5d 08             	mov    0x8(%ebp),%ebx
80100348:	83 ec 0c             	sub    $0xc,%esp
8010034b:	8d 73 0c             	lea    0xc(%ebx),%esi
8010034e:	56                   	push   %esi
8010034f:	e8 ec 5d 00 00       	call   80106140 <holdingsleep>
80100354:	83 c4 10             	add    $0x10,%esp
80100357:	85 c0                	test   %eax,%eax
80100359:	74 66                	je     801003c1 <brelse+0x81>
8010035b:	83 ec 0c             	sub    $0xc,%esp
8010035e:	56                   	push   %esi
8010035f:	e8 9c 5d 00 00       	call   80106100 <releasesleep>
80100364:	c7 04 24 c0 25 12 80 	movl   $0x801225c0,(%esp)
8010036b:	e8 00 5f 00 00       	call   80106270 <acquire>
80100370:	8b 43 4c             	mov    0x4c(%ebx),%eax
80100373:	83 c4 10             	add    $0x10,%esp
80100376:	83 e8 01             	sub    $0x1,%eax
80100379:	85 c0                	test   %eax,%eax
8010037b:	89 43 4c             	mov    %eax,0x4c(%ebx)
8010037e:	75 2f                	jne    801003af <brelse+0x6f>
80100380:	8b 43 54             	mov    0x54(%ebx),%eax
80100383:	8b 53 50             	mov    0x50(%ebx),%edx
80100386:	89 50 50             	mov    %edx,0x50(%eax)
80100389:	8b 43 50             	mov    0x50(%ebx),%eax
8010038c:	8b 53 54             	mov    0x54(%ebx),%edx
8010038f:	89 50 54             	mov    %edx,0x54(%eax)
80100392:	a1 88 a9 12 80       	mov    0x8012a988,%eax
80100397:	c7 43 50 34 a9 12 80 	movl   $0x8012a934,0x50(%ebx)
8010039e:	89 43 54             	mov    %eax,0x54(%ebx)
801003a1:	a1 88 a9 12 80       	mov    0x8012a988,%eax
801003a6:	89 58 50             	mov    %ebx,0x50(%eax)
801003a9:	89 1d 88 a9 12 80    	mov    %ebx,0x8012a988
801003af:	c7 45 08 c0 25 12 80 	movl   $0x801225c0,0x8(%ebp)
801003b6:	8d 65 f8             	lea    -0x8(%ebp),%esp
801003b9:	5b                   	pop    %ebx
801003ba:	5e                   	pop    %esi
801003bb:	5d                   	pop    %ebp
801003bc:	e9 cf 5f 00 00       	jmp    80106390 <release>
801003c1:	83 ec 0c             	sub    $0xc,%esp
801003c4:	68 c6 e6 10 80       	push   $0x8010e6c6
801003c9:	e8 02 00 00 00       	call   801003d0 <panic>
801003ce:	66 90                	xchg   %ax,%ax

801003d0 <panic>:
801003d0:	55                   	push   %ebp
801003d1:	89 e5                	mov    %esp,%ebp
801003d3:	56                   	push   %esi
801003d4:	53                   	push   %ebx
801003d5:	83 ec 30             	sub    $0x30,%esp
}

static inline void
cli(void)
{
  asm volatile("cli");
801003d8:	fa                   	cli    
801003d9:	c7 05 54 05 12 80 00 	movl   $0x0,0x80120554
801003e0:	00 00 00 
801003e3:	8d 5d d0             	lea    -0x30(%ebp),%ebx
801003e6:	8d 75 f8             	lea    -0x8(%ebp),%esi
801003e9:	e8 82 2f 00 00       	call   80103370 <lapicid>
801003ee:	83 ec 08             	sub    $0x8,%esp
801003f1:	50                   	push   %eax
801003f2:	68 cd e6 10 80       	push   $0x8010e6cd
801003f7:	e8 64 02 00 00       	call   80100660 <cprintf>
801003fc:	58                   	pop    %eax
801003fd:	ff 75 08             	pushl  0x8(%ebp)
80100400:	e8 5b 02 00 00       	call   80100660 <cprintf>
80100405:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010040c:	e8 4f 02 00 00       	call   80100660 <cprintf>
80100411:	5a                   	pop    %edx
80100412:	8d 45 08             	lea    0x8(%ebp),%eax
80100415:	59                   	pop    %ecx
80100416:	53                   	push   %ebx
80100417:	50                   	push   %eax
80100418:	e8 73 5d 00 00       	call   80106190 <getcallerpcs>
8010041d:	83 c4 10             	add    $0x10,%esp
80100420:	83 ec 08             	sub    $0x8,%esp
80100423:	ff 33                	pushl  (%ebx)
80100425:	83 c3 04             	add    $0x4,%ebx
80100428:	68 e1 e6 10 80       	push   $0x8010e6e1
8010042d:	e8 2e 02 00 00       	call   80100660 <cprintf>
80100432:	83 c4 10             	add    $0x10,%esp
80100435:	39 f3                	cmp    %esi,%ebx
80100437:	75 e7                	jne    80100420 <panic+0x50>
80100439:	c7 05 58 05 12 80 01 	movl   $0x1,0x80120558
80100440:	00 00 00 
80100443:	eb fe                	jmp    80100443 <panic+0x73>
80100445:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100450 <consputc>:
80100450:	8b 15 58 05 12 80    	mov    0x80120558,%edx
80100456:	85 d2                	test   %edx,%edx
80100458:	74 06                	je     80100460 <consputc+0x10>
8010045a:	fa                   	cli    
8010045b:	eb fe                	jmp    8010045b <consputc+0xb>
8010045d:	8d 76 00             	lea    0x0(%esi),%esi
80100460:	55                   	push   %ebp
80100461:	89 e5                	mov    %esp,%ebp
80100463:	57                   	push   %edi
80100464:	56                   	push   %esi
80100465:	53                   	push   %ebx
80100466:	89 c3                	mov    %eax,%ebx
80100468:	83 ec 0c             	sub    $0xc,%esp
8010046b:	3d 00 01 00 00       	cmp    $0x100,%eax
80100470:	0f 84 b8 00 00 00    	je     8010052e <consputc+0xde>
80100476:	83 ec 0c             	sub    $0xc,%esp
80100479:	50                   	push   %eax
8010047a:	e8 81 80 00 00       	call   80108500 <uartputc>
8010047f:	83 c4 10             	add    $0x10,%esp
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100482:	bf d4 03 00 00       	mov    $0x3d4,%edi
80100487:	b8 0e 00 00 00       	mov    $0xe,%eax
8010048c:	89 fa                	mov    %edi,%edx
8010048e:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010048f:	be d5 03 00 00       	mov    $0x3d5,%esi
80100494:	89 f2                	mov    %esi,%edx
80100496:	ec                   	in     (%dx),%al
80100497:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010049a:	89 fa                	mov    %edi,%edx
8010049c:	c1 e0 08             	shl    $0x8,%eax
8010049f:	89 c1                	mov    %eax,%ecx
801004a1:	b8 0f 00 00 00       	mov    $0xf,%eax
801004a6:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801004a7:	89 f2                	mov    %esi,%edx
801004a9:	ec                   	in     (%dx),%al
801004aa:	0f b6 c0             	movzbl %al,%eax
801004ad:	09 c8                	or     %ecx,%eax
801004af:	83 fb 0a             	cmp    $0xa,%ebx
801004b2:	0f 84 0b 01 00 00    	je     801005c3 <consputc+0x173>
801004b8:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
801004be:	0f 84 e6 00 00 00    	je     801005aa <consputc+0x15a>
801004c4:	0f b6 d3             	movzbl %bl,%edx
801004c7:	8d 78 01             	lea    0x1(%eax),%edi
801004ca:	80 ce 07             	or     $0x7,%dh
801004cd:	66 89 94 00 00 80 0b 	mov    %dx,-0x7ff48000(%eax,%eax,1)
801004d4:	80 
801004d5:	81 ff d0 07 00 00    	cmp    $0x7d0,%edi
801004db:	0f 8f bc 00 00 00    	jg     8010059d <consputc+0x14d>
801004e1:	81 ff 7f 07 00 00    	cmp    $0x77f,%edi
801004e7:	7f 6f                	jg     80100558 <consputc+0x108>
801004e9:	89 f8                	mov    %edi,%eax
801004eb:	8d 8c 3f 00 80 0b 80 	lea    -0x7ff48000(%edi,%edi,1),%ecx
801004f2:	89 fb                	mov    %edi,%ebx
801004f4:	c1 e8 08             	shr    $0x8,%eax
801004f7:	89 c6                	mov    %eax,%esi
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801004f9:	bf d4 03 00 00       	mov    $0x3d4,%edi
801004fe:	b8 0e 00 00 00       	mov    $0xe,%eax
80100503:	89 fa                	mov    %edi,%edx
80100505:	ee                   	out    %al,(%dx)
80100506:	ba d5 03 00 00       	mov    $0x3d5,%edx
8010050b:	89 f0                	mov    %esi,%eax
8010050d:	ee                   	out    %al,(%dx)
8010050e:	b8 0f 00 00 00       	mov    $0xf,%eax
80100513:	89 fa                	mov    %edi,%edx
80100515:	ee                   	out    %al,(%dx)
80100516:	ba d5 03 00 00       	mov    $0x3d5,%edx
8010051b:	89 d8                	mov    %ebx,%eax
8010051d:	ee                   	out    %al,(%dx)
8010051e:	b8 20 07 00 00       	mov    $0x720,%eax
80100523:	66 89 01             	mov    %ax,(%ecx)
80100526:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100529:	5b                   	pop    %ebx
8010052a:	5e                   	pop    %esi
8010052b:	5f                   	pop    %edi
8010052c:	5d                   	pop    %ebp
8010052d:	c3                   	ret    
8010052e:	83 ec 0c             	sub    $0xc,%esp
80100531:	6a 08                	push   $0x8
80100533:	e8 c8 7f 00 00       	call   80108500 <uartputc>
80100538:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
8010053f:	e8 bc 7f 00 00       	call   80108500 <uartputc>
80100544:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
8010054b:	e8 b0 7f 00 00       	call   80108500 <uartputc>
80100550:	83 c4 10             	add    $0x10,%esp
80100553:	e9 2a ff ff ff       	jmp    80100482 <consputc+0x32>
80100558:	83 ec 04             	sub    $0x4,%esp
8010055b:	8d 5f b0             	lea    -0x50(%edi),%ebx
8010055e:	68 60 0e 00 00       	push   $0xe60
80100563:	68 a0 80 0b 80       	push   $0x800b80a0
80100568:	68 00 80 0b 80       	push   $0x800b8000
8010056d:	8d b4 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%esi
80100574:	e8 17 5f 00 00       	call   80106490 <memmove>
80100579:	b8 80 07 00 00       	mov    $0x780,%eax
8010057e:	83 c4 0c             	add    $0xc,%esp
80100581:	29 d8                	sub    %ebx,%eax
80100583:	01 c0                	add    %eax,%eax
80100585:	50                   	push   %eax
80100586:	6a 00                	push   $0x0
80100588:	56                   	push   %esi
80100589:	e8 52 5e 00 00       	call   801063e0 <memset>
8010058e:	89 f1                	mov    %esi,%ecx
80100590:	83 c4 10             	add    $0x10,%esp
80100593:	be 07 00 00 00       	mov    $0x7,%esi
80100598:	e9 5c ff ff ff       	jmp    801004f9 <consputc+0xa9>
8010059d:	83 ec 0c             	sub    $0xc,%esp
801005a0:	68 e5 e6 10 80       	push   $0x8010e6e5
801005a5:	e8 26 fe ff ff       	call   801003d0 <panic>
801005aa:	85 c0                	test   %eax,%eax
801005ac:	8d 78 ff             	lea    -0x1(%eax),%edi
801005af:	0f 85 20 ff ff ff    	jne    801004d5 <consputc+0x85>
801005b5:	b9 00 80 0b 80       	mov    $0x800b8000,%ecx
801005ba:	31 db                	xor    %ebx,%ebx
801005bc:	31 f6                	xor    %esi,%esi
801005be:	e9 36 ff ff ff       	jmp    801004f9 <consputc+0xa9>
801005c3:	ba 67 66 66 66       	mov    $0x66666667,%edx
801005c8:	f7 ea                	imul   %edx
801005ca:	89 d0                	mov    %edx,%eax
801005cc:	c1 e8 05             	shr    $0x5,%eax
801005cf:	8d 04 80             	lea    (%eax,%eax,4),%eax
801005d2:	c1 e0 04             	shl    $0x4,%eax
801005d5:	8d 78 50             	lea    0x50(%eax),%edi
801005d8:	e9 f8 fe ff ff       	jmp    801004d5 <consputc+0x85>
801005dd:	8d 76 00             	lea    0x0(%esi),%esi

801005e0 <printint>:
801005e0:	55                   	push   %ebp
801005e1:	89 e5                	mov    %esp,%ebp
801005e3:	57                   	push   %edi
801005e4:	56                   	push   %esi
801005e5:	53                   	push   %ebx
801005e6:	89 d6                	mov    %edx,%esi
801005e8:	83 ec 2c             	sub    $0x2c,%esp
801005eb:	85 c9                	test   %ecx,%ecx
801005ed:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
801005f0:	74 0c                	je     801005fe <printint+0x1e>
801005f2:	89 c7                	mov    %eax,%edi
801005f4:	c1 ef 1f             	shr    $0x1f,%edi
801005f7:	85 c0                	test   %eax,%eax
801005f9:	89 7d d4             	mov    %edi,-0x2c(%ebp)
801005fc:	78 51                	js     8010064f <printint+0x6f>
801005fe:	31 ff                	xor    %edi,%edi
80100600:	8d 5d d7             	lea    -0x29(%ebp),%ebx
80100603:	eb 05                	jmp    8010060a <printint+0x2a>
80100605:	8d 76 00             	lea    0x0(%esi),%esi
80100608:	89 cf                	mov    %ecx,%edi
8010060a:	31 d2                	xor    %edx,%edx
8010060c:	8d 4f 01             	lea    0x1(%edi),%ecx
8010060f:	f7 f6                	div    %esi
80100611:	0f b6 92 3c e7 10 80 	movzbl -0x7fef18c4(%edx),%edx
80100618:	85 c0                	test   %eax,%eax
8010061a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
8010061d:	75 e9                	jne    80100608 <printint+0x28>
8010061f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
80100622:	85 c0                	test   %eax,%eax
80100624:	74 08                	je     8010062e <printint+0x4e>
80100626:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
8010062b:	8d 4f 02             	lea    0x2(%edi),%ecx
8010062e:	8d 74 0d d7          	lea    -0x29(%ebp,%ecx,1),%esi
80100632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100638:	0f be 06             	movsbl (%esi),%eax
8010063b:	83 ee 01             	sub    $0x1,%esi
8010063e:	e8 0d fe ff ff       	call   80100450 <consputc>
80100643:	39 de                	cmp    %ebx,%esi
80100645:	75 f1                	jne    80100638 <printint+0x58>
80100647:	83 c4 2c             	add    $0x2c,%esp
8010064a:	5b                   	pop    %ebx
8010064b:	5e                   	pop    %esi
8010064c:	5f                   	pop    %edi
8010064d:	5d                   	pop    %ebp
8010064e:	c3                   	ret    
8010064f:	f7 d8                	neg    %eax
80100651:	eb ab                	jmp    801005fe <printint+0x1e>
80100653:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100660 <cprintf>:
80100660:	55                   	push   %ebp
80100661:	89 e5                	mov    %esp,%ebp
80100663:	57                   	push   %edi
80100664:	56                   	push   %esi
80100665:	53                   	push   %ebx
80100666:	83 ec 1c             	sub    $0x1c,%esp
80100669:	a1 54 05 12 80       	mov    0x80120554,%eax
8010066e:	85 c0                	test   %eax,%eax
80100670:	89 45 e0             	mov    %eax,-0x20(%ebp)
80100673:	0f 85 47 01 00 00    	jne    801007c0 <cprintf+0x160>
80100679:	8b 45 08             	mov    0x8(%ebp),%eax
8010067c:	85 c0                	test   %eax,%eax
8010067e:	89 c1                	mov    %eax,%ecx
80100680:	0f 84 4f 01 00 00    	je     801007d5 <cprintf+0x175>
80100686:	0f b6 00             	movzbl (%eax),%eax
80100689:	31 db                	xor    %ebx,%ebx
8010068b:	8d 75 0c             	lea    0xc(%ebp),%esi
8010068e:	89 cf                	mov    %ecx,%edi
80100690:	85 c0                	test   %eax,%eax
80100692:	75 55                	jne    801006e9 <cprintf+0x89>
80100694:	eb 68                	jmp    801006fe <cprintf+0x9e>
80100696:	8d 76 00             	lea    0x0(%esi),%esi
80100699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801006a0:	83 c3 01             	add    $0x1,%ebx
801006a3:	0f b6 14 1f          	movzbl (%edi,%ebx,1),%edx
801006a7:	85 d2                	test   %edx,%edx
801006a9:	74 53                	je     801006fe <cprintf+0x9e>
801006ab:	83 fa 70             	cmp    $0x70,%edx
801006ae:	74 7a                	je     8010072a <cprintf+0xca>
801006b0:	7f 6e                	jg     80100720 <cprintf+0xc0>
801006b2:	83 fa 25             	cmp    $0x25,%edx
801006b5:	0f 84 ad 00 00 00    	je     80100768 <cprintf+0x108>
801006bb:	83 fa 64             	cmp    $0x64,%edx
801006be:	0f 85 84 00 00 00    	jne    80100748 <cprintf+0xe8>
801006c4:	8d 46 04             	lea    0x4(%esi),%eax
801006c7:	b9 01 00 00 00       	mov    $0x1,%ecx
801006cc:	ba 0a 00 00 00       	mov    $0xa,%edx
801006d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801006d4:	8b 06                	mov    (%esi),%eax
801006d6:	e8 05 ff ff ff       	call   801005e0 <printint>
801006db:	8b 75 e4             	mov    -0x1c(%ebp),%esi
801006de:	83 c3 01             	add    $0x1,%ebx
801006e1:	0f b6 04 1f          	movzbl (%edi,%ebx,1),%eax
801006e5:	85 c0                	test   %eax,%eax
801006e7:	74 15                	je     801006fe <cprintf+0x9e>
801006e9:	83 f8 25             	cmp    $0x25,%eax
801006ec:	74 b2                	je     801006a0 <cprintf+0x40>
801006ee:	e8 5d fd ff ff       	call   80100450 <consputc>
801006f3:	83 c3 01             	add    $0x1,%ebx
801006f6:	0f b6 04 1f          	movzbl (%edi,%ebx,1),%eax
801006fa:	85 c0                	test   %eax,%eax
801006fc:	75 eb                	jne    801006e9 <cprintf+0x89>
801006fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
80100701:	85 c0                	test   %eax,%eax
80100703:	74 10                	je     80100715 <cprintf+0xb5>
80100705:	83 ec 0c             	sub    $0xc,%esp
80100708:	68 20 05 12 80       	push   $0x80120520
8010070d:	e8 7e 5c 00 00       	call   80106390 <release>
80100712:	83 c4 10             	add    $0x10,%esp
80100715:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100718:	5b                   	pop    %ebx
80100719:	5e                   	pop    %esi
8010071a:	5f                   	pop    %edi
8010071b:	5d                   	pop    %ebp
8010071c:	c3                   	ret    
8010071d:	8d 76 00             	lea    0x0(%esi),%esi
80100720:	83 fa 73             	cmp    $0x73,%edx
80100723:	74 5b                	je     80100780 <cprintf+0x120>
80100725:	83 fa 78             	cmp    $0x78,%edx
80100728:	75 1e                	jne    80100748 <cprintf+0xe8>
8010072a:	8d 46 04             	lea    0x4(%esi),%eax
8010072d:	31 c9                	xor    %ecx,%ecx
8010072f:	ba 10 00 00 00       	mov    $0x10,%edx
80100734:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80100737:	8b 06                	mov    (%esi),%eax
80100739:	e8 a2 fe ff ff       	call   801005e0 <printint>
8010073e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
80100741:	eb 9b                	jmp    801006de <cprintf+0x7e>
80100743:	90                   	nop
80100744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100748:	b8 25 00 00 00       	mov    $0x25,%eax
8010074d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80100750:	e8 fb fc ff ff       	call   80100450 <consputc>
80100755:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80100758:	89 d0                	mov    %edx,%eax
8010075a:	e8 f1 fc ff ff       	call   80100450 <consputc>
8010075f:	e9 7a ff ff ff       	jmp    801006de <cprintf+0x7e>
80100764:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100768:	b8 25 00 00 00       	mov    $0x25,%eax
8010076d:	e8 de fc ff ff       	call   80100450 <consputc>
80100772:	e9 7c ff ff ff       	jmp    801006f3 <cprintf+0x93>
80100777:	89 f6                	mov    %esi,%esi
80100779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80100780:	8d 46 04             	lea    0x4(%esi),%eax
80100783:	8b 36                	mov    (%esi),%esi
80100785:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80100788:	b8 f8 e6 10 80       	mov    $0x8010e6f8,%eax
8010078d:	85 f6                	test   %esi,%esi
8010078f:	0f 44 f0             	cmove  %eax,%esi
80100792:	0f be 06             	movsbl (%esi),%eax
80100795:	84 c0                	test   %al,%al
80100797:	74 16                	je     801007af <cprintf+0x14f>
80100799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801007a0:	83 c6 01             	add    $0x1,%esi
801007a3:	e8 a8 fc ff ff       	call   80100450 <consputc>
801007a8:	0f be 06             	movsbl (%esi),%eax
801007ab:	84 c0                	test   %al,%al
801007ad:	75 f1                	jne    801007a0 <cprintf+0x140>
801007af:	8b 75 e4             	mov    -0x1c(%ebp),%esi
801007b2:	e9 27 ff ff ff       	jmp    801006de <cprintf+0x7e>
801007b7:	89 f6                	mov    %esi,%esi
801007b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801007c0:	83 ec 0c             	sub    $0xc,%esp
801007c3:	68 20 05 12 80       	push   $0x80120520
801007c8:	e8 a3 5a 00 00       	call   80106270 <acquire>
801007cd:	83 c4 10             	add    $0x10,%esp
801007d0:	e9 a4 fe ff ff       	jmp    80100679 <cprintf+0x19>
801007d5:	83 ec 0c             	sub    $0xc,%esp
801007d8:	68 ff e6 10 80       	push   $0x8010e6ff
801007dd:	e8 ee fb ff ff       	call   801003d0 <panic>
801007e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801007e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801007f0 <consoleclear>:
801007f0:	55                   	push   %ebp
801007f1:	89 e5                	mov    %esp,%ebp
801007f3:	83 ec 0c             	sub    $0xc,%esp
801007f6:	68 00 0f 00 00       	push   $0xf00
801007fb:	6a 00                	push   $0x0
801007fd:	68 00 80 0b 80       	push   $0x800b8000
80100802:	e8 d9 5b 00 00       	call   801063e0 <memset>
80100807:	ba d4 03 00 00       	mov    $0x3d4,%edx
8010080c:	b8 0e 00 00 00       	mov    $0xe,%eax
80100811:	ee                   	out    %al,(%dx)
80100812:	ba d5 03 00 00       	mov    $0x3d5,%edx
80100817:	31 c0                	xor    %eax,%eax
80100819:	ee                   	out    %al,(%dx)
8010081a:	ba d4 03 00 00       	mov    $0x3d4,%edx
8010081f:	b8 0f 00 00 00       	mov    $0xf,%eax
80100824:	ee                   	out    %al,(%dx)
80100825:	ba d5 03 00 00       	mov    $0x3d5,%edx
8010082a:	31 c0                	xor    %eax,%eax
8010082c:	ee                   	out    %al,(%dx)
8010082d:	b8 20 07 00 00       	mov    $0x720,%eax
80100832:	83 c4 10             	add    $0x10,%esp
80100835:	66 a3 00 80 0b 80    	mov    %ax,0x800b8000
8010083b:	c9                   	leave  
8010083c:	c3                   	ret    
8010083d:	8d 76 00             	lea    0x0(%esi),%esi

80100840 <consoleintr>:
80100840:	55                   	push   %ebp
80100841:	89 e5                	mov    %esp,%ebp
80100843:	57                   	push   %edi
80100844:	56                   	push   %esi
80100845:	53                   	push   %ebx
80100846:	31 f6                	xor    %esi,%esi
80100848:	83 ec 18             	sub    $0x18,%esp
8010084b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010084e:	68 20 05 12 80       	push   $0x80120520
80100853:	e8 18 5a 00 00       	call   80106270 <acquire>
80100858:	83 c4 10             	add    $0x10,%esp
8010085b:	90                   	nop
8010085c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100860:	ff d3                	call   *%ebx
80100862:	85 c0                	test   %eax,%eax
80100864:	89 c7                	mov    %eax,%edi
80100866:	78 48                	js     801008b0 <consoleintr+0x70>
80100868:	83 ff 10             	cmp    $0x10,%edi
8010086b:	0f 84 3f 01 00 00    	je     801009b0 <consoleintr+0x170>
80100871:	7e 5d                	jle    801008d0 <consoleintr+0x90>
80100873:	83 ff 15             	cmp    $0x15,%edi
80100876:	0f 84 dc 00 00 00    	je     80100958 <consoleintr+0x118>
8010087c:	83 ff 7f             	cmp    $0x7f,%edi
8010087f:	75 54                	jne    801008d5 <consoleintr+0x95>
80100881:	a1 28 ae 12 80       	mov    0x8012ae28,%eax
80100886:	3b 05 24 ae 12 80    	cmp    0x8012ae24,%eax
8010088c:	74 d2                	je     80100860 <consoleintr+0x20>
8010088e:	83 e8 01             	sub    $0x1,%eax
80100891:	a3 28 ae 12 80       	mov    %eax,0x8012ae28
80100896:	b8 00 01 00 00       	mov    $0x100,%eax
8010089b:	e8 b0 fb ff ff       	call   80100450 <consputc>
801008a0:	ff d3                	call   *%ebx
801008a2:	85 c0                	test   %eax,%eax
801008a4:	89 c7                	mov    %eax,%edi
801008a6:	79 c0                	jns    80100868 <consoleintr+0x28>
801008a8:	90                   	nop
801008a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801008b0:	83 ec 0c             	sub    $0xc,%esp
801008b3:	68 20 05 12 80       	push   $0x80120520
801008b8:	e8 d3 5a 00 00       	call   80106390 <release>
801008bd:	83 c4 10             	add    $0x10,%esp
801008c0:	85 f6                	test   %esi,%esi
801008c2:	0f 85 f8 00 00 00    	jne    801009c0 <consoleintr+0x180>
801008c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801008cb:	5b                   	pop    %ebx
801008cc:	5e                   	pop    %esi
801008cd:	5f                   	pop    %edi
801008ce:	5d                   	pop    %ebp
801008cf:	c3                   	ret    
801008d0:	83 ff 08             	cmp    $0x8,%edi
801008d3:	74 ac                	je     80100881 <consoleintr+0x41>
801008d5:	85 ff                	test   %edi,%edi
801008d7:	74 87                	je     80100860 <consoleintr+0x20>
801008d9:	a1 28 ae 12 80       	mov    0x8012ae28,%eax
801008de:	89 c2                	mov    %eax,%edx
801008e0:	2b 15 20 ae 12 80    	sub    0x8012ae20,%edx
801008e6:	83 fa 7f             	cmp    $0x7f,%edx
801008e9:	0f 87 71 ff ff ff    	ja     80100860 <consoleintr+0x20>
801008ef:	8d 50 01             	lea    0x1(%eax),%edx
801008f2:	83 e0 7f             	and    $0x7f,%eax
801008f5:	83 ff 0d             	cmp    $0xd,%edi
801008f8:	89 15 28 ae 12 80    	mov    %edx,0x8012ae28
801008fe:	0f 84 c8 00 00 00    	je     801009cc <consoleintr+0x18c>
80100904:	89 f9                	mov    %edi,%ecx
80100906:	88 88 a0 ad 12 80    	mov    %cl,-0x7fed5260(%eax)
8010090c:	89 f8                	mov    %edi,%eax
8010090e:	e8 3d fb ff ff       	call   80100450 <consputc>
80100913:	83 ff 0a             	cmp    $0xa,%edi
80100916:	0f 84 c1 00 00 00    	je     801009dd <consoleintr+0x19d>
8010091c:	83 ff 04             	cmp    $0x4,%edi
8010091f:	0f 84 b8 00 00 00    	je     801009dd <consoleintr+0x19d>
80100925:	a1 20 ae 12 80       	mov    0x8012ae20,%eax
8010092a:	83 e8 80             	sub    $0xffffff80,%eax
8010092d:	39 05 28 ae 12 80    	cmp    %eax,0x8012ae28
80100933:	0f 85 27 ff ff ff    	jne    80100860 <consoleintr+0x20>
80100939:	83 ec 0c             	sub    $0xc,%esp
8010093c:	a3 24 ae 12 80       	mov    %eax,0x8012ae24
80100941:	68 20 ae 12 80       	push   $0x8012ae20
80100946:	e8 a3 54 00 00       	call   80105dee <wakeup>
8010094b:	83 c4 10             	add    $0x10,%esp
8010094e:	e9 0d ff ff ff       	jmp    80100860 <consoleintr+0x20>
80100953:	90                   	nop
80100954:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100958:	a1 28 ae 12 80       	mov    0x8012ae28,%eax
8010095d:	39 05 24 ae 12 80    	cmp    %eax,0x8012ae24
80100963:	75 2b                	jne    80100990 <consoleintr+0x150>
80100965:	e9 f6 fe ff ff       	jmp    80100860 <consoleintr+0x20>
8010096a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100970:	a3 28 ae 12 80       	mov    %eax,0x8012ae28
80100975:	b8 00 01 00 00       	mov    $0x100,%eax
8010097a:	e8 d1 fa ff ff       	call   80100450 <consputc>
8010097f:	a1 28 ae 12 80       	mov    0x8012ae28,%eax
80100984:	3b 05 24 ae 12 80    	cmp    0x8012ae24,%eax
8010098a:	0f 84 d0 fe ff ff    	je     80100860 <consoleintr+0x20>
80100990:	83 e8 01             	sub    $0x1,%eax
80100993:	89 c2                	mov    %eax,%edx
80100995:	83 e2 7f             	and    $0x7f,%edx
80100998:	80 ba a0 ad 12 80 0a 	cmpb   $0xa,-0x7fed5260(%edx)
8010099f:	75 cf                	jne    80100970 <consoleintr+0x130>
801009a1:	e9 ba fe ff ff       	jmp    80100860 <consoleintr+0x20>
801009a6:	8d 76 00             	lea    0x0(%esi),%esi
801009a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801009b0:	be 01 00 00 00       	mov    $0x1,%esi
801009b5:	e9 a6 fe ff ff       	jmp    80100860 <consoleintr+0x20>
801009ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801009c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801009c3:	5b                   	pop    %ebx
801009c4:	5e                   	pop    %esi
801009c5:	5f                   	pop    %edi
801009c6:	5d                   	pop    %ebp
801009c7:	e9 d7 54 00 00       	jmp    80105ea3 <procdump>
801009cc:	c6 80 a0 ad 12 80 0a 	movb   $0xa,-0x7fed5260(%eax)
801009d3:	b8 0a 00 00 00       	mov    $0xa,%eax
801009d8:	e8 73 fa ff ff       	call   80100450 <consputc>
801009dd:	a1 28 ae 12 80       	mov    0x8012ae28,%eax
801009e2:	e9 52 ff ff ff       	jmp    80100939 <consoleintr+0xf9>
801009e7:	89 f6                	mov    %esi,%esi
801009e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801009f0 <consoleread>:
801009f0:	55                   	push   %ebp
801009f1:	89 e5                	mov    %esp,%ebp
801009f3:	57                   	push   %edi
801009f4:	56                   	push   %esi
801009f5:	53                   	push   %ebx
801009f6:	83 ec 28             	sub    $0x28,%esp
801009f9:	8b 7d 08             	mov    0x8(%ebp),%edi
801009fc:	8b 75 0c             	mov    0xc(%ebp),%esi
801009ff:	57                   	push   %edi
80100a00:	e8 ab 15 00 00       	call   80101fb0 <iunlock>
80100a05:	c7 04 24 20 05 12 80 	movl   $0x80120520,(%esp)
80100a0c:	e8 5f 58 00 00       	call   80106270 <acquire>
80100a11:	8b 5d 10             	mov    0x10(%ebp),%ebx
80100a14:	83 c4 10             	add    $0x10,%esp
80100a17:	31 c0                	xor    %eax,%eax
80100a19:	85 db                	test   %ebx,%ebx
80100a1b:	0f 8e 9a 00 00 00    	jle    80100abb <consoleread+0xcb>
80100a21:	a1 20 ae 12 80       	mov    0x8012ae20,%eax
80100a26:	3b 05 24 ae 12 80    	cmp    0x8012ae24,%eax
80100a2c:	74 24                	je     80100a52 <consoleread+0x62>
80100a2e:	eb 58                	jmp    80100a88 <consoleread+0x98>
80100a30:	83 ec 08             	sub    $0x8,%esp
80100a33:	68 20 05 12 80       	push   $0x80120520
80100a38:	68 20 ae 12 80       	push   $0x8012ae20
80100a3d:	e8 df 51 00 00       	call   80105c21 <sleep>
80100a42:	a1 20 ae 12 80       	mov    0x8012ae20,%eax
80100a47:	83 c4 10             	add    $0x10,%esp
80100a4a:	3b 05 24 ae 12 80    	cmp    0x8012ae24,%eax
80100a50:	75 36                	jne    80100a88 <consoleread+0x98>
80100a52:	e8 0c 48 00 00       	call   80105263 <myproc>
80100a57:	8b 40 44             	mov    0x44(%eax),%eax
80100a5a:	85 c0                	test   %eax,%eax
80100a5c:	74 d2                	je     80100a30 <consoleread+0x40>
80100a5e:	83 ec 0c             	sub    $0xc,%esp
80100a61:	68 20 05 12 80       	push   $0x80120520
80100a66:	e8 25 59 00 00       	call   80106390 <release>
80100a6b:	89 3c 24             	mov    %edi,(%esp)
80100a6e:	e8 5d 14 00 00       	call   80101ed0 <ilock>
80100a73:	83 c4 10             	add    $0x10,%esp
80100a76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100a7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100a7e:	5b                   	pop    %ebx
80100a7f:	5e                   	pop    %esi
80100a80:	5f                   	pop    %edi
80100a81:	5d                   	pop    %ebp
80100a82:	c3                   	ret    
80100a83:	90                   	nop
80100a84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100a88:	8d 50 01             	lea    0x1(%eax),%edx
80100a8b:	89 15 20 ae 12 80    	mov    %edx,0x8012ae20
80100a91:	89 c2                	mov    %eax,%edx
80100a93:	83 e2 7f             	and    $0x7f,%edx
80100a96:	0f be 92 a0 ad 12 80 	movsbl -0x7fed5260(%edx),%edx
80100a9d:	83 fa 04             	cmp    $0x4,%edx
80100aa0:	74 39                	je     80100adb <consoleread+0xeb>
80100aa2:	83 c6 01             	add    $0x1,%esi
80100aa5:	83 eb 01             	sub    $0x1,%ebx
80100aa8:	83 fa 0a             	cmp    $0xa,%edx
80100aab:	88 56 ff             	mov    %dl,-0x1(%esi)
80100aae:	74 35                	je     80100ae5 <consoleread+0xf5>
80100ab0:	85 db                	test   %ebx,%ebx
80100ab2:	0f 85 69 ff ff ff    	jne    80100a21 <consoleread+0x31>
80100ab8:	8b 45 10             	mov    0x10(%ebp),%eax
80100abb:	83 ec 0c             	sub    $0xc,%esp
80100abe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80100ac1:	68 20 05 12 80       	push   $0x80120520
80100ac6:	e8 c5 58 00 00       	call   80106390 <release>
80100acb:	89 3c 24             	mov    %edi,(%esp)
80100ace:	e8 fd 13 00 00       	call   80101ed0 <ilock>
80100ad3:	83 c4 10             	add    $0x10,%esp
80100ad6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100ad9:	eb a0                	jmp    80100a7b <consoleread+0x8b>
80100adb:	39 5d 10             	cmp    %ebx,0x10(%ebp)
80100ade:	76 05                	jbe    80100ae5 <consoleread+0xf5>
80100ae0:	a3 20 ae 12 80       	mov    %eax,0x8012ae20
80100ae5:	8b 45 10             	mov    0x10(%ebp),%eax
80100ae8:	29 d8                	sub    %ebx,%eax
80100aea:	eb cf                	jmp    80100abb <consoleread+0xcb>
80100aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80100af0 <ttyread>:
80100af0:	55                   	push   %ebp
80100af1:	89 e5                	mov    %esp,%ebp
80100af3:	53                   	push   %ebx
80100af4:	83 ec 04             	sub    $0x4,%esp
80100af7:	8b 5d 08             	mov    0x8(%ebp),%ebx
80100afa:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100afe:	6b c0 38             	imul   $0x38,%eax,%eax
80100b01:	8b 80 40 ae 12 80    	mov    -0x7fed51c0(%eax),%eax
80100b07:	f6 c4 10             	test   $0x10,%ah
80100b0a:	75 7c                	jne    80100b88 <ttyread+0x98>
80100b0c:	a8 10                	test   $0x10,%al
80100b0e:	75 10                	jne    80100b20 <ttyread+0x30>
80100b10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100b15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100b18:	c9                   	leave  
80100b19:	c3                   	ret    
80100b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100b20:	83 ec 0c             	sub    $0xc,%esp
80100b23:	53                   	push   %ebx
80100b24:	e8 87 14 00 00       	call   80101fb0 <iunlock>
80100b29:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100b2d:	6b c0 38             	imul   $0x38,%eax,%eax
80100b30:	05 44 ae 12 80       	add    $0x8012ae44,%eax
80100b35:	89 04 24             	mov    %eax,(%esp)
80100b38:	e8 33 57 00 00       	call   80106270 <acquire>
80100b3d:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100b41:	5a                   	pop    %edx
80100b42:	59                   	pop    %ecx
80100b43:	6b c0 38             	imul   $0x38,%eax,%eax
80100b46:	8d 90 44 ae 12 80    	lea    -0x7fed51bc(%eax),%edx
80100b4c:	05 40 ae 12 80       	add    $0x8012ae40,%eax
80100b51:	52                   	push   %edx
80100b52:	50                   	push   %eax
80100b53:	e8 c9 50 00 00       	call   80105c21 <sleep>
80100b58:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100b5c:	6b c0 38             	imul   $0x38,%eax,%eax
80100b5f:	05 44 ae 12 80       	add    $0x8012ae44,%eax
80100b64:	89 04 24             	mov    %eax,(%esp)
80100b67:	e8 24 58 00 00       	call   80106390 <release>
80100b6c:	89 1c 24             	mov    %ebx,(%esp)
80100b6f:	e8 5c 13 00 00       	call   80101ed0 <ilock>
80100b74:	83 c4 10             	add    $0x10,%esp
80100b77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80100b7c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100b7f:	c9                   	leave  
80100b80:	c3                   	ret    
80100b81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100b88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100b8b:	c9                   	leave  
80100b8c:	e9 5f fe ff ff       	jmp    801009f0 <consoleread>
80100b91:	eb 0d                	jmp    80100ba0 <consolewrite>
80100b93:	90                   	nop
80100b94:	90                   	nop
80100b95:	90                   	nop
80100b96:	90                   	nop
80100b97:	90                   	nop
80100b98:	90                   	nop
80100b99:	90                   	nop
80100b9a:	90                   	nop
80100b9b:	90                   	nop
80100b9c:	90                   	nop
80100b9d:	90                   	nop
80100b9e:	90                   	nop
80100b9f:	90                   	nop

80100ba0 <consolewrite>:
80100ba0:	55                   	push   %ebp
80100ba1:	89 e5                	mov    %esp,%ebp
80100ba3:	57                   	push   %edi
80100ba4:	56                   	push   %esi
80100ba5:	53                   	push   %ebx
80100ba6:	83 ec 18             	sub    $0x18,%esp
80100ba9:	ff 75 08             	pushl  0x8(%ebp)
80100bac:	8b 75 10             	mov    0x10(%ebp),%esi
80100baf:	e8 fc 13 00 00       	call   80101fb0 <iunlock>
80100bb4:	c7 04 24 20 05 12 80 	movl   $0x80120520,(%esp)
80100bbb:	e8 b0 56 00 00       	call   80106270 <acquire>
80100bc0:	8b 7d 0c             	mov    0xc(%ebp),%edi
80100bc3:	83 c4 10             	add    $0x10,%esp
80100bc6:	85 f6                	test   %esi,%esi
80100bc8:	8d 1c 37             	lea    (%edi,%esi,1),%ebx
80100bcb:	7e 12                	jle    80100bdf <consolewrite+0x3f>
80100bcd:	8d 76 00             	lea    0x0(%esi),%esi
80100bd0:	0f b6 07             	movzbl (%edi),%eax
80100bd3:	83 c7 01             	add    $0x1,%edi
80100bd6:	e8 75 f8 ff ff       	call   80100450 <consputc>
80100bdb:	39 df                	cmp    %ebx,%edi
80100bdd:	75 f1                	jne    80100bd0 <consolewrite+0x30>
80100bdf:	83 ec 0c             	sub    $0xc,%esp
80100be2:	68 20 05 12 80       	push   $0x80120520
80100be7:	e8 a4 57 00 00       	call   80106390 <release>
80100bec:	58                   	pop    %eax
80100bed:	ff 75 08             	pushl  0x8(%ebp)
80100bf0:	e8 db 12 00 00       	call   80101ed0 <ilock>
80100bf5:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100bf8:	89 f0                	mov    %esi,%eax
80100bfa:	5b                   	pop    %ebx
80100bfb:	5e                   	pop    %esi
80100bfc:	5f                   	pop    %edi
80100bfd:	5d                   	pop    %ebp
80100bfe:	c3                   	ret    
80100bff:	90                   	nop

80100c00 <ttywrite>:
80100c00:	55                   	push   %ebp
80100c01:	89 e5                	mov    %esp,%ebp
80100c03:	53                   	push   %ebx
80100c04:	8b 4d 08             	mov    0x8(%ebp),%ecx
80100c07:	8b 45 10             	mov    0x10(%ebp),%eax
80100c0a:	0f bf 51 54          	movswl 0x54(%ecx),%edx
80100c0e:	6b d2 38             	imul   $0x38,%edx,%edx
80100c11:	f6 82 41 ae 12 80 10 	testb  $0x10,-0x7fed51bf(%edx)
80100c18:	75 06                	jne    80100c20 <ttywrite+0x20>
80100c1a:	5b                   	pop    %ebx
80100c1b:	5d                   	pop    %ebp
80100c1c:	c3                   	ret    
80100c1d:	8d 76 00             	lea    0x0(%esi),%esi
80100c20:	5b                   	pop    %ebx
80100c21:	5d                   	pop    %ebp
80100c22:	e9 79 ff ff ff       	jmp    80100ba0 <consolewrite>
80100c27:	89 f6                	mov    %esi,%esi
80100c29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100c30 <consoleinit>:
80100c30:	55                   	push   %ebp
80100c31:	89 e5                	mov    %esp,%ebp
80100c33:	83 ec 10             	sub    $0x10,%esp
80100c36:	68 0b e7 10 80       	push   $0x8010e70b
80100c3b:	68 20 05 12 80       	push   $0x80120520
80100c40:	e8 2b 55 00 00       	call   80106170 <initlock>
80100c45:	58                   	pop    %eax
80100c46:	5a                   	pop    %edx
80100c47:	68 08 e7 10 80       	push   $0x8010e708
80100c4c:	68 44 ae 12 80       	push   $0x8012ae44
80100c51:	c7 05 0c dd 12 80 00 	movl   $0x80100c00,0x8012dd0c
80100c58:	0c 10 80 
80100c5b:	c7 05 08 dd 12 80 f0 	movl   $0x80100af0,0x8012dd08
80100c62:	0a 10 80 
80100c65:	c7 05 40 ae 12 80 10 	movl   $0x1010,0x8012ae40
80100c6c:	10 00 00 
80100c6f:	e8 fc 54 00 00       	call   80106170 <initlock>
80100c74:	59                   	pop    %ecx
80100c75:	58                   	pop    %eax
80100c76:	6a 00                	push   $0x0
80100c78:	6a 01                	push   $0x1
80100c7a:	c7 05 54 05 12 80 01 	movl   $0x1,0x80120554
80100c81:	00 00 00 
80100c84:	e8 37 20 00 00       	call   80102cc0 <ioapicenable>
80100c89:	83 c4 10             	add    $0x10,%esp
80100c8c:	c9                   	leave  
80100c8d:	c3                   	ret    
80100c8e:	66 90                	xchg   %ax,%ax

80100c90 <ttyinit>:
80100c90:	55                   	push   %ebp
80100c91:	c7 05 78 ae 12 80 00 	movl   $0x0,0x8012ae78
80100c98:	00 00 00 
80100c9b:	c7 05 b0 ae 12 80 00 	movl   $0x0,0x8012aeb0
80100ca2:	00 00 00 
80100ca5:	c7 05 e8 ae 12 80 00 	movl   $0x0,0x8012aee8
80100cac:	00 00 00 
80100caf:	89 e5                	mov    %esp,%ebp
80100cb1:	5d                   	pop    %ebp
80100cb2:	c3                   	ret    
80100cb3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100cc0 <tty_disconnect>:
80100cc0:	55                   	push   %ebp
80100cc1:	89 e5                	mov    %esp,%ebp
80100cc3:	83 ec 14             	sub    $0x14,%esp
80100cc6:	8b 45 08             	mov    0x8(%ebp),%eax
80100cc9:	0f bf 40 54          	movswl 0x54(%eax),%eax
80100ccd:	68 40 ae 12 80       	push   $0x8012ae40
80100cd2:	6b c0 38             	imul   $0x38,%eax,%eax
80100cd5:	81 a0 40 ae 12 80 ff 	andl   $0xffffefff,-0x7fed51c0(%eax)
80100cdc:	ef ff ff 
80100cdf:	81 0d 40 ae 12 80 00 	orl    $0x1000,0x8012ae40
80100ce6:	10 00 00 
80100ce9:	e8 00 51 00 00       	call   80105dee <wakeup>
80100cee:	e8 fd fa ff ff       	call   801007f0 <consoleclear>
80100cf3:	83 c4 10             	add    $0x10,%esp
80100cf6:	c7 45 08 13 e7 10 80 	movl   $0x8010e713,0x8(%ebp)
80100cfd:	c9                   	leave  
80100cfe:	e9 5d f9 ff ff       	jmp    80100660 <cprintf>
80100d03:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100d09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100d10 <tty_connect>:
80100d10:	55                   	push   %ebp
80100d11:	ba 40 ae 12 80       	mov    $0x8012ae40,%edx
80100d16:	89 e5                	mov    %esp,%ebp
80100d18:	53                   	push   %ebx
80100d19:	83 ec 04             	sub    $0x4,%esp
80100d1c:	8b 5d 08             	mov    0x8(%ebp),%ebx
80100d1f:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100d23:	6b c0 38             	imul   $0x38,%eax,%eax
80100d26:	81 88 40 ae 12 80 00 	orl    $0x1000,-0x7fed51c0(%eax)
80100d2d:	10 00 00 
80100d30:	31 c0                	xor    %eax,%eax
80100d32:	0f bf 4b 54          	movswl 0x54(%ebx),%ecx
80100d36:	39 c1                	cmp    %eax,%ecx
80100d38:	74 06                	je     80100d40 <tty_connect+0x30>
80100d3a:	81 22 ff ef ff ff    	andl   $0xffffefff,(%edx)
80100d40:	83 c0 01             	add    $0x1,%eax
80100d43:	83 c2 38             	add    $0x38,%edx
80100d46:	83 f8 04             	cmp    $0x4,%eax
80100d49:	75 e7                	jne    80100d32 <tty_connect+0x22>
80100d4b:	e8 a0 fa ff ff       	call   801007f0 <consoleclear>
80100d50:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100d54:	83 ec 08             	sub    $0x8,%esp
80100d57:	83 e8 01             	sub    $0x1,%eax
80100d5a:	50                   	push   %eax
80100d5b:	68 26 e7 10 80       	push   $0x8010e726
80100d60:	e8 fb f8 ff ff       	call   80100660 <cprintf>
80100d65:	0f bf 43 54          	movswl 0x54(%ebx),%eax
80100d69:	83 c4 10             	add    $0x10,%esp
80100d6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100d6f:	6b c0 38             	imul   $0x38,%eax,%eax
80100d72:	05 40 ae 12 80       	add    $0x8012ae40,%eax
80100d77:	89 45 08             	mov    %eax,0x8(%ebp)
80100d7a:	c9                   	leave  
80100d7b:	e9 6e 50 00 00       	jmp    80105dee <wakeup>

80100d80 <tty_attach>:
80100d80:	55                   	push   %ebp
80100d81:	89 e5                	mov    %esp,%ebp
80100d83:	83 ec 10             	sub    $0x10,%esp
80100d86:	8b 55 08             	mov    0x8(%ebp),%edx
80100d89:	0f bf 42 54          	movswl 0x54(%edx),%eax
80100d8d:	68 38 e7 10 80       	push   $0x8010e738
80100d92:	6b c0 38             	imul   $0x38,%eax,%eax
80100d95:	83 88 40 ae 12 80 10 	orl    $0x10,-0x7fed51c0(%eax)
80100d9c:	0f bf 42 54          	movswl 0x54(%edx),%eax
80100da0:	6b c0 38             	imul   $0x38,%eax,%eax
80100da3:	05 44 ae 12 80       	add    $0x8012ae44,%eax
80100da8:	50                   	push   %eax
80100da9:	e8 c2 53 00 00       	call   80106170 <initlock>
80100dae:	83 c4 10             	add    $0x10,%esp
80100db1:	c9                   	leave  
80100db2:	c3                   	ret    
80100db3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100db9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100dc0 <tty_detach>:
80100dc0:	55                   	push   %ebp
80100dc1:	89 e5                	mov    %esp,%ebp
80100dc3:	8b 45 08             	mov    0x8(%ebp),%eax
80100dc6:	5d                   	pop    %ebp
80100dc7:	0f bf 40 54          	movswl 0x54(%eax),%eax
80100dcb:	6b c0 38             	imul   $0x38,%eax,%eax
80100dce:	83 a0 40 ae 12 80 ef 	andl   $0xffffffef,-0x7fed51c0(%eax)
80100dd5:	c3                   	ret    
80100dd6:	8d 76 00             	lea    0x0(%esi),%esi
80100dd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80100de0 <tty_gets>:
80100de0:	55                   	push   %ebp
80100de1:	89 e5                	mov    %esp,%ebp
80100de3:	8b 45 08             	mov    0x8(%ebp),%eax
80100de6:	8b 55 0c             	mov    0xc(%ebp),%edx
80100de9:	5d                   	pop    %ebp
80100dea:	0f bf 40 54          	movswl 0x54(%eax),%eax
80100dee:	6b c0 38             	imul   $0x38,%eax,%eax
80100df1:	85 90 40 ae 12 80    	test   %edx,-0x7fed51c0(%eax)
80100df7:	0f 95 c0             	setne  %al
80100dfa:	0f b6 c0             	movzbl %al,%eax
80100dfd:	c3                   	ret    
80100dfe:	66 90                	xchg   %ax,%ax

80100e00 <devinit>:
80100e00:	55                   	push   %ebp
80100e01:	89 e5                	mov    %esp,%ebp
80100e03:	83 ec 10             	sub    $0x10,%esp
80100e06:	68 4d e7 10 80       	push   $0x8010e74d
80100e0b:	68 20 af 12 80       	push   $0x8012af20
80100e10:	e8 5b 53 00 00       	call   80106170 <initlock>
80100e15:	83 c4 10             	add    $0x10,%esp
80100e18:	c9                   	leave  
80100e19:	c3                   	ret    
80100e1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80100e20 <getorcreatedevice>:
80100e20:	55                   	push   %ebp
80100e21:	89 e5                	mov    %esp,%ebp
80100e23:	57                   	push   %edi
80100e24:	56                   	push   %esi
80100e25:	53                   	push   %ebx
80100e26:	be ff ff ff ff       	mov    $0xffffffff,%esi
80100e2b:	31 db                	xor    %ebx,%ebx
80100e2d:	83 ec 18             	sub    $0x18,%esp
80100e30:	8b 7d 08             	mov    0x8(%ebp),%edi
80100e33:	68 20 af 12 80       	push   $0x8012af20
80100e38:	e8 33 54 00 00       	call   80106270 <acquire>
80100e3d:	ba 70 af 12 80       	mov    $0x8012af70,%edx
80100e42:	83 c4 10             	add    $0x10,%esp
80100e45:	eb 19                	jmp    80100e60 <getorcreatedevice+0x40>
80100e47:	89 f6                	mov    %esi,%esi
80100e49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80100e50:	39 7a 04             	cmp    %edi,0x4(%edx)
80100e53:	74 73                	je     80100ec8 <getorcreatedevice+0xa8>
80100e55:	83 c3 01             	add    $0x1,%ebx
80100e58:	83 c2 24             	add    $0x24,%edx
80100e5b:	83 fb 0a             	cmp    $0xa,%ebx
80100e5e:	74 18                	je     80100e78 <getorcreatedevice+0x58>
80100e60:	8b 0a                	mov    (%edx),%ecx
80100e62:	85 c9                	test   %ecx,%ecx
80100e64:	75 ea                	jne    80100e50 <getorcreatedevice+0x30>
80100e66:	83 fe ff             	cmp    $0xffffffff,%esi
80100e69:	75 e5                	jne    80100e50 <getorcreatedevice+0x30>
80100e6b:	89 de                	mov    %ebx,%esi
80100e6d:	83 c3 01             	add    $0x1,%ebx
80100e70:	83 c2 24             	add    $0x24,%edx
80100e73:	83 fb 0a             	cmp    $0xa,%ebx
80100e76:	75 e8                	jne    80100e60 <getorcreatedevice+0x40>
80100e78:	83 fe ff             	cmp    $0xffffffff,%esi
80100e7b:	74 7a                	je     80100ef7 <getorcreatedevice+0xd7>
80100e7d:	8d 04 f6             	lea    (%esi,%esi,8),%eax
80100e80:	83 ec 0c             	sub    $0xc,%esp
80100e83:	81 ce 00 00 07 00    	or     $0x70000,%esi
80100e89:	8d 1c 85 20 af 12 80 	lea    -0x7fed50e0(,%eax,4),%ebx
80100e90:	c7 43 50 01 00 00 00 	movl   $0x1,0x50(%ebx)
80100e97:	57                   	push   %edi
80100e98:	e8 03 10 00 00       	call   80101ea0 <idup>
80100e9d:	89 43 54             	mov    %eax,0x54(%ebx)
80100ea0:	c7 04 24 20 af 12 80 	movl   $0x8012af20,(%esp)
80100ea7:	e8 e4 54 00 00       	call   80106390 <release>
80100eac:	89 34 24             	mov    %esi,(%esp)
80100eaf:	e8 dc 0d 00 00       	call   80101c90 <fsinit>
80100eb4:	83 c4 10             	add    $0x10,%esp
80100eb7:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100eba:	89 f0                	mov    %esi,%eax
80100ebc:	5b                   	pop    %ebx
80100ebd:	5e                   	pop    %esi
80100ebe:	5f                   	pop    %edi
80100ebf:	5d                   	pop    %ebp
80100ec0:	c3                   	ret    
80100ec1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100ec8:	83 ec 0c             	sub    $0xc,%esp
80100ecb:	8d 04 db             	lea    (%ebx,%ebx,8),%eax
80100ece:	83 c1 01             	add    $0x1,%ecx
80100ed1:	68 20 af 12 80       	push   $0x8012af20
80100ed6:	89 de                	mov    %ebx,%esi
80100ed8:	89 0c 85 70 af 12 80 	mov    %ecx,-0x7fed5090(,%eax,4)
80100edf:	81 ce 00 00 07 00    	or     $0x70000,%esi
80100ee5:	e8 a6 54 00 00       	call   80106390 <release>
80100eea:	83 c4 10             	add    $0x10,%esp
80100eed:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100ef0:	89 f0                	mov    %esi,%eax
80100ef2:	5b                   	pop    %ebx
80100ef3:	5e                   	pop    %esi
80100ef4:	5f                   	pop    %edi
80100ef5:	5d                   	pop    %ebp
80100ef6:	c3                   	ret    
80100ef7:	83 ec 0c             	sub    $0xc,%esp
80100efa:	68 20 af 12 80       	push   $0x8012af20
80100eff:	e8 8c 54 00 00       	call   80106390 <release>
80100f04:	83 c4 10             	add    $0x10,%esp
80100f07:	eb ae                	jmp    80100eb7 <getorcreatedevice+0x97>
80100f09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80100f10 <deviceget>:
80100f10:	55                   	push   %ebp
80100f11:	89 e5                	mov    %esp,%ebp
80100f13:	53                   	push   %ebx
80100f14:	83 ec 04             	sub    $0x4,%esp
80100f17:	8b 45 08             	mov    0x8(%ebp),%eax
80100f1a:	89 c2                	mov    %eax,%edx
80100f1c:	c1 ea 10             	shr    $0x10,%edx
80100f1f:	83 fa 07             	cmp    $0x7,%edx
80100f22:	74 0c                	je     80100f30 <deviceget+0x20>
80100f24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100f27:	c9                   	leave  
80100f28:	c3                   	ret    
80100f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100f30:	83 ec 0c             	sub    $0xc,%esp
80100f33:	0f b7 d8             	movzwl %ax,%ebx
80100f36:	68 20 af 12 80       	push   $0x8012af20
80100f3b:	e8 30 53 00 00       	call   80106270 <acquire>
80100f40:	8d 04 db             	lea    (%ebx,%ebx,8),%eax
80100f43:	83 c4 10             	add    $0x10,%esp
80100f46:	c7 45 08 20 af 12 80 	movl   $0x8012af20,0x8(%ebp)
80100f4d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100f50:	83 04 85 70 af 12 80 	addl   $0x1,-0x7fed5090(,%eax,4)
80100f57:	01 
80100f58:	c9                   	leave  
80100f59:	e9 32 54 00 00       	jmp    80106390 <release>
80100f5e:	66 90                	xchg   %ax,%ax

80100f60 <deviceput>:
80100f60:	55                   	push   %ebp
80100f61:	89 e5                	mov    %esp,%ebp
80100f63:	56                   	push   %esi
80100f64:	53                   	push   %ebx
80100f65:	8b 45 08             	mov    0x8(%ebp),%eax
80100f68:	89 c2                	mov    %eax,%edx
80100f6a:	c1 ea 10             	shr    $0x10,%edx
80100f6d:	83 fa 07             	cmp    $0x7,%edx
80100f70:	74 0e                	je     80100f80 <deviceput+0x20>
80100f72:	8d 65 f8             	lea    -0x8(%ebp),%esp
80100f75:	5b                   	pop    %ebx
80100f76:	5e                   	pop    %esi
80100f77:	5d                   	pop    %ebp
80100f78:	c3                   	ret    
80100f79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100f80:	83 ec 0c             	sub    $0xc,%esp
80100f83:	0f b7 d8             	movzwl %ax,%ebx
80100f86:	68 20 af 12 80       	push   $0x8012af20
80100f8b:	e8 e0 52 00 00       	call   80106270 <acquire>
80100f90:	8d 04 db             	lea    (%ebx,%ebx,8),%eax
80100f93:	83 c4 10             	add    $0x10,%esp
80100f96:	8d 34 85 20 af 12 80 	lea    -0x7fed50e0(,%eax,4),%esi
80100f9d:	8b 46 50             	mov    0x50(%esi),%eax
80100fa0:	83 f8 01             	cmp    $0x1,%eax
80100fa3:	74 23                	je     80100fc8 <deviceput+0x68>
80100fa5:	8d 14 db             	lea    (%ebx,%ebx,8),%edx
80100fa8:	83 e8 01             	sub    $0x1,%eax
80100fab:	c7 45 08 20 af 12 80 	movl   $0x8012af20,0x8(%ebp)
80100fb2:	89 04 95 70 af 12 80 	mov    %eax,-0x7fed5090(,%edx,4)
80100fb9:	8d 65 f8             	lea    -0x8(%ebp),%esp
80100fbc:	5b                   	pop    %ebx
80100fbd:	5e                   	pop    %esi
80100fbe:	5d                   	pop    %ebp
80100fbf:	e9 cc 53 00 00       	jmp    80106390 <release>
80100fc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100fc8:	83 ec 0c             	sub    $0xc,%esp
80100fcb:	68 20 af 12 80       	push   $0x8012af20
80100fd0:	e8 bb 53 00 00       	call   80106390 <release>
80100fd5:	58                   	pop    %eax
80100fd6:	ff 76 54             	pushl  0x54(%esi)
80100fd9:	e8 22 10 00 00       	call   80102000 <iput>
80100fde:	89 d8                	mov    %ebx,%eax
80100fe0:	0d 00 00 07 00       	or     $0x70000,%eax
80100fe5:	89 04 24             	mov    %eax,(%esp)
80100fe8:	e8 e3 f0 ff ff       	call   801000d0 <invalidateblocks>
80100fed:	c7 04 24 20 af 12 80 	movl   $0x8012af20,(%esp)
80100ff4:	e8 77 52 00 00       	call   80106270 <acquire>
80100ff9:	c7 46 54 00 00 00 00 	movl   $0x0,0x54(%esi)
80101000:	8b 46 50             	mov    0x50(%esi),%eax
80101003:	83 c4 10             	add    $0x10,%esp
80101006:	eb 9d                	jmp    80100fa5 <deviceput+0x45>
80101008:	90                   	nop
80101009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80101010 <getinodefordevice>:
80101010:	55                   	push   %ebp
80101011:	31 c0                	xor    %eax,%eax
80101013:	89 e5                	mov    %esp,%ebp
80101015:	8b 55 08             	mov    0x8(%ebp),%edx
80101018:	89 d1                	mov    %edx,%ecx
8010101a:	c1 e9 10             	shr    $0x10,%ecx
8010101d:	83 f9 07             	cmp    $0x7,%ecx
80101020:	75 17                	jne    80101039 <getinodefordevice+0x29>
80101022:	0f b7 d2             	movzwl %dx,%edx
80101025:	8d 14 d2             	lea    (%edx,%edx,8),%edx
80101028:	8d 14 95 20 af 12 80 	lea    -0x7fed50e0(,%edx,4),%edx
8010102f:	8b 4a 50             	mov    0x50(%edx),%ecx
80101032:	85 c9                	test   %ecx,%ecx
80101034:	74 03                	je     80101039 <getinodefordevice+0x29>
80101036:	8b 42 54             	mov    0x54(%edx),%eax
80101039:	5d                   	pop    %ebp
8010103a:	c3                   	ret    
8010103b:	90                   	nop
8010103c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101040 <printdevices>:
80101040:	55                   	push   %ebp
80101041:	89 e5                	mov    %esp,%ebp
80101043:	56                   	push   %esi
80101044:	53                   	push   %ebx
80101045:	be 70 af 12 80       	mov    $0x8012af70,%esi
8010104a:	31 db                	xor    %ebx,%ebx
8010104c:	83 ec 0c             	sub    $0xc,%esp
8010104f:	68 20 af 12 80       	push   $0x8012af20
80101054:	e8 17 52 00 00       	call   80106270 <acquire>
80101059:	c7 04 24 56 e7 10 80 	movl   $0x8010e756,(%esp)
80101060:	e8 fb f5 ff ff       	call   80100660 <cprintf>
80101065:	83 c4 10             	add    $0x10,%esp
80101068:	eb 11                	jmp    8010107b <printdevices+0x3b>
8010106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101070:	83 c3 01             	add    $0x1,%ebx
80101073:	83 c6 24             	add    $0x24,%esi
80101076:	83 fb 0a             	cmp    $0xa,%ebx
80101079:	74 23                	je     8010109e <printdevices+0x5e>
8010107b:	8b 06                	mov    (%esi),%eax
8010107d:	85 c0                	test   %eax,%eax
8010107f:	74 ef                	je     80101070 <printdevices+0x30>
80101081:	50                   	push   %eax
80101082:	ff 76 04             	pushl  0x4(%esi)
80101085:	83 c6 24             	add    $0x24,%esi
80101088:	53                   	push   %ebx
80101089:	68 6c e7 10 80       	push   $0x8010e76c
8010108e:	83 c3 01             	add    $0x1,%ebx
80101091:	e8 ca f5 ff ff       	call   80100660 <cprintf>
80101096:	83 c4 10             	add    $0x10,%esp
80101099:	83 fb 0a             	cmp    $0xa,%ebx
8010109c:	75 dd                	jne    8010107b <printdevices+0x3b>
8010109e:	83 ec 0c             	sub    $0xc,%esp
801010a1:	68 20 af 12 80       	push   $0x8012af20
801010a6:	e8 e5 52 00 00       	call   80106390 <release>
801010ab:	83 c4 10             	add    $0x10,%esp
801010ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
801010b1:	5b                   	pop    %ebx
801010b2:	5e                   	pop    %esi
801010b3:	5d                   	pop    %ebp
801010b4:	c3                   	ret    
801010b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801010b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801010c0 <getsuperblock>:
801010c0:	55                   	push   %ebp
801010c1:	89 e5                	mov    %esp,%ebp
801010c3:	83 ec 08             	sub    $0x8,%esp
801010c6:	8b 45 08             	mov    0x8(%ebp),%eax
801010c9:	89 c2                	mov    %eax,%edx
801010cb:	c1 ea 10             	shr    $0x10,%edx
801010ce:	83 fa 07             	cmp    $0x7,%edx
801010d1:	74 15                	je     801010e8 <getsuperblock+0x28>
801010d3:	83 f8 01             	cmp    $0x1,%eax
801010d6:	77 2f                	ja     80101107 <getsuperblock+0x47>
801010d8:	6b c0 1c             	imul   $0x1c,%eax,%eax
801010db:	c9                   	leave  
801010dc:	05 bc b0 12 80       	add    $0x8012b0bc,%eax
801010e1:	c3                   	ret    
801010e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801010e8:	0f b7 c0             	movzwl %ax,%eax
801010eb:	83 f8 09             	cmp    $0x9,%eax
801010ee:	77 24                	ja     80101114 <getsuperblock+0x54>
801010f0:	8d 04 c0             	lea    (%eax,%eax,8),%eax
801010f3:	c1 e0 02             	shl    $0x2,%eax
801010f6:	8b 90 70 af 12 80    	mov    -0x7fed5090(%eax),%edx
801010fc:	85 d2                	test   %edx,%edx
801010fe:	74 21                	je     80101121 <getsuperblock+0x61>
80101100:	05 54 af 12 80       	add    $0x8012af54,%eax
80101105:	c9                   	leave  
80101106:	c3                   	ret    
80101107:	83 ec 0c             	sub    $0xc,%esp
8010110a:	68 10 e8 10 80       	push   $0x8010e810
8010110f:	e8 bc f2 ff ff       	call   801003d0 <panic>
80101114:	83 ec 0c             	sub    $0xc,%esp
80101117:	68 98 e7 10 80       	push   $0x8010e798
8010111c:	e8 af f2 ff ff       	call   801003d0 <panic>
80101121:	83 ec 0c             	sub    $0xc,%esp
80101124:	68 d4 e7 10 80       	push   $0x8010e7d4
80101129:	e8 a2 f2 ff ff       	call   801003d0 <panic>
8010112e:	66 90                	xchg   %ax,%ax

80101130 <doesbackdevice>:
80101130:	55                   	push   %ebp
80101131:	89 e5                	mov    %esp,%ebp
80101133:	53                   	push   %ebx
80101134:	83 ec 10             	sub    $0x10,%esp
80101137:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010113a:	68 20 af 12 80       	push   $0x8012af20
8010113f:	e8 2c 51 00 00       	call   80106270 <acquire>
80101144:	b8 74 af 12 80       	mov    $0x8012af74,%eax
80101149:	83 c4 10             	add    $0x10,%esp
8010114c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101150:	39 18                	cmp    %ebx,(%eax)
80101152:	74 24                	je     80101178 <doesbackdevice+0x48>
80101154:	83 c0 24             	add    $0x24,%eax
80101157:	3d dc b0 12 80       	cmp    $0x8012b0dc,%eax
8010115c:	75 f2                	jne    80101150 <doesbackdevice+0x20>
8010115e:	83 ec 0c             	sub    $0xc,%esp
80101161:	68 20 af 12 80       	push   $0x8012af20
80101166:	e8 25 52 00 00       	call   80106390 <release>
8010116b:	83 c4 10             	add    $0x10,%esp
8010116e:	31 c0                	xor    %eax,%eax
80101170:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101173:	c9                   	leave  
80101174:	c3                   	ret    
80101175:	8d 76 00             	lea    0x0(%esi),%esi
80101178:	83 ec 0c             	sub    $0xc,%esp
8010117b:	68 20 af 12 80       	push   $0x8012af20
80101180:	e8 0b 52 00 00       	call   80106390 <release>
80101185:	83 c4 10             	add    $0x10,%esp
80101188:	b8 01 00 00 00       	mov    $0x1,%eax
8010118d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101190:	c9                   	leave  
80101191:	c3                   	ret    
80101192:	66 90                	xchg   %ax,%ax
80101194:	66 90                	xchg   %ax,%ax
80101196:	66 90                	xchg   %ax,%ax
80101198:	66 90                	xchg   %ax,%ax
8010119a:	66 90                	xchg   %ax,%ax
8010119c:	66 90                	xchg   %ax,%ax
8010119e:	66 90                	xchg   %ax,%ax

801011a0 <exec>:
801011a0:	55                   	push   %ebp
801011a1:	89 e5                	mov    %esp,%ebp
801011a3:	57                   	push   %edi
801011a4:	56                   	push   %esi
801011a5:	53                   	push   %ebx
801011a6:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
801011ac:	e8 b2 40 00 00       	call   80105263 <myproc>
801011b1:	89 c6                	mov    %eax,%esi
801011b3:	8b 80 ac 02 00 00    	mov    0x2ac(%eax),%eax
801011b9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
801011bf:	e8 1c 26 00 00       	call   801037e0 <begin_op>
801011c4:	83 ec 0c             	sub    $0xc,%esp
801011c7:	ff 75 08             	pushl  0x8(%ebp)
801011ca:	e8 91 16 00 00       	call   80102860 <namei>
801011cf:	83 c4 10             	add    $0x10,%esp
801011d2:	85 c0                	test   %eax,%eax
801011d4:	0f 84 b1 01 00 00    	je     8010138b <exec+0x1eb>
801011da:	83 ec 0c             	sub    $0xc,%esp
801011dd:	89 c3                	mov    %eax,%ebx
801011df:	50                   	push   %eax
801011e0:	e8 eb 0c 00 00       	call   80101ed0 <ilock>
801011e5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
801011eb:	6a 34                	push   $0x34
801011ed:	6a 00                	push   $0x0
801011ef:	50                   	push   %eax
801011f0:	53                   	push   %ebx
801011f1:	e8 ca 0f 00 00       	call   801021c0 <readi>
801011f6:	83 c4 20             	add    $0x20,%esp
801011f9:	83 f8 34             	cmp    $0x34,%eax
801011fc:	74 22                	je     80101220 <exec+0x80>
801011fe:	83 ec 0c             	sub    $0xc,%esp
80101201:	53                   	push   %ebx
80101202:	e8 69 0f 00 00       	call   80102170 <iunlockput>
80101207:	e8 44 26 00 00       	call   80103850 <end_op>
8010120c:	83 c4 10             	add    $0x10,%esp
8010120f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101214:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101217:	5b                   	pop    %ebx
80101218:	5e                   	pop    %esi
80101219:	5f                   	pop    %edi
8010121a:	5d                   	pop    %ebp
8010121b:	c3                   	ret    
8010121c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101220:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
80101227:	45 4c 46 
8010122a:	75 d2                	jne    801011fe <exec+0x5e>
8010122c:	e8 3f 85 00 00       	call   80109770 <setupkvm>
80101231:	85 c0                	test   %eax,%eax
80101233:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
80101239:	74 c3                	je     801011fe <exec+0x5e>
8010123b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
80101242:	00 
80101243:	8b bd 40 ff ff ff    	mov    -0xc0(%ebp),%edi
80101249:	c7 85 ec fe ff ff 00 	movl   $0x0,-0x114(%ebp)
80101250:	00 00 00 
80101253:	0f 84 d3 00 00 00    	je     8010132c <exec+0x18c>
80101259:	31 c0                	xor    %eax,%eax
8010125b:	89 b5 e8 fe ff ff    	mov    %esi,-0x118(%ebp)
80101261:	89 c6                	mov    %eax,%esi
80101263:	eb 18                	jmp    8010127d <exec+0xdd>
80101265:	8d 76 00             	lea    0x0(%esi),%esi
80101268:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
8010126f:	83 c6 01             	add    $0x1,%esi
80101272:	83 c7 20             	add    $0x20,%edi
80101275:	39 f0                	cmp    %esi,%eax
80101277:	0f 8e a9 00 00 00    	jle    80101326 <exec+0x186>
8010127d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
80101283:	6a 20                	push   $0x20
80101285:	57                   	push   %edi
80101286:	50                   	push   %eax
80101287:	53                   	push   %ebx
80101288:	e8 33 0f 00 00       	call   801021c0 <readi>
8010128d:	83 c4 10             	add    $0x10,%esp
80101290:	83 f8 20             	cmp    $0x20,%eax
80101293:	75 7b                	jne    80101310 <exec+0x170>
80101295:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
8010129c:	75 ca                	jne    80101268 <exec+0xc8>
8010129e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
801012a4:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
801012aa:	72 64                	jb     80101310 <exec+0x170>
801012ac:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
801012b2:	72 5c                	jb     80101310 <exec+0x170>
801012b4:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
801012ba:	50                   	push   %eax
801012bb:	ff b5 ec fe ff ff    	pushl  -0x114(%ebp)
801012c1:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
801012c7:	e8 94 82 00 00       	call   80109560 <allocuvm>
801012cc:	83 c4 10             	add    $0x10,%esp
801012cf:	85 c0                	test   %eax,%eax
801012d1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
801012d7:	74 37                	je     80101310 <exec+0x170>
801012d9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
801012df:	a9 ff 0f 00 00       	test   $0xfff,%eax
801012e4:	75 2a                	jne    80101310 <exec+0x170>
801012e6:	83 ec 0c             	sub    $0xc,%esp
801012e9:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
801012ef:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
801012f5:	53                   	push   %ebx
801012f6:	50                   	push   %eax
801012f7:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
801012fd:	e8 1e 81 00 00       	call   80109420 <loaduvm>
80101302:	83 c4 20             	add    $0x20,%esp
80101305:	85 c0                	test   %eax,%eax
80101307:	0f 89 5b ff ff ff    	jns    80101268 <exec+0xc8>
8010130d:	8d 76 00             	lea    0x0(%esi),%esi
80101310:	83 ec 0c             	sub    $0xc,%esp
80101313:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
80101319:	e8 d2 83 00 00       	call   801096f0 <freevm>
8010131e:	83 c4 10             	add    $0x10,%esp
80101321:	e9 d8 fe ff ff       	jmp    801011fe <exec+0x5e>
80101326:	8b b5 e8 fe ff ff    	mov    -0x118(%ebp),%esi
8010132c:	83 ec 0c             	sub    $0xc,%esp
8010132f:	53                   	push   %ebx
80101330:	e8 3b 0e 00 00       	call   80102170 <iunlockput>
80101335:	e8 16 25 00 00       	call   80103850 <end_op>
8010133a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
80101340:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80101346:	05 ff 0f 00 00       	add    $0xfff,%eax
8010134b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80101350:	8d 90 00 20 00 00    	lea    0x2000(%eax),%edx
80101356:	52                   	push   %edx
80101357:	50                   	push   %eax
80101358:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
8010135e:	e8 fd 81 00 00       	call   80109560 <allocuvm>
80101363:	83 c4 20             	add    $0x20,%esp
80101366:	85 c0                	test   %eax,%eax
80101368:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
8010136e:	75 2a                	jne    8010139a <exec+0x1fa>
80101370:	83 ec 0c             	sub    $0xc,%esp
80101373:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
80101379:	e8 72 83 00 00       	call   801096f0 <freevm>
8010137e:	83 c4 10             	add    $0x10,%esp
80101381:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101386:	e9 89 fe ff ff       	jmp    80101214 <exec+0x74>
8010138b:	e8 c0 24 00 00       	call   80103850 <end_op>
80101390:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101395:	e9 7a fe ff ff       	jmp    80101214 <exec+0x74>
8010139a:	8b 9d ec fe ff ff    	mov    -0x114(%ebp),%ebx
801013a0:	83 ec 08             	sub    $0x8,%esp
801013a3:	31 ff                	xor    %edi,%edi
801013a5:	89 d8                	mov    %ebx,%eax
801013a7:	2d 00 20 00 00       	sub    $0x2000,%eax
801013ac:	50                   	push   %eax
801013ad:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
801013b3:	e8 58 84 00 00       	call   80109810 <clearpteu>
801013b8:	8b 45 0c             	mov    0xc(%ebp),%eax
801013bb:	83 c4 10             	add    $0x10,%esp
801013be:	8b 00                	mov    (%eax),%eax
801013c0:	85 c0                	test   %eax,%eax
801013c2:	0f 84 58 01 00 00    	je     80101520 <exec+0x380>
801013c8:	89 b5 e8 fe ff ff    	mov    %esi,-0x118(%ebp)
801013ce:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
801013d4:	eb 0f                	jmp    801013e5 <exec+0x245>
801013d6:	8d 76 00             	lea    0x0(%esi),%esi
801013d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801013e0:	83 ff 20             	cmp    $0x20,%edi
801013e3:	74 8b                	je     80101370 <exec+0x1d0>
801013e5:	83 ec 0c             	sub    $0xc,%esp
801013e8:	50                   	push   %eax
801013e9:	e8 82 52 00 00       	call   80106670 <strlen>
801013ee:	f7 d0                	not    %eax
801013f0:	01 c3                	add    %eax,%ebx
801013f2:	8b 45 0c             	mov    0xc(%ebp),%eax
801013f5:	5a                   	pop    %edx
801013f6:	83 e3 fc             	and    $0xfffffffc,%ebx
801013f9:	ff 34 b8             	pushl  (%eax,%edi,4)
801013fc:	e8 6f 52 00 00       	call   80106670 <strlen>
80101401:	83 c0 01             	add    $0x1,%eax
80101404:	50                   	push   %eax
80101405:	8b 45 0c             	mov    0xc(%ebp),%eax
80101408:	ff 34 b8             	pushl  (%eax,%edi,4)
8010140b:	53                   	push   %ebx
8010140c:	56                   	push   %esi
8010140d:	e8 5e 85 00 00       	call   80109970 <copyout>
80101412:	83 c4 20             	add    $0x20,%esp
80101415:	85 c0                	test   %eax,%eax
80101417:	0f 88 53 ff ff ff    	js     80101370 <exec+0x1d0>
8010141d:	8b 45 0c             	mov    0xc(%ebp),%eax
80101420:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
80101427:	83 c7 01             	add    $0x1,%edi
8010142a:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
80101430:	8b 04 b8             	mov    (%eax,%edi,4),%eax
80101433:	85 c0                	test   %eax,%eax
80101435:	75 a9                	jne    801013e0 <exec+0x240>
80101437:	8b b5 e8 fe ff ff    	mov    -0x118(%ebp),%esi
8010143d:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
80101444:	89 d9                	mov    %ebx,%ecx
80101446:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
8010144d:	00 00 00 00 
80101451:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
80101458:	ff ff ff 
8010145b:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
80101461:	29 c1                	sub    %eax,%ecx
80101463:	83 c0 0c             	add    $0xc,%eax
80101466:	29 c3                	sub    %eax,%ebx
80101468:	50                   	push   %eax
80101469:	52                   	push   %edx
8010146a:	53                   	push   %ebx
8010146b:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
80101471:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
80101477:	e8 f4 84 00 00       	call   80109970 <copyout>
8010147c:	83 c4 10             	add    $0x10,%esp
8010147f:	85 c0                	test   %eax,%eax
80101481:	0f 88 e9 fe ff ff    	js     80101370 <exec+0x1d0>
80101487:	8b 45 08             	mov    0x8(%ebp),%eax
8010148a:	0f b6 10             	movzbl (%eax),%edx
8010148d:	84 d2                	test   %dl,%dl
8010148f:	74 19                	je     801014aa <exec+0x30a>
80101491:	8b 4d 08             	mov    0x8(%ebp),%ecx
80101494:	83 c0 01             	add    $0x1,%eax
80101497:	80 fa 2f             	cmp    $0x2f,%dl
8010149a:	0f b6 10             	movzbl (%eax),%edx
8010149d:	0f 44 c8             	cmove  %eax,%ecx
801014a0:	83 c0 01             	add    $0x1,%eax
801014a3:	84 d2                	test   %dl,%dl
801014a5:	75 f0                	jne    80101497 <exec+0x2f7>
801014a7:	89 4d 08             	mov    %ecx,0x8(%ebp)
801014aa:	50                   	push   %eax
801014ab:	8d 86 90 00 00 00    	lea    0x90(%esi),%eax
801014b1:	6a 10                	push   $0x10
801014b3:	ff 75 08             	pushl  0x8(%ebp)
801014b6:	50                   	push   %eax
801014b7:	e8 74 51 00 00       	call   80106630 <safestrcpy>
801014bc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
801014c2:	8b 8d ec fe ff ff    	mov    -0x114(%ebp),%ecx
801014c8:	83 c4 10             	add    $0x10,%esp
801014cb:	89 ca                	mov    %ecx,%edx
801014cd:	2b 16                	sub    (%esi),%edx
801014cf:	01 90 38 03 00 00    	add    %edx,0x338(%eax)
801014d5:	8b 80 08 03 00 00    	mov    0x308(%eax),%eax
801014db:	85 c0                	test   %eax,%eax
801014dd:	75 ec                	jne    801014cb <exec+0x32b>
801014df:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
801014e5:	8b 7e 04             	mov    0x4(%esi),%edi
801014e8:	83 ec 0c             	sub    $0xc,%esp
801014eb:	89 46 04             	mov    %eax,0x4(%esi)
801014ee:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
801014f4:	89 06                	mov    %eax,(%esi)
801014f6:	8b 46 38             	mov    0x38(%esi),%eax
801014f9:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
801014ff:	89 50 38             	mov    %edx,0x38(%eax)
80101502:	8b 46 38             	mov    0x38(%esi),%eax
80101505:	89 58 44             	mov    %ebx,0x44(%eax)
80101508:	56                   	push   %esi
80101509:	e8 82 7d 00 00       	call   80109290 <switchuvm>
8010150e:	89 3c 24             	mov    %edi,(%esp)
80101511:	e8 da 81 00 00       	call   801096f0 <freevm>
80101516:	83 c4 10             	add    $0x10,%esp
80101519:	31 c0                	xor    %eax,%eax
8010151b:	e9 f4 fc ff ff       	jmp    80101214 <exec+0x74>
80101520:	8b 9d ec fe ff ff    	mov    -0x114(%ebp),%ebx
80101526:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
8010152c:	e9 0c ff ff ff       	jmp    8010143d <exec+0x29d>
80101531:	66 90                	xchg   %ax,%ax
80101533:	66 90                	xchg   %ax,%ax
80101535:	66 90                	xchg   %ax,%ax
80101537:	66 90                	xchg   %ax,%ax
80101539:	66 90                	xchg   %ax,%ax
8010153b:	66 90                	xchg   %ax,%ax
8010153d:	66 90                	xchg   %ax,%ax
8010153f:	90                   	nop

80101540 <fileinit>:
80101540:	55                   	push   %ebp
80101541:	89 e5                	mov    %esp,%ebp
80101543:	83 ec 10             	sub    $0x10,%esp
80101546:	68 35 e8 10 80       	push   $0x8010e835
8010154b:	68 00 b1 12 80       	push   $0x8012b100
80101550:	e8 1b 4c 00 00       	call   80106170 <initlock>
80101555:	83 c4 10             	add    $0x10,%esp
80101558:	c9                   	leave  
80101559:	c3                   	ret    
8010155a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101560 <filealloc>:
80101560:	55                   	push   %ebp
80101561:	89 e5                	mov    %esp,%ebp
80101563:	53                   	push   %ebx
80101564:	bb 34 b1 12 80       	mov    $0x8012b134,%ebx
80101569:	83 ec 10             	sub    $0x10,%esp
8010156c:	68 00 b1 12 80       	push   $0x8012b100
80101571:	e8 fa 4c 00 00       	call   80106270 <acquire>
80101576:	83 c4 10             	add    $0x10,%esp
80101579:	eb 10                	jmp    8010158b <filealloc+0x2b>
8010157b:	90                   	nop
8010157c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101580:	83 c3 70             	add    $0x70,%ebx
80101583:	81 fb f4 dc 12 80    	cmp    $0x8012dcf4,%ebx
80101589:	74 25                	je     801015b0 <filealloc+0x50>
8010158b:	8b 43 04             	mov    0x4(%ebx),%eax
8010158e:	85 c0                	test   %eax,%eax
80101590:	75 ee                	jne    80101580 <filealloc+0x20>
80101592:	83 ec 0c             	sub    $0xc,%esp
80101595:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
8010159c:	68 00 b1 12 80       	push   $0x8012b100
801015a1:	e8 ea 4d 00 00       	call   80106390 <release>
801015a6:	89 d8                	mov    %ebx,%eax
801015a8:	83 c4 10             	add    $0x10,%esp
801015ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801015ae:	c9                   	leave  
801015af:	c3                   	ret    
801015b0:	83 ec 0c             	sub    $0xc,%esp
801015b3:	68 00 b1 12 80       	push   $0x8012b100
801015b8:	e8 d3 4d 00 00       	call   80106390 <release>
801015bd:	83 c4 10             	add    $0x10,%esp
801015c0:	31 c0                	xor    %eax,%eax
801015c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801015c5:	c9                   	leave  
801015c6:	c3                   	ret    
801015c7:	89 f6                	mov    %esi,%esi
801015c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801015d0 <filedup>:
801015d0:	55                   	push   %ebp
801015d1:	89 e5                	mov    %esp,%ebp
801015d3:	53                   	push   %ebx
801015d4:	83 ec 10             	sub    $0x10,%esp
801015d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801015da:	68 00 b1 12 80       	push   $0x8012b100
801015df:	e8 8c 4c 00 00       	call   80106270 <acquire>
801015e4:	8b 43 04             	mov    0x4(%ebx),%eax
801015e7:	83 c4 10             	add    $0x10,%esp
801015ea:	85 c0                	test   %eax,%eax
801015ec:	7e 1a                	jle    80101608 <filedup+0x38>
801015ee:	83 c0 01             	add    $0x1,%eax
801015f1:	83 ec 0c             	sub    $0xc,%esp
801015f4:	89 43 04             	mov    %eax,0x4(%ebx)
801015f7:	68 00 b1 12 80       	push   $0x8012b100
801015fc:	e8 8f 4d 00 00       	call   80106390 <release>
80101601:	89 d8                	mov    %ebx,%eax
80101603:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101606:	c9                   	leave  
80101607:	c3                   	ret    
80101608:	83 ec 0c             	sub    $0xc,%esp
8010160b:	68 3c e8 10 80       	push   $0x8010e83c
80101610:	e8 bb ed ff ff       	call   801003d0 <panic>
80101615:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101619:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101620 <fileclose>:
80101620:	55                   	push   %ebp
80101621:	89 e5                	mov    %esp,%ebp
80101623:	57                   	push   %edi
80101624:	56                   	push   %esi
80101625:	53                   	push   %ebx
80101626:	83 ec 28             	sub    $0x28,%esp
80101629:	8b 7d 08             	mov    0x8(%ebp),%edi
8010162c:	68 00 b1 12 80       	push   $0x8012b100
80101631:	e8 3a 4c 00 00       	call   80106270 <acquire>
80101636:	8b 47 04             	mov    0x4(%edi),%eax
80101639:	83 c4 10             	add    $0x10,%esp
8010163c:	85 c0                	test   %eax,%eax
8010163e:	0f 8e a3 00 00 00    	jle    801016e7 <fileclose+0xc7>
80101644:	83 e8 01             	sub    $0x1,%eax
80101647:	85 c0                	test   %eax,%eax
80101649:	89 47 04             	mov    %eax,0x4(%edi)
8010164c:	74 1a                	je     80101668 <fileclose+0x48>
8010164e:	c7 45 08 00 b1 12 80 	movl   $0x8012b100,0x8(%ebp)
80101655:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101658:	5b                   	pop    %ebx
80101659:	5e                   	pop    %esi
8010165a:	5f                   	pop    %edi
8010165b:	5d                   	pop    %ebp
8010165c:	e9 2f 4d 00 00       	jmp    80106390 <release>
80101661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101668:	0f b6 47 09          	movzbl 0x9(%edi),%eax
8010166c:	8b 1f                	mov    (%edi),%ebx
8010166e:	83 ec 0c             	sub    $0xc,%esp
80101671:	8b 77 10             	mov    0x10(%edi),%esi
80101674:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
8010167a:	88 45 e7             	mov    %al,-0x19(%ebp)
8010167d:	8b 47 14             	mov    0x14(%edi),%eax
80101680:	68 00 b1 12 80       	push   $0x8012b100
80101685:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101688:	e8 03 4d 00 00       	call   80106390 <release>
8010168d:	83 c4 10             	add    $0x10,%esp
80101690:	83 fb 01             	cmp    $0x1,%ebx
80101693:	74 13                	je     801016a8 <fileclose+0x88>
80101695:	83 fb 02             	cmp    $0x2,%ebx
80101698:	74 26                	je     801016c0 <fileclose+0xa0>
8010169a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010169d:	5b                   	pop    %ebx
8010169e:	5e                   	pop    %esi
8010169f:	5f                   	pop    %edi
801016a0:	5d                   	pop    %ebp
801016a1:	c3                   	ret    
801016a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801016a8:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
801016ac:	83 ec 08             	sub    $0x8,%esp
801016af:	53                   	push   %ebx
801016b0:	56                   	push   %esi
801016b1:	e8 da 36 00 00       	call   80104d90 <pipeclose>
801016b6:	83 c4 10             	add    $0x10,%esp
801016b9:	eb df                	jmp    8010169a <fileclose+0x7a>
801016bb:	90                   	nop
801016bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801016c0:	83 ec 0c             	sub    $0xc,%esp
801016c3:	ff 75 e0             	pushl  -0x20(%ebp)
801016c6:	e8 10 28 00 00       	call   80103edb <mntput>
801016cb:	e8 10 21 00 00       	call   801037e0 <begin_op>
801016d0:	89 34 24             	mov    %esi,(%esp)
801016d3:	e8 28 09 00 00       	call   80102000 <iput>
801016d8:	83 c4 10             	add    $0x10,%esp
801016db:	8d 65 f4             	lea    -0xc(%ebp),%esp
801016de:	5b                   	pop    %ebx
801016df:	5e                   	pop    %esi
801016e0:	5f                   	pop    %edi
801016e1:	5d                   	pop    %ebp
801016e2:	e9 69 21 00 00       	jmp    80103850 <end_op>
801016e7:	83 ec 0c             	sub    $0xc,%esp
801016ea:	68 44 e8 10 80       	push   $0x8010e844
801016ef:	e8 dc ec ff ff       	call   801003d0 <panic>
801016f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801016fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80101700 <filestat>:
80101700:	55                   	push   %ebp
80101701:	89 e5                	mov    %esp,%ebp
80101703:	53                   	push   %ebx
80101704:	83 ec 04             	sub    $0x4,%esp
80101707:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010170a:	83 3b 02             	cmpl   $0x2,(%ebx)
8010170d:	75 31                	jne    80101740 <filestat+0x40>
8010170f:	83 ec 0c             	sub    $0xc,%esp
80101712:	ff 73 10             	pushl  0x10(%ebx)
80101715:	e8 b6 07 00 00       	call   80101ed0 <ilock>
8010171a:	58                   	pop    %eax
8010171b:	5a                   	pop    %edx
8010171c:	ff 75 0c             	pushl  0xc(%ebp)
8010171f:	ff 73 10             	pushl  0x10(%ebx)
80101722:	e8 69 0a 00 00       	call   80102190 <stati>
80101727:	59                   	pop    %ecx
80101728:	ff 73 10             	pushl  0x10(%ebx)
8010172b:	e8 80 08 00 00       	call   80101fb0 <iunlock>
80101730:	83 c4 10             	add    $0x10,%esp
80101733:	31 c0                	xor    %eax,%eax
80101735:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101738:	c9                   	leave  
80101739:	c3                   	ret    
8010173a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101740:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101745:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101748:	c9                   	leave  
80101749:	c3                   	ret    
8010174a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101750 <fileread>:
80101750:	55                   	push   %ebp
80101751:	89 e5                	mov    %esp,%ebp
80101753:	57                   	push   %edi
80101754:	56                   	push   %esi
80101755:	53                   	push   %ebx
80101756:	83 ec 0c             	sub    $0xc,%esp
80101759:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010175c:	8b 75 0c             	mov    0xc(%ebp),%esi
8010175f:	8b 7d 10             	mov    0x10(%ebp),%edi
80101762:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
80101766:	74 60                	je     801017c8 <fileread+0x78>
80101768:	8b 03                	mov    (%ebx),%eax
8010176a:	83 f8 01             	cmp    $0x1,%eax
8010176d:	74 41                	je     801017b0 <fileread+0x60>
8010176f:	83 f8 02             	cmp    $0x2,%eax
80101772:	75 5b                	jne    801017cf <fileread+0x7f>
80101774:	83 ec 0c             	sub    $0xc,%esp
80101777:	ff 73 10             	pushl  0x10(%ebx)
8010177a:	e8 51 07 00 00       	call   80101ed0 <ilock>
8010177f:	57                   	push   %edi
80101780:	ff 73 0c             	pushl  0xc(%ebx)
80101783:	56                   	push   %esi
80101784:	ff 73 10             	pushl  0x10(%ebx)
80101787:	e8 34 0a 00 00       	call   801021c0 <readi>
8010178c:	83 c4 20             	add    $0x20,%esp
8010178f:	85 c0                	test   %eax,%eax
80101791:	89 c6                	mov    %eax,%esi
80101793:	7e 03                	jle    80101798 <fileread+0x48>
80101795:	01 43 0c             	add    %eax,0xc(%ebx)
80101798:	83 ec 0c             	sub    $0xc,%esp
8010179b:	ff 73 10             	pushl  0x10(%ebx)
8010179e:	e8 0d 08 00 00       	call   80101fb0 <iunlock>
801017a3:	83 c4 10             	add    $0x10,%esp
801017a6:	89 f0                	mov    %esi,%eax
801017a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801017ab:	5b                   	pop    %ebx
801017ac:	5e                   	pop    %esi
801017ad:	5f                   	pop    %edi
801017ae:	5d                   	pop    %ebp
801017af:	c3                   	ret    
801017b0:	8b 43 10             	mov    0x10(%ebx),%eax
801017b3:	89 45 08             	mov    %eax,0x8(%ebp)
801017b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801017b9:	5b                   	pop    %ebx
801017ba:	5e                   	pop    %esi
801017bb:	5f                   	pop    %edi
801017bc:	5d                   	pop    %ebp
801017bd:	e9 6e 37 00 00       	jmp    80104f30 <piperead>
801017c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801017c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801017cd:	eb d9                	jmp    801017a8 <fileread+0x58>
801017cf:	83 ec 0c             	sub    $0xc,%esp
801017d2:	68 4e e8 10 80       	push   $0x8010e84e
801017d7:	e8 f4 eb ff ff       	call   801003d0 <panic>
801017dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801017e0 <filewrite>:
801017e0:	55                   	push   %ebp
801017e1:	89 e5                	mov    %esp,%ebp
801017e3:	57                   	push   %edi
801017e4:	56                   	push   %esi
801017e5:	53                   	push   %ebx
801017e6:	83 ec 1c             	sub    $0x1c,%esp
801017e9:	8b 75 08             	mov    0x8(%ebp),%esi
801017ec:	8b 45 0c             	mov    0xc(%ebp),%eax
801017ef:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
801017f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
801017f6:	8b 45 10             	mov    0x10(%ebp),%eax
801017f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801017fc:	0f 84 aa 00 00 00    	je     801018ac <filewrite+0xcc>
80101802:	8b 06                	mov    (%esi),%eax
80101804:	83 f8 01             	cmp    $0x1,%eax
80101807:	0f 84 c2 00 00 00    	je     801018cf <filewrite+0xef>
8010180d:	83 f8 02             	cmp    $0x2,%eax
80101810:	0f 85 d8 00 00 00    	jne    801018ee <filewrite+0x10e>
80101816:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101819:	31 ff                	xor    %edi,%edi
8010181b:	85 c0                	test   %eax,%eax
8010181d:	7f 34                	jg     80101853 <filewrite+0x73>
8010181f:	e9 9c 00 00 00       	jmp    801018c0 <filewrite+0xe0>
80101824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101828:	01 46 0c             	add    %eax,0xc(%esi)
8010182b:	83 ec 0c             	sub    $0xc,%esp
8010182e:	ff 76 10             	pushl  0x10(%esi)
80101831:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101834:	e8 77 07 00 00       	call   80101fb0 <iunlock>
80101839:	e8 12 20 00 00       	call   80103850 <end_op>
8010183e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101841:	83 c4 10             	add    $0x10,%esp
80101844:	39 d8                	cmp    %ebx,%eax
80101846:	0f 85 95 00 00 00    	jne    801018e1 <filewrite+0x101>
8010184c:	01 c7                	add    %eax,%edi
8010184e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
80101851:	7e 6d                	jle    801018c0 <filewrite+0xe0>
80101853:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80101856:	b8 00 06 00 00       	mov    $0x600,%eax
8010185b:	29 fb                	sub    %edi,%ebx
8010185d:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
80101863:	0f 4f d8             	cmovg  %eax,%ebx
80101866:	e8 75 1f 00 00       	call   801037e0 <begin_op>
8010186b:	83 ec 0c             	sub    $0xc,%esp
8010186e:	ff 76 10             	pushl  0x10(%esi)
80101871:	e8 5a 06 00 00       	call   80101ed0 <ilock>
80101876:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101879:	53                   	push   %ebx
8010187a:	ff 76 0c             	pushl  0xc(%esi)
8010187d:	01 f8                	add    %edi,%eax
8010187f:	50                   	push   %eax
80101880:	ff 76 10             	pushl  0x10(%esi)
80101883:	e8 48 0a 00 00       	call   801022d0 <writei>
80101888:	83 c4 20             	add    $0x20,%esp
8010188b:	85 c0                	test   %eax,%eax
8010188d:	7f 99                	jg     80101828 <filewrite+0x48>
8010188f:	83 ec 0c             	sub    $0xc,%esp
80101892:	ff 76 10             	pushl  0x10(%esi)
80101895:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101898:	e8 13 07 00 00       	call   80101fb0 <iunlock>
8010189d:	e8 ae 1f 00 00       	call   80103850 <end_op>
801018a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
801018a5:	83 c4 10             	add    $0x10,%esp
801018a8:	85 c0                	test   %eax,%eax
801018aa:	74 98                	je     80101844 <filewrite+0x64>
801018ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
801018af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801018b4:	5b                   	pop    %ebx
801018b5:	5e                   	pop    %esi
801018b6:	5f                   	pop    %edi
801018b7:	5d                   	pop    %ebp
801018b8:	c3                   	ret    
801018b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801018c0:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
801018c3:	75 e7                	jne    801018ac <filewrite+0xcc>
801018c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801018c8:	89 f8                	mov    %edi,%eax
801018ca:	5b                   	pop    %ebx
801018cb:	5e                   	pop    %esi
801018cc:	5f                   	pop    %edi
801018cd:	5d                   	pop    %ebp
801018ce:	c3                   	ret    
801018cf:	8b 46 10             	mov    0x10(%esi),%eax
801018d2:	89 45 08             	mov    %eax,0x8(%ebp)
801018d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801018d8:	5b                   	pop    %ebx
801018d9:	5e                   	pop    %esi
801018da:	5f                   	pop    %edi
801018db:	5d                   	pop    %ebp
801018dc:	e9 4f 35 00 00       	jmp    80104e30 <pipewrite>
801018e1:	83 ec 0c             	sub    $0xc,%esp
801018e4:	68 57 e8 10 80       	push   $0x8010e857
801018e9:	e8 e2 ea ff ff       	call   801003d0 <panic>
801018ee:	83 ec 0c             	sub    $0xc,%esp
801018f1:	68 5d e8 10 80       	push   $0x8010e85d
801018f6:	e8 d5 ea ff ff       	call   801003d0 <panic>
801018fb:	66 90                	xchg   %ax,%ax
801018fd:	66 90                	xchg   %ax,%ax
801018ff:	90                   	nop

80101900 <balloc>:
80101900:	55                   	push   %ebp
80101901:	89 e5                	mov    %esp,%ebp
80101903:	57                   	push   %edi
80101904:	56                   	push   %esi
80101905:	53                   	push   %ebx
80101906:	83 ec 38             	sub    $0x38,%esp
80101909:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8010190c:	50                   	push   %eax
8010190d:	e8 ae f7 ff ff       	call   801010c0 <getsuperblock>
80101912:	8b 08                	mov    (%eax),%ecx
80101914:	83 c4 10             	add    $0x10,%esp
80101917:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010191a:	85 c9                	test   %ecx,%ecx
8010191c:	0f 84 84 00 00 00    	je     801019a6 <balloc+0xa6>
80101922:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
80101929:	8b 75 dc             	mov    -0x24(%ebp),%esi
8010192c:	8b 7d d8             	mov    -0x28(%ebp),%edi
8010192f:	83 ec 08             	sub    $0x8,%esp
80101932:	89 f0                	mov    %esi,%eax
80101934:	c1 f8 0d             	sar    $0xd,%eax
80101937:	03 47 18             	add    0x18(%edi),%eax
8010193a:	50                   	push   %eax
8010193b:	ff 75 d4             	pushl  -0x2c(%ebp)
8010193e:	e8 9d e8 ff ff       	call   801001e0 <bread>
80101943:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80101946:	8b 07                	mov    (%edi),%eax
80101948:	83 c4 10             	add    $0x10,%esp
8010194b:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010194e:	31 c0                	xor    %eax,%eax
80101950:	eb 30                	jmp    80101982 <balloc+0x82>
80101952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101958:	89 c1                	mov    %eax,%ecx
8010195a:	ba 01 00 00 00       	mov    $0x1,%edx
8010195f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80101962:	83 e1 07             	and    $0x7,%ecx
80101965:	d3 e2                	shl    %cl,%edx
80101967:	89 c1                	mov    %eax,%ecx
80101969:	c1 f9 03             	sar    $0x3,%ecx
8010196c:	0f b6 7c 0b 60       	movzbl 0x60(%ebx,%ecx,1),%edi
80101971:	85 d7                	test   %edx,%edi
80101973:	74 43                	je     801019b8 <balloc+0xb8>
80101975:	83 c0 01             	add    $0x1,%eax
80101978:	83 c6 01             	add    $0x1,%esi
8010197b:	3d 00 20 00 00       	cmp    $0x2000,%eax
80101980:	74 05                	je     80101987 <balloc+0x87>
80101982:	3b 75 e0             	cmp    -0x20(%ebp),%esi
80101985:	72 d1                	jb     80101958 <balloc+0x58>
80101987:	83 ec 0c             	sub    $0xc,%esp
8010198a:	ff 75 e4             	pushl  -0x1c(%ebp)
8010198d:	e8 ae e9 ff ff       	call   80100340 <brelse>
80101992:	8b 75 d8             	mov    -0x28(%ebp),%esi
80101995:	81 45 dc 00 20 00 00 	addl   $0x2000,-0x24(%ebp)
8010199c:	83 c4 10             	add    $0x10,%esp
8010199f:	8b 45 dc             	mov    -0x24(%ebp),%eax
801019a2:	39 06                	cmp    %eax,(%esi)
801019a4:	77 83                	ja     80101929 <balloc+0x29>
801019a6:	83 ec 0c             	sub    $0xc,%esp
801019a9:	68 67 e8 10 80       	push   $0x8010e867
801019ae:	e8 1d ea ff ff       	call   801003d0 <panic>
801019b3:	90                   	nop
801019b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801019b8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
801019bb:	83 ec 0c             	sub    $0xc,%esp
801019be:	09 fa                	or     %edi,%edx
801019c0:	88 54 0b 60          	mov    %dl,0x60(%ebx,%ecx,1)
801019c4:	53                   	push   %ebx
801019c5:	e8 f6 1f 00 00       	call   801039c0 <log_write>
801019ca:	89 1c 24             	mov    %ebx,(%esp)
801019cd:	e8 6e e9 ff ff       	call   80100340 <brelse>
801019d2:	58                   	pop    %eax
801019d3:	5a                   	pop    %edx
801019d4:	56                   	push   %esi
801019d5:	ff 75 d4             	pushl  -0x2c(%ebp)
801019d8:	e8 03 e8 ff ff       	call   801001e0 <bread>
801019dd:	89 c3                	mov    %eax,%ebx
801019df:	8d 40 60             	lea    0x60(%eax),%eax
801019e2:	83 c4 0c             	add    $0xc,%esp
801019e5:	68 00 04 00 00       	push   $0x400
801019ea:	6a 00                	push   $0x0
801019ec:	50                   	push   %eax
801019ed:	e8 ee 49 00 00       	call   801063e0 <memset>
801019f2:	89 1c 24             	mov    %ebx,(%esp)
801019f5:	e8 c6 1f 00 00       	call   801039c0 <log_write>
801019fa:	89 1c 24             	mov    %ebx,(%esp)
801019fd:	e8 3e e9 ff ff       	call   80100340 <brelse>
80101a02:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a05:	89 f0                	mov    %esi,%eax
80101a07:	5b                   	pop    %ebx
80101a08:	5e                   	pop    %esi
80101a09:	5f                   	pop    %edi
80101a0a:	5d                   	pop    %ebp
80101a0b:	c3                   	ret    
80101a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101a10 <iget>:
80101a10:	55                   	push   %ebp
80101a11:	89 e5                	mov    %esp,%ebp
80101a13:	57                   	push   %edi
80101a14:	56                   	push   %esi
80101a15:	53                   	push   %ebx
80101a16:	89 c7                	mov    %eax,%edi
80101a18:	31 f6                	xor    %esi,%esi
80101a1a:	bb 94 dd 12 80       	mov    $0x8012dd94,%ebx
80101a1f:	83 ec 28             	sub    $0x28,%esp
80101a22:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101a25:	68 60 dd 12 80       	push   $0x8012dd60
80101a2a:	e8 41 48 00 00       	call   80106270 <acquire>
80101a2f:	83 c4 10             	add    $0x10,%esp
80101a32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101a35:	eb 1b                	jmp    80101a52 <iget+0x42>
80101a37:	89 f6                	mov    %esi,%esi
80101a39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80101a40:	85 f6                	test   %esi,%esi
80101a42:	74 44                	je     80101a88 <iget+0x78>
80101a44:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101a4a:	81 fb b4 f9 12 80    	cmp    $0x8012f9b4,%ebx
80101a50:	74 4e                	je     80101aa0 <iget+0x90>
80101a52:	8b 4b 08             	mov    0x8(%ebx),%ecx
80101a55:	85 c9                	test   %ecx,%ecx
80101a57:	7e e7                	jle    80101a40 <iget+0x30>
80101a59:	39 3b                	cmp    %edi,(%ebx)
80101a5b:	75 e3                	jne    80101a40 <iget+0x30>
80101a5d:	39 53 04             	cmp    %edx,0x4(%ebx)
80101a60:	75 de                	jne    80101a40 <iget+0x30>
80101a62:	83 ec 0c             	sub    $0xc,%esp
80101a65:	83 c1 01             	add    $0x1,%ecx
80101a68:	89 de                	mov    %ebx,%esi
80101a6a:	68 60 dd 12 80       	push   $0x8012dd60
80101a6f:	89 4b 08             	mov    %ecx,0x8(%ebx)
80101a72:	e8 19 49 00 00       	call   80106390 <release>
80101a77:	83 c4 10             	add    $0x10,%esp
80101a7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a7d:	89 f0                	mov    %esi,%eax
80101a7f:	5b                   	pop    %ebx
80101a80:	5e                   	pop    %esi
80101a81:	5f                   	pop    %edi
80101a82:	5d                   	pop    %ebp
80101a83:	c3                   	ret    
80101a84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101a88:	85 c9                	test   %ecx,%ecx
80101a8a:	0f 44 f3             	cmove  %ebx,%esi
80101a8d:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101a93:	81 fb b4 f9 12 80    	cmp    $0x8012f9b4,%ebx
80101a99:	75 b7                	jne    80101a52 <iget+0x42>
80101a9b:	90                   	nop
80101a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101aa0:	85 f6                	test   %esi,%esi
80101aa2:	74 3b                	je     80101adf <iget+0xcf>
80101aa4:	83 ec 0c             	sub    $0xc,%esp
80101aa7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101aaa:	57                   	push   %edi
80101aab:	e8 60 f4 ff ff       	call   80100f10 <deviceget>
80101ab0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101ab3:	89 3e                	mov    %edi,(%esi)
80101ab5:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
80101abc:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
80101ac3:	89 56 04             	mov    %edx,0x4(%esi)
80101ac6:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80101acd:	e8 be 48 00 00       	call   80106390 <release>
80101ad2:	83 c4 10             	add    $0x10,%esp
80101ad5:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101ad8:	89 f0                	mov    %esi,%eax
80101ada:	5b                   	pop    %ebx
80101adb:	5e                   	pop    %esi
80101adc:	5f                   	pop    %edi
80101add:	5d                   	pop    %ebp
80101ade:	c3                   	ret    
80101adf:	83 ec 0c             	sub    $0xc,%esp
80101ae2:	68 7d e8 10 80       	push   $0x8010e87d
80101ae7:	e8 e4 e8 ff ff       	call   801003d0 <panic>
80101aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101af0 <bmap>:
80101af0:	55                   	push   %ebp
80101af1:	89 e5                	mov    %esp,%ebp
80101af3:	57                   	push   %edi
80101af4:	56                   	push   %esi
80101af5:	53                   	push   %ebx
80101af6:	89 c6                	mov    %eax,%esi
80101af8:	83 ec 1c             	sub    $0x1c,%esp
80101afb:	83 fa 0b             	cmp    $0xb,%edx
80101afe:	77 18                	ja     80101b18 <bmap+0x28>
80101b00:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
80101b03:	8b 43 5c             	mov    0x5c(%ebx),%eax
80101b06:	85 c0                	test   %eax,%eax
80101b08:	74 76                	je     80101b80 <bmap+0x90>
80101b0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b0d:	5b                   	pop    %ebx
80101b0e:	5e                   	pop    %esi
80101b0f:	5f                   	pop    %edi
80101b10:	5d                   	pop    %ebp
80101b11:	c3                   	ret    
80101b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101b18:	8d 5a f4             	lea    -0xc(%edx),%ebx
80101b1b:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
80101b21:	0f 87 80 00 00 00    	ja     80101ba7 <bmap+0xb7>
80101b27:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80101b2d:	85 c0                	test   %eax,%eax
80101b2f:	74 67                	je     80101b98 <bmap+0xa8>
80101b31:	83 ec 08             	sub    $0x8,%esp
80101b34:	50                   	push   %eax
80101b35:	ff 36                	pushl  (%esi)
80101b37:	e8 a4 e6 ff ff       	call   801001e0 <bread>
80101b3c:	8d 54 98 60          	lea    0x60(%eax,%ebx,4),%edx
80101b40:	83 c4 10             	add    $0x10,%esp
80101b43:	89 c7                	mov    %eax,%edi
80101b45:	8b 1a                	mov    (%edx),%ebx
80101b47:	85 db                	test   %ebx,%ebx
80101b49:	75 1d                	jne    80101b68 <bmap+0x78>
80101b4b:	8b 06                	mov    (%esi),%eax
80101b4d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101b50:	e8 ab fd ff ff       	call   80101900 <balloc>
80101b55:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101b58:	83 ec 0c             	sub    $0xc,%esp
80101b5b:	89 c3                	mov    %eax,%ebx
80101b5d:	89 02                	mov    %eax,(%edx)
80101b5f:	57                   	push   %edi
80101b60:	e8 5b 1e 00 00       	call   801039c0 <log_write>
80101b65:	83 c4 10             	add    $0x10,%esp
80101b68:	83 ec 0c             	sub    $0xc,%esp
80101b6b:	57                   	push   %edi
80101b6c:	e8 cf e7 ff ff       	call   80100340 <brelse>
80101b71:	83 c4 10             	add    $0x10,%esp
80101b74:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b77:	89 d8                	mov    %ebx,%eax
80101b79:	5b                   	pop    %ebx
80101b7a:	5e                   	pop    %esi
80101b7b:	5f                   	pop    %edi
80101b7c:	5d                   	pop    %ebp
80101b7d:	c3                   	ret    
80101b7e:	66 90                	xchg   %ax,%ax
80101b80:	8b 06                	mov    (%esi),%eax
80101b82:	e8 79 fd ff ff       	call   80101900 <balloc>
80101b87:	89 43 5c             	mov    %eax,0x5c(%ebx)
80101b8a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b8d:	5b                   	pop    %ebx
80101b8e:	5e                   	pop    %esi
80101b8f:	5f                   	pop    %edi
80101b90:	5d                   	pop    %ebp
80101b91:	c3                   	ret    
80101b92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101b98:	8b 06                	mov    (%esi),%eax
80101b9a:	e8 61 fd ff ff       	call   80101900 <balloc>
80101b9f:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
80101ba5:	eb 8a                	jmp    80101b31 <bmap+0x41>
80101ba7:	83 ec 0c             	sub    $0xc,%esp
80101baa:	68 8d e8 10 80       	push   $0x8010e88d
80101baf:	e8 1c e8 ff ff       	call   801003d0 <panic>
80101bb4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101bba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80101bc0 <readsb>:
80101bc0:	55                   	push   %ebp
80101bc1:	89 e5                	mov    %esp,%ebp
80101bc3:	56                   	push   %esi
80101bc4:	53                   	push   %ebx
80101bc5:	8b 75 0c             	mov    0xc(%ebp),%esi
80101bc8:	83 ec 08             	sub    $0x8,%esp
80101bcb:	6a 01                	push   $0x1
80101bcd:	ff 75 08             	pushl  0x8(%ebp)
80101bd0:	e8 0b e6 ff ff       	call   801001e0 <bread>
80101bd5:	89 c3                	mov    %eax,%ebx
80101bd7:	8d 40 60             	lea    0x60(%eax),%eax
80101bda:	83 c4 0c             	add    $0xc,%esp
80101bdd:	6a 1c                	push   $0x1c
80101bdf:	50                   	push   %eax
80101be0:	56                   	push   %esi
80101be1:	e8 aa 48 00 00       	call   80106490 <memmove>
80101be6:	89 5d 08             	mov    %ebx,0x8(%ebp)
80101be9:	83 c4 10             	add    $0x10,%esp
80101bec:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101bef:	5b                   	pop    %ebx
80101bf0:	5e                   	pop    %esi
80101bf1:	5d                   	pop    %ebp
80101bf2:	e9 49 e7 ff ff       	jmp    80100340 <brelse>
80101bf7:	89 f6                	mov    %esi,%esi
80101bf9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101c00 <bfree>:
80101c00:	55                   	push   %ebp
80101c01:	89 e5                	mov    %esp,%ebp
80101c03:	57                   	push   %edi
80101c04:	56                   	push   %esi
80101c05:	53                   	push   %ebx
80101c06:	89 c6                	mov    %eax,%esi
80101c08:	89 d3                	mov    %edx,%ebx
80101c0a:	83 ec 18             	sub    $0x18,%esp
80101c0d:	50                   	push   %eax
80101c0e:	e8 ad f4 ff ff       	call   801010c0 <getsuperblock>
80101c13:	5a                   	pop    %edx
80101c14:	59                   	pop    %ecx
80101c15:	50                   	push   %eax
80101c16:	56                   	push   %esi
80101c17:	89 c7                	mov    %eax,%edi
80101c19:	e8 a2 ff ff ff       	call   80101bc0 <readsb>
80101c1e:	58                   	pop    %eax
80101c1f:	8b 47 18             	mov    0x18(%edi),%eax
80101c22:	5a                   	pop    %edx
80101c23:	89 da                	mov    %ebx,%edx
80101c25:	c1 ea 0d             	shr    $0xd,%edx
80101c28:	01 d0                	add    %edx,%eax
80101c2a:	50                   	push   %eax
80101c2b:	56                   	push   %esi
80101c2c:	e8 af e5 ff ff       	call   801001e0 <bread>
80101c31:	89 d9                	mov    %ebx,%ecx
80101c33:	81 e3 ff 1f 00 00    	and    $0x1fff,%ebx
80101c39:	ba 01 00 00 00       	mov    $0x1,%edx
80101c3e:	83 e1 07             	and    $0x7,%ecx
80101c41:	c1 fb 03             	sar    $0x3,%ebx
80101c44:	83 c4 10             	add    $0x10,%esp
80101c47:	d3 e2                	shl    %cl,%edx
80101c49:	0f b6 4c 18 60       	movzbl 0x60(%eax,%ebx,1),%ecx
80101c4e:	85 d1                	test   %edx,%ecx
80101c50:	74 28                	je     80101c7a <bfree+0x7a>
80101c52:	89 c6                	mov    %eax,%esi
80101c54:	f7 d2                	not    %edx
80101c56:	89 c8                	mov    %ecx,%eax
80101c58:	83 ec 0c             	sub    $0xc,%esp
80101c5b:	21 d0                	and    %edx,%eax
80101c5d:	88 44 1e 60          	mov    %al,0x60(%esi,%ebx,1)
80101c61:	56                   	push   %esi
80101c62:	e8 59 1d 00 00       	call   801039c0 <log_write>
80101c67:	89 34 24             	mov    %esi,(%esp)
80101c6a:	e8 d1 e6 ff ff       	call   80100340 <brelse>
80101c6f:	83 c4 10             	add    $0x10,%esp
80101c72:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101c75:	5b                   	pop    %ebx
80101c76:	5e                   	pop    %esi
80101c77:	5f                   	pop    %edi
80101c78:	5d                   	pop    %ebp
80101c79:	c3                   	ret    
80101c7a:	83 ec 0c             	sub    $0xc,%esp
80101c7d:	68 a0 e8 10 80       	push   $0x8010e8a0
80101c82:	e8 49 e7 ff ff       	call   801003d0 <panic>
80101c87:	89 f6                	mov    %esi,%esi
80101c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101c90 <fsinit>:
80101c90:	55                   	push   %ebp
80101c91:	89 e5                	mov    %esp,%ebp
80101c93:	56                   	push   %esi
80101c94:	53                   	push   %ebx
80101c95:	8b 75 08             	mov    0x8(%ebp),%esi
80101c98:	83 ec 0c             	sub    $0xc,%esp
80101c9b:	56                   	push   %esi
80101c9c:	e8 1f f4 ff ff       	call   801010c0 <getsuperblock>
80101ca1:	89 c3                	mov    %eax,%ebx
80101ca3:	58                   	pop    %eax
80101ca4:	5a                   	pop    %edx
80101ca5:	53                   	push   %ebx
80101ca6:	56                   	push   %esi
80101ca7:	e8 14 ff ff ff       	call   80101bc0 <readsb>
80101cac:	ff 73 18             	pushl  0x18(%ebx)
80101caf:	ff 73 14             	pushl  0x14(%ebx)
80101cb2:	ff 73 10             	pushl  0x10(%ebx)
80101cb5:	ff 73 0c             	pushl  0xc(%ebx)
80101cb8:	ff 73 08             	pushl  0x8(%ebx)
80101cbb:	ff 73 04             	pushl  0x4(%ebx)
80101cbe:	ff 33                	pushl  (%ebx)
80101cc0:	68 20 e9 10 80       	push   $0x8010e920
80101cc5:	e8 96 e9 ff ff       	call   80100660 <cprintf>
80101cca:	83 c4 30             	add    $0x30,%esp
80101ccd:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101cd0:	5b                   	pop    %ebx
80101cd1:	5e                   	pop    %esi
80101cd2:	5d                   	pop    %ebp
80101cd3:	c3                   	ret    
80101cd4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101cda:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80101ce0 <iinit>:
80101ce0:	55                   	push   %ebp
80101ce1:	89 e5                	mov    %esp,%ebp
80101ce3:	56                   	push   %esi
80101ce4:	53                   	push   %ebx
80101ce5:	8b 75 08             	mov    0x8(%ebp),%esi
80101ce8:	bb a0 dd 12 80       	mov    $0x8012dda0,%ebx
80101ced:	83 ec 08             	sub    $0x8,%esp
80101cf0:	68 b3 e8 10 80       	push   $0x8010e8b3
80101cf5:	68 60 dd 12 80       	push   $0x8012dd60
80101cfa:	e8 71 44 00 00       	call   80106170 <initlock>
80101cff:	83 c4 10             	add    $0x10,%esp
80101d02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101d08:	83 ec 08             	sub    $0x8,%esp
80101d0b:	68 ba e8 10 80       	push   $0x8010e8ba
80101d10:	53                   	push   %ebx
80101d11:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101d17:	e8 44 43 00 00       	call   80106060 <initsleeplock>
80101d1c:	83 c4 10             	add    $0x10,%esp
80101d1f:	81 fb c0 f9 12 80    	cmp    $0x8012f9c0,%ebx
80101d25:	75 e1                	jne    80101d08 <iinit+0x28>
80101d27:	89 75 08             	mov    %esi,0x8(%ebp)
80101d2a:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101d2d:	5b                   	pop    %ebx
80101d2e:	5e                   	pop    %esi
80101d2f:	5d                   	pop    %ebp
80101d30:	e9 5b ff ff ff       	jmp    80101c90 <fsinit>
80101d35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101d39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101d40 <ialloc>:
80101d40:	55                   	push   %ebp
80101d41:	89 e5                	mov    %esp,%ebp
80101d43:	57                   	push   %edi
80101d44:	56                   	push   %esi
80101d45:	53                   	push   %ebx
80101d46:	83 ec 28             	sub    $0x28,%esp
80101d49:	8b 7d 08             	mov    0x8(%ebp),%edi
80101d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
80101d4f:	57                   	push   %edi
80101d50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80101d53:	e8 68 f3 ff ff       	call   801010c0 <getsuperblock>
80101d58:	83 c4 10             	add    $0x10,%esp
80101d5b:	83 78 08 01          	cmpl   $0x1,0x8(%eax)
80101d5f:	0f 86 91 00 00 00    	jbe    80101df6 <ialloc+0xb6>
80101d65:	89 c6                	mov    %eax,%esi
80101d67:	bb 01 00 00 00       	mov    $0x1,%ebx
80101d6c:	eb 16                	jmp    80101d84 <ialloc+0x44>
80101d6e:	66 90                	xchg   %ax,%ax
80101d70:	83 ec 0c             	sub    $0xc,%esp
80101d73:	83 c3 01             	add    $0x1,%ebx
80101d76:	52                   	push   %edx
80101d77:	e8 c4 e5 ff ff       	call   80100340 <brelse>
80101d7c:	83 c4 10             	add    $0x10,%esp
80101d7f:	39 5e 08             	cmp    %ebx,0x8(%esi)
80101d82:	76 72                	jbe    80101df6 <ialloc+0xb6>
80101d84:	89 d8                	mov    %ebx,%eax
80101d86:	83 ec 08             	sub    $0x8,%esp
80101d89:	c1 e8 04             	shr    $0x4,%eax
80101d8c:	03 46 14             	add    0x14(%esi),%eax
80101d8f:	50                   	push   %eax
80101d90:	57                   	push   %edi
80101d91:	e8 4a e4 ff ff       	call   801001e0 <bread>
80101d96:	89 c2                	mov    %eax,%edx
80101d98:	89 d8                	mov    %ebx,%eax
80101d9a:	83 c4 10             	add    $0x10,%esp
80101d9d:	83 e0 0f             	and    $0xf,%eax
80101da0:	c1 e0 06             	shl    $0x6,%eax
80101da3:	8d 4c 02 60          	lea    0x60(%edx,%eax,1),%ecx
80101da7:	66 83 39 00          	cmpw   $0x0,(%ecx)
80101dab:	75 c3                	jne    80101d70 <ialloc+0x30>
80101dad:	83 ec 04             	sub    $0x4,%esp
80101db0:	89 55 dc             	mov    %edx,-0x24(%ebp)
80101db3:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80101db6:	6a 40                	push   $0x40
80101db8:	6a 00                	push   $0x0
80101dba:	51                   	push   %ecx
80101dbb:	e8 20 46 00 00       	call   801063e0 <memset>
80101dc0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
80101dc4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
80101dc7:	8b 55 dc             	mov    -0x24(%ebp),%edx
80101dca:	66 89 01             	mov    %ax,(%ecx)
80101dcd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101dd0:	89 14 24             	mov    %edx,(%esp)
80101dd3:	e8 e8 1b 00 00       	call   801039c0 <log_write>
80101dd8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101ddb:	89 14 24             	mov    %edx,(%esp)
80101dde:	e8 5d e5 ff ff       	call   80100340 <brelse>
80101de3:	83 c4 10             	add    $0x10,%esp
80101de6:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101de9:	89 da                	mov    %ebx,%edx
80101deb:	89 f8                	mov    %edi,%eax
80101ded:	5b                   	pop    %ebx
80101dee:	5e                   	pop    %esi
80101def:	5f                   	pop    %edi
80101df0:	5d                   	pop    %ebp
80101df1:	e9 1a fc ff ff       	jmp    80101a10 <iget>
80101df6:	83 ec 0c             	sub    $0xc,%esp
80101df9:	68 c0 e8 10 80       	push   $0x8010e8c0
80101dfe:	e8 cd e5 ff ff       	call   801003d0 <panic>
80101e03:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101e09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101e10 <iupdate>:
80101e10:	55                   	push   %ebp
80101e11:	89 e5                	mov    %esp,%ebp
80101e13:	56                   	push   %esi
80101e14:	53                   	push   %ebx
80101e15:	8b 5d 08             	mov    0x8(%ebp),%ebx
80101e18:	83 ec 0c             	sub    $0xc,%esp
80101e1b:	ff 33                	pushl  (%ebx)
80101e1d:	83 c3 5c             	add    $0x5c,%ebx
80101e20:	e8 9b f2 ff ff       	call   801010c0 <getsuperblock>
80101e25:	5a                   	pop    %edx
80101e26:	8b 53 a8             	mov    -0x58(%ebx),%edx
80101e29:	59                   	pop    %ecx
80101e2a:	c1 ea 04             	shr    $0x4,%edx
80101e2d:	03 50 14             	add    0x14(%eax),%edx
80101e30:	52                   	push   %edx
80101e31:	ff 73 a4             	pushl  -0x5c(%ebx)
80101e34:	e8 a7 e3 ff ff       	call   801001e0 <bread>
80101e39:	89 c6                	mov    %eax,%esi
80101e3b:	8b 43 a8             	mov    -0x58(%ebx),%eax
80101e3e:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
80101e42:	83 c4 0c             	add    $0xc,%esp
80101e45:	83 e0 0f             	and    $0xf,%eax
80101e48:	c1 e0 06             	shl    $0x6,%eax
80101e4b:	8d 44 06 60          	lea    0x60(%esi,%eax,1),%eax
80101e4f:	66 89 10             	mov    %dx,(%eax)
80101e52:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
80101e56:	83 c0 0c             	add    $0xc,%eax
80101e59:	66 89 50 f6          	mov    %dx,-0xa(%eax)
80101e5d:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
80101e61:	66 89 50 f8          	mov    %dx,-0x8(%eax)
80101e65:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
80101e69:	66 89 50 fa          	mov    %dx,-0x6(%eax)
80101e6d:	8b 53 fc             	mov    -0x4(%ebx),%edx
80101e70:	89 50 fc             	mov    %edx,-0x4(%eax)
80101e73:	6a 34                	push   $0x34
80101e75:	53                   	push   %ebx
80101e76:	50                   	push   %eax
80101e77:	e8 14 46 00 00       	call   80106490 <memmove>
80101e7c:	89 34 24             	mov    %esi,(%esp)
80101e7f:	e8 3c 1b 00 00       	call   801039c0 <log_write>
80101e84:	89 75 08             	mov    %esi,0x8(%ebp)
80101e87:	83 c4 10             	add    $0x10,%esp
80101e8a:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101e8d:	5b                   	pop    %ebx
80101e8e:	5e                   	pop    %esi
80101e8f:	5d                   	pop    %ebp
80101e90:	e9 ab e4 ff ff       	jmp    80100340 <brelse>
80101e95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80101e99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80101ea0 <idup>:
80101ea0:	55                   	push   %ebp
80101ea1:	89 e5                	mov    %esp,%ebp
80101ea3:	53                   	push   %ebx
80101ea4:	83 ec 10             	sub    $0x10,%esp
80101ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
80101eaa:	68 60 dd 12 80       	push   $0x8012dd60
80101eaf:	e8 bc 43 00 00       	call   80106270 <acquire>
80101eb4:	83 43 08 01          	addl   $0x1,0x8(%ebx)
80101eb8:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80101ebf:	e8 cc 44 00 00       	call   80106390 <release>
80101ec4:	89 d8                	mov    %ebx,%eax
80101ec6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101ec9:	c9                   	leave  
80101eca:	c3                   	ret    
80101ecb:	90                   	nop
80101ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101ed0 <ilock>:
80101ed0:	55                   	push   %ebp
80101ed1:	89 e5                	mov    %esp,%ebp
80101ed3:	56                   	push   %esi
80101ed4:	53                   	push   %ebx
80101ed5:	8b 5d 08             	mov    0x8(%ebp),%ebx
80101ed8:	85 db                	test   %ebx,%ebx
80101eda:	0f 84 bd 00 00 00    	je     80101f9d <ilock+0xcd>
80101ee0:	8b 43 08             	mov    0x8(%ebx),%eax
80101ee3:	85 c0                	test   %eax,%eax
80101ee5:	0f 8e b2 00 00 00    	jle    80101f9d <ilock+0xcd>
80101eeb:	8d 43 0c             	lea    0xc(%ebx),%eax
80101eee:	83 ec 0c             	sub    $0xc,%esp
80101ef1:	50                   	push   %eax
80101ef2:	e8 a9 41 00 00       	call   801060a0 <acquiresleep>
80101ef7:	8b 73 4c             	mov    0x4c(%ebx),%esi
80101efa:	83 c4 10             	add    $0x10,%esp
80101efd:	85 f6                	test   %esi,%esi
80101eff:	74 0f                	je     80101f10 <ilock+0x40>
80101f01:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101f04:	5b                   	pop    %ebx
80101f05:	5e                   	pop    %esi
80101f06:	5d                   	pop    %ebp
80101f07:	c3                   	ret    
80101f08:	90                   	nop
80101f09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80101f10:	83 ec 0c             	sub    $0xc,%esp
80101f13:	ff 33                	pushl  (%ebx)
80101f15:	e8 a6 f1 ff ff       	call   801010c0 <getsuperblock>
80101f1a:	5a                   	pop    %edx
80101f1b:	8b 53 04             	mov    0x4(%ebx),%edx
80101f1e:	59                   	pop    %ecx
80101f1f:	c1 ea 04             	shr    $0x4,%edx
80101f22:	03 50 14             	add    0x14(%eax),%edx
80101f25:	52                   	push   %edx
80101f26:	ff 33                	pushl  (%ebx)
80101f28:	e8 b3 e2 ff ff       	call   801001e0 <bread>
80101f2d:	89 c6                	mov    %eax,%esi
80101f2f:	8b 43 04             	mov    0x4(%ebx),%eax
80101f32:	83 c4 0c             	add    $0xc,%esp
80101f35:	83 e0 0f             	and    $0xf,%eax
80101f38:	c1 e0 06             	shl    $0x6,%eax
80101f3b:	8d 44 06 60          	lea    0x60(%esi,%eax,1),%eax
80101f3f:	0f b7 10             	movzwl (%eax),%edx
80101f42:	83 c0 0c             	add    $0xc,%eax
80101f45:	66 89 53 50          	mov    %dx,0x50(%ebx)
80101f49:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
80101f4d:	66 89 53 52          	mov    %dx,0x52(%ebx)
80101f51:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
80101f55:	66 89 53 54          	mov    %dx,0x54(%ebx)
80101f59:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
80101f5d:	66 89 53 56          	mov    %dx,0x56(%ebx)
80101f61:	8b 50 fc             	mov    -0x4(%eax),%edx
80101f64:	89 53 58             	mov    %edx,0x58(%ebx)
80101f67:	6a 34                	push   $0x34
80101f69:	50                   	push   %eax
80101f6a:	8d 43 5c             	lea    0x5c(%ebx),%eax
80101f6d:	50                   	push   %eax
80101f6e:	e8 1d 45 00 00       	call   80106490 <memmove>
80101f73:	89 34 24             	mov    %esi,(%esp)
80101f76:	e8 c5 e3 ff ff       	call   80100340 <brelse>
80101f7b:	83 c4 10             	add    $0x10,%esp
80101f7e:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
80101f83:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
80101f8a:	0f 85 71 ff ff ff    	jne    80101f01 <ilock+0x31>
80101f90:	83 ec 0c             	sub    $0xc,%esp
80101f93:	68 d8 e8 10 80       	push   $0x8010e8d8
80101f98:	e8 33 e4 ff ff       	call   801003d0 <panic>
80101f9d:	83 ec 0c             	sub    $0xc,%esp
80101fa0:	68 d2 e8 10 80       	push   $0x8010e8d2
80101fa5:	e8 26 e4 ff ff       	call   801003d0 <panic>
80101faa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101fb0 <iunlock>:
80101fb0:	55                   	push   %ebp
80101fb1:	89 e5                	mov    %esp,%ebp
80101fb3:	56                   	push   %esi
80101fb4:	53                   	push   %ebx
80101fb5:	8b 5d 08             	mov    0x8(%ebp),%ebx
80101fb8:	85 db                	test   %ebx,%ebx
80101fba:	74 28                	je     80101fe4 <iunlock+0x34>
80101fbc:	8d 73 0c             	lea    0xc(%ebx),%esi
80101fbf:	83 ec 0c             	sub    $0xc,%esp
80101fc2:	56                   	push   %esi
80101fc3:	e8 78 41 00 00       	call   80106140 <holdingsleep>
80101fc8:	83 c4 10             	add    $0x10,%esp
80101fcb:	85 c0                	test   %eax,%eax
80101fcd:	74 15                	je     80101fe4 <iunlock+0x34>
80101fcf:	8b 43 08             	mov    0x8(%ebx),%eax
80101fd2:	85 c0                	test   %eax,%eax
80101fd4:	7e 0e                	jle    80101fe4 <iunlock+0x34>
80101fd6:	89 75 08             	mov    %esi,0x8(%ebp)
80101fd9:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101fdc:	5b                   	pop    %ebx
80101fdd:	5e                   	pop    %esi
80101fde:	5d                   	pop    %ebp
80101fdf:	e9 1c 41 00 00       	jmp    80106100 <releasesleep>
80101fe4:	83 ec 0c             	sub    $0xc,%esp
80101fe7:	68 e7 e8 10 80       	push   $0x8010e8e7
80101fec:	e8 df e3 ff ff       	call   801003d0 <panic>
80101ff1:	eb 0d                	jmp    80102000 <iput>
80101ff3:	90                   	nop
80101ff4:	90                   	nop
80101ff5:	90                   	nop
80101ff6:	90                   	nop
80101ff7:	90                   	nop
80101ff8:	90                   	nop
80101ff9:	90                   	nop
80101ffa:	90                   	nop
80101ffb:	90                   	nop
80101ffc:	90                   	nop
80101ffd:	90                   	nop
80101ffe:	90                   	nop
80101fff:	90                   	nop

80102000 <iput>:
80102000:	55                   	push   %ebp
80102001:	89 e5                	mov    %esp,%ebp
80102003:	57                   	push   %edi
80102004:	56                   	push   %esi
80102005:	53                   	push   %ebx
80102006:	83 ec 28             	sub    $0x28,%esp
80102009:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010200c:	8d 7b 0c             	lea    0xc(%ebx),%edi
8010200f:	57                   	push   %edi
80102010:	e8 8b 40 00 00       	call   801060a0 <acquiresleep>
80102015:	8b 53 4c             	mov    0x4c(%ebx),%edx
80102018:	83 c4 10             	add    $0x10,%esp
8010201b:	85 d2                	test   %edx,%edx
8010201d:	74 07                	je     80102026 <iput+0x26>
8010201f:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
80102024:	74 4a                	je     80102070 <iput+0x70>
80102026:	83 ec 0c             	sub    $0xc,%esp
80102029:	57                   	push   %edi
8010202a:	e8 d1 40 00 00       	call   80106100 <releasesleep>
8010202f:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80102036:	e8 35 42 00 00       	call   80106270 <acquire>
8010203b:	8b 43 08             	mov    0x8(%ebx),%eax
8010203e:	83 c4 10             	add    $0x10,%esp
80102041:	83 e8 01             	sub    $0x1,%eax
80102044:	85 c0                	test   %eax,%eax
80102046:	89 43 08             	mov    %eax,0x8(%ebx)
80102049:	75 0d                	jne    80102058 <iput+0x58>
8010204b:	83 ec 0c             	sub    $0xc,%esp
8010204e:	ff 33                	pushl  (%ebx)
80102050:	e8 0b ef ff ff       	call   80100f60 <deviceput>
80102055:	83 c4 10             	add    $0x10,%esp
80102058:	c7 45 08 60 dd 12 80 	movl   $0x8012dd60,0x8(%ebp)
8010205f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102062:	5b                   	pop    %ebx
80102063:	5e                   	pop    %esi
80102064:	5f                   	pop    %edi
80102065:	5d                   	pop    %ebp
80102066:	e9 25 43 00 00       	jmp    80106390 <release>
8010206b:	90                   	nop
8010206c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102070:	83 ec 0c             	sub    $0xc,%esp
80102073:	68 60 dd 12 80       	push   $0x8012dd60
80102078:	e8 f3 41 00 00       	call   80106270 <acquire>
8010207d:	8b 73 08             	mov    0x8(%ebx),%esi
80102080:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80102087:	e8 04 43 00 00       	call   80106390 <release>
8010208c:	83 c4 10             	add    $0x10,%esp
8010208f:	83 fe 01             	cmp    $0x1,%esi
80102092:	75 92                	jne    80102026 <iput+0x26>
80102094:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
8010209a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
8010209d:	8d 73 5c             	lea    0x5c(%ebx),%esi
801020a0:	89 cf                	mov    %ecx,%edi
801020a2:	eb 0b                	jmp    801020af <iput+0xaf>
801020a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801020a8:	83 c6 04             	add    $0x4,%esi
801020ab:	39 fe                	cmp    %edi,%esi
801020ad:	74 19                	je     801020c8 <iput+0xc8>
801020af:	8b 16                	mov    (%esi),%edx
801020b1:	85 d2                	test   %edx,%edx
801020b3:	74 f3                	je     801020a8 <iput+0xa8>
801020b5:	8b 03                	mov    (%ebx),%eax
801020b7:	e8 44 fb ff ff       	call   80101c00 <bfree>
801020bc:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
801020c2:	eb e4                	jmp    801020a8 <iput+0xa8>
801020c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801020c8:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
801020ce:	8b 7d e4             	mov    -0x1c(%ebp),%edi
801020d1:	85 c0                	test   %eax,%eax
801020d3:	75 2d                	jne    80102102 <iput+0x102>
801020d5:	83 ec 0c             	sub    $0xc,%esp
801020d8:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
801020df:	53                   	push   %ebx
801020e0:	e8 2b fd ff ff       	call   80101e10 <iupdate>
801020e5:	31 c0                	xor    %eax,%eax
801020e7:	66 89 43 50          	mov    %ax,0x50(%ebx)
801020eb:	89 1c 24             	mov    %ebx,(%esp)
801020ee:	e8 1d fd ff ff       	call   80101e10 <iupdate>
801020f3:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
801020fa:	83 c4 10             	add    $0x10,%esp
801020fd:	e9 24 ff ff ff       	jmp    80102026 <iput+0x26>
80102102:	83 ec 08             	sub    $0x8,%esp
80102105:	50                   	push   %eax
80102106:	ff 33                	pushl  (%ebx)
80102108:	e8 d3 e0 ff ff       	call   801001e0 <bread>
8010210d:	8d 88 60 04 00 00    	lea    0x460(%eax),%ecx
80102113:	89 7d e0             	mov    %edi,-0x20(%ebp)
80102116:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80102119:	8d 70 60             	lea    0x60(%eax),%esi
8010211c:	83 c4 10             	add    $0x10,%esp
8010211f:	89 cf                	mov    %ecx,%edi
80102121:	eb 0c                	jmp    8010212f <iput+0x12f>
80102123:	90                   	nop
80102124:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102128:	83 c6 04             	add    $0x4,%esi
8010212b:	39 fe                	cmp    %edi,%esi
8010212d:	74 0f                	je     8010213e <iput+0x13e>
8010212f:	8b 16                	mov    (%esi),%edx
80102131:	85 d2                	test   %edx,%edx
80102133:	74 f3                	je     80102128 <iput+0x128>
80102135:	8b 03                	mov    (%ebx),%eax
80102137:	e8 c4 fa ff ff       	call   80101c00 <bfree>
8010213c:	eb ea                	jmp    80102128 <iput+0x128>
8010213e:	83 ec 0c             	sub    $0xc,%esp
80102141:	ff 75 e4             	pushl  -0x1c(%ebp)
80102144:	8b 7d e0             	mov    -0x20(%ebp),%edi
80102147:	e8 f4 e1 ff ff       	call   80100340 <brelse>
8010214c:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
80102152:	8b 03                	mov    (%ebx),%eax
80102154:	e8 a7 fa ff ff       	call   80101c00 <bfree>
80102159:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
80102160:	00 00 00 
80102163:	83 c4 10             	add    $0x10,%esp
80102166:	e9 6a ff ff ff       	jmp    801020d5 <iput+0xd5>
8010216b:	90                   	nop
8010216c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80102170 <iunlockput>:
80102170:	55                   	push   %ebp
80102171:	89 e5                	mov    %esp,%ebp
80102173:	53                   	push   %ebx
80102174:	83 ec 10             	sub    $0x10,%esp
80102177:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010217a:	53                   	push   %ebx
8010217b:	e8 30 fe ff ff       	call   80101fb0 <iunlock>
80102180:	89 5d 08             	mov    %ebx,0x8(%ebp)
80102183:	83 c4 10             	add    $0x10,%esp
80102186:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102189:	c9                   	leave  
8010218a:	e9 71 fe ff ff       	jmp    80102000 <iput>
8010218f:	90                   	nop

80102190 <stati>:
80102190:	55                   	push   %ebp
80102191:	89 e5                	mov    %esp,%ebp
80102193:	8b 55 08             	mov    0x8(%ebp),%edx
80102196:	8b 45 0c             	mov    0xc(%ebp),%eax
80102199:	8b 0a                	mov    (%edx),%ecx
8010219b:	89 48 04             	mov    %ecx,0x4(%eax)
8010219e:	8b 4a 04             	mov    0x4(%edx),%ecx
801021a1:	89 48 08             	mov    %ecx,0x8(%eax)
801021a4:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
801021a8:	66 89 08             	mov    %cx,(%eax)
801021ab:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
801021af:	66 89 48 0c          	mov    %cx,0xc(%eax)
801021b3:	8b 52 58             	mov    0x58(%edx),%edx
801021b6:	89 50 10             	mov    %edx,0x10(%eax)
801021b9:	5d                   	pop    %ebp
801021ba:	c3                   	ret    
801021bb:	90                   	nop
801021bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801021c0 <readi>:
801021c0:	55                   	push   %ebp
801021c1:	89 e5                	mov    %esp,%ebp
801021c3:	57                   	push   %edi
801021c4:	56                   	push   %esi
801021c5:	53                   	push   %ebx
801021c6:	83 ec 1c             	sub    $0x1c,%esp
801021c9:	8b 45 08             	mov    0x8(%ebp),%eax
801021cc:	8b 7d 0c             	mov    0xc(%ebp),%edi
801021cf:	8b 75 10             	mov    0x10(%ebp),%esi
801021d2:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
801021d7:	89 7d e0             	mov    %edi,-0x20(%ebp)
801021da:	8b 7d 14             	mov    0x14(%ebp),%edi
801021dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
801021e0:	89 7d e4             	mov    %edi,-0x1c(%ebp)
801021e3:	0f 84 a7 00 00 00    	je     80102290 <readi+0xd0>
801021e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
801021ec:	8b 40 58             	mov    0x58(%eax),%eax
801021ef:	39 f0                	cmp    %esi,%eax
801021f1:	0f 82 c9 00 00 00    	jb     801022c0 <readi+0x100>
801021f7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
801021fa:	89 fa                	mov    %edi,%edx
801021fc:	01 f2                	add    %esi,%edx
801021fe:	0f 82 bc 00 00 00    	jb     801022c0 <readi+0x100>
80102204:	89 c1                	mov    %eax,%ecx
80102206:	29 f1                	sub    %esi,%ecx
80102208:	39 d0                	cmp    %edx,%eax
8010220a:	0f 43 cf             	cmovae %edi,%ecx
8010220d:	31 ff                	xor    %edi,%edi
8010220f:	85 c9                	test   %ecx,%ecx
80102211:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80102214:	74 6d                	je     80102283 <readi+0xc3>
80102216:	8d 76 00             	lea    0x0(%esi),%esi
80102219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80102220:	8b 5d d8             	mov    -0x28(%ebp),%ebx
80102223:	89 f2                	mov    %esi,%edx
80102225:	c1 ea 0a             	shr    $0xa,%edx
80102228:	89 d8                	mov    %ebx,%eax
8010222a:	e8 c1 f8 ff ff       	call   80101af0 <bmap>
8010222f:	83 ec 08             	sub    $0x8,%esp
80102232:	50                   	push   %eax
80102233:	ff 33                	pushl  (%ebx)
80102235:	bb 00 04 00 00       	mov    $0x400,%ebx
8010223a:	e8 a1 df ff ff       	call   801001e0 <bread>
8010223f:	89 c2                	mov    %eax,%edx
80102241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102244:	89 f1                	mov    %esi,%ecx
80102246:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
8010224c:	83 c4 0c             	add    $0xc,%esp
8010224f:	89 55 dc             	mov    %edx,-0x24(%ebp)
80102252:	29 cb                	sub    %ecx,%ebx
80102254:	29 f8                	sub    %edi,%eax
80102256:	39 c3                	cmp    %eax,%ebx
80102258:	0f 47 d8             	cmova  %eax,%ebx
8010225b:	8d 44 0a 60          	lea    0x60(%edx,%ecx,1),%eax
8010225f:	53                   	push   %ebx
80102260:	01 df                	add    %ebx,%edi
80102262:	01 de                	add    %ebx,%esi
80102264:	50                   	push   %eax
80102265:	ff 75 e0             	pushl  -0x20(%ebp)
80102268:	e8 23 42 00 00       	call   80106490 <memmove>
8010226d:	8b 55 dc             	mov    -0x24(%ebp),%edx
80102270:	89 14 24             	mov    %edx,(%esp)
80102273:	e8 c8 e0 ff ff       	call   80100340 <brelse>
80102278:	01 5d e0             	add    %ebx,-0x20(%ebp)
8010227b:	83 c4 10             	add    $0x10,%esp
8010227e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
80102281:	77 9d                	ja     80102220 <readi+0x60>
80102283:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102286:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102289:	5b                   	pop    %ebx
8010228a:	5e                   	pop    %esi
8010228b:	5f                   	pop    %edi
8010228c:	5d                   	pop    %ebp
8010228d:	c3                   	ret    
8010228e:	66 90                	xchg   %ax,%ax
80102290:	89 c6                	mov    %eax,%esi
80102292:	0f bf 40 52          	movswl 0x52(%eax),%eax
80102296:	66 83 f8 09          	cmp    $0x9,%ax
8010229a:	77 24                	ja     801022c0 <readi+0x100>
8010229c:	66 83 7e 54 03       	cmpw   $0x3,0x54(%esi)
801022a1:	77 1d                	ja     801022c0 <readi+0x100>
801022a3:	8b 04 c5 00 dd 12 80 	mov    -0x7fed2300(,%eax,8),%eax
801022aa:	85 c0                	test   %eax,%eax
801022ac:	74 12                	je     801022c0 <readi+0x100>
801022ae:	89 7d 10             	mov    %edi,0x10(%ebp)
801022b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801022b4:	5b                   	pop    %ebx
801022b5:	5e                   	pop    %esi
801022b6:	5f                   	pop    %edi
801022b7:	5d                   	pop    %ebp
801022b8:	ff e0                	jmp    *%eax
801022ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801022c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801022c5:	eb bf                	jmp    80102286 <readi+0xc6>
801022c7:	89 f6                	mov    %esi,%esi
801022c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801022d0 <writei>:
801022d0:	55                   	push   %ebp
801022d1:	89 e5                	mov    %esp,%ebp
801022d3:	57                   	push   %edi
801022d4:	56                   	push   %esi
801022d5:	53                   	push   %ebx
801022d6:	83 ec 1c             	sub    $0x1c,%esp
801022d9:	8b 45 08             	mov    0x8(%ebp),%eax
801022dc:	8b 75 0c             	mov    0xc(%ebp),%esi
801022df:	8b 7d 14             	mov    0x14(%ebp),%edi
801022e2:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
801022e7:	89 75 dc             	mov    %esi,-0x24(%ebp)
801022ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
801022ed:	8b 75 10             	mov    0x10(%ebp),%esi
801022f0:	89 7d e0             	mov    %edi,-0x20(%ebp)
801022f3:	0f 84 b7 00 00 00    	je     801023b0 <writei+0xe0>
801022f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
801022fc:	39 70 58             	cmp    %esi,0x58(%eax)
801022ff:	0f 82 f3 00 00 00    	jb     801023f8 <writei+0x128>
80102305:	8b 7d e0             	mov    -0x20(%ebp),%edi
80102308:	89 f8                	mov    %edi,%eax
8010230a:	01 f0                	add    %esi,%eax
8010230c:	3d 00 30 04 00       	cmp    $0x43000,%eax
80102311:	0f 87 e1 00 00 00    	ja     801023f8 <writei+0x128>
80102317:	39 c6                	cmp    %eax,%esi
80102319:	0f 87 d9 00 00 00    	ja     801023f8 <writei+0x128>
8010231f:	85 ff                	test   %edi,%edi
80102321:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80102328:	74 78                	je     801023a2 <writei+0xd2>
8010232a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102330:	8b 7d d8             	mov    -0x28(%ebp),%edi
80102333:	89 f2                	mov    %esi,%edx
80102335:	bb 00 04 00 00       	mov    $0x400,%ebx
8010233a:	c1 ea 0a             	shr    $0xa,%edx
8010233d:	89 f8                	mov    %edi,%eax
8010233f:	e8 ac f7 ff ff       	call   80101af0 <bmap>
80102344:	83 ec 08             	sub    $0x8,%esp
80102347:	50                   	push   %eax
80102348:	ff 37                	pushl  (%edi)
8010234a:	e8 91 de ff ff       	call   801001e0 <bread>
8010234f:	89 c7                	mov    %eax,%edi
80102351:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102354:	2b 45 e4             	sub    -0x1c(%ebp),%eax
80102357:	89 f1                	mov    %esi,%ecx
80102359:	83 c4 0c             	add    $0xc,%esp
8010235c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
80102362:	29 cb                	sub    %ecx,%ebx
80102364:	39 c3                	cmp    %eax,%ebx
80102366:	0f 47 d8             	cmova  %eax,%ebx
80102369:	8d 44 0f 60          	lea    0x60(%edi,%ecx,1),%eax
8010236d:	53                   	push   %ebx
8010236e:	ff 75 dc             	pushl  -0x24(%ebp)
80102371:	01 de                	add    %ebx,%esi
80102373:	50                   	push   %eax
80102374:	e8 17 41 00 00       	call   80106490 <memmove>
80102379:	89 3c 24             	mov    %edi,(%esp)
8010237c:	e8 3f 16 00 00       	call   801039c0 <log_write>
80102381:	89 3c 24             	mov    %edi,(%esp)
80102384:	e8 b7 df ff ff       	call   80100340 <brelse>
80102389:	01 5d e4             	add    %ebx,-0x1c(%ebp)
8010238c:	01 5d dc             	add    %ebx,-0x24(%ebp)
8010238f:	83 c4 10             	add    $0x10,%esp
80102392:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80102395:	39 55 e0             	cmp    %edx,-0x20(%ebp)
80102398:	77 96                	ja     80102330 <writei+0x60>
8010239a:	8b 45 d8             	mov    -0x28(%ebp),%eax
8010239d:	3b 70 58             	cmp    0x58(%eax),%esi
801023a0:	77 3e                	ja     801023e0 <writei+0x110>
801023a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
801023a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801023a8:	5b                   	pop    %ebx
801023a9:	5e                   	pop    %esi
801023aa:	5f                   	pop    %edi
801023ab:	5d                   	pop    %ebp
801023ac:	c3                   	ret    
801023ad:	8d 76 00             	lea    0x0(%esi),%esi
801023b0:	89 c6                	mov    %eax,%esi
801023b2:	0f bf 40 52          	movswl 0x52(%eax),%eax
801023b6:	66 83 f8 09          	cmp    $0x9,%ax
801023ba:	77 3c                	ja     801023f8 <writei+0x128>
801023bc:	66 83 7e 54 03       	cmpw   $0x3,0x54(%esi)
801023c1:	77 35                	ja     801023f8 <writei+0x128>
801023c3:	8b 04 c5 04 dd 12 80 	mov    -0x7fed22fc(,%eax,8),%eax
801023ca:	85 c0                	test   %eax,%eax
801023cc:	74 2a                	je     801023f8 <writei+0x128>
801023ce:	89 7d 10             	mov    %edi,0x10(%ebp)
801023d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801023d4:	5b                   	pop    %ebx
801023d5:	5e                   	pop    %esi
801023d6:	5f                   	pop    %edi
801023d7:	5d                   	pop    %ebp
801023d8:	ff e0                	jmp    *%eax
801023da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801023e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
801023e3:	83 ec 0c             	sub    $0xc,%esp
801023e6:	89 70 58             	mov    %esi,0x58(%eax)
801023e9:	50                   	push   %eax
801023ea:	e8 21 fa ff ff       	call   80101e10 <iupdate>
801023ef:	83 c4 10             	add    $0x10,%esp
801023f2:	eb ae                	jmp    801023a2 <writei+0xd2>
801023f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801023f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801023fd:	eb a6                	jmp    801023a5 <writei+0xd5>
801023ff:	90                   	nop

80102400 <namecmp>:
80102400:	55                   	push   %ebp
80102401:	89 e5                	mov    %esp,%ebp
80102403:	83 ec 0c             	sub    $0xc,%esp
80102406:	6a 0e                	push   $0xe
80102408:	ff 75 0c             	pushl  0xc(%ebp)
8010240b:	ff 75 08             	pushl  0x8(%ebp)
8010240e:	e8 fd 40 00 00       	call   80106510 <strncmp>
80102413:	c9                   	leave  
80102414:	c3                   	ret    
80102415:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102420 <dirlookup>:
80102420:	55                   	push   %ebp
80102421:	89 e5                	mov    %esp,%ebp
80102423:	57                   	push   %edi
80102424:	56                   	push   %esi
80102425:	53                   	push   %ebx
80102426:	83 ec 1c             	sub    $0x1c,%esp
80102429:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010242c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80102431:	0f 85 80 00 00 00    	jne    801024b7 <dirlookup+0x97>
80102437:	8b 53 58             	mov    0x58(%ebx),%edx
8010243a:	31 ff                	xor    %edi,%edi
8010243c:	8d 75 d8             	lea    -0x28(%ebp),%esi
8010243f:	85 d2                	test   %edx,%edx
80102441:	75 0d                	jne    80102450 <dirlookup+0x30>
80102443:	eb 5b                	jmp    801024a0 <dirlookup+0x80>
80102445:	8d 76 00             	lea    0x0(%esi),%esi
80102448:	83 c7 10             	add    $0x10,%edi
8010244b:	39 7b 58             	cmp    %edi,0x58(%ebx)
8010244e:	76 50                	jbe    801024a0 <dirlookup+0x80>
80102450:	6a 10                	push   $0x10
80102452:	57                   	push   %edi
80102453:	56                   	push   %esi
80102454:	53                   	push   %ebx
80102455:	e8 66 fd ff ff       	call   801021c0 <readi>
8010245a:	83 c4 10             	add    $0x10,%esp
8010245d:	83 f8 10             	cmp    $0x10,%eax
80102460:	75 48                	jne    801024aa <dirlookup+0x8a>
80102462:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80102467:	74 df                	je     80102448 <dirlookup+0x28>
80102469:	8d 45 da             	lea    -0x26(%ebp),%eax
8010246c:	83 ec 04             	sub    $0x4,%esp
8010246f:	6a 0e                	push   $0xe
80102471:	50                   	push   %eax
80102472:	ff 75 0c             	pushl  0xc(%ebp)
80102475:	e8 96 40 00 00       	call   80106510 <strncmp>
8010247a:	83 c4 10             	add    $0x10,%esp
8010247d:	85 c0                	test   %eax,%eax
8010247f:	75 c7                	jne    80102448 <dirlookup+0x28>
80102481:	8b 45 10             	mov    0x10(%ebp),%eax
80102484:	85 c0                	test   %eax,%eax
80102486:	74 05                	je     8010248d <dirlookup+0x6d>
80102488:	8b 45 10             	mov    0x10(%ebp),%eax
8010248b:	89 38                	mov    %edi,(%eax)
8010248d:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
80102491:	8b 03                	mov    (%ebx),%eax
80102493:	e8 78 f5 ff ff       	call   80101a10 <iget>
80102498:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010249b:	5b                   	pop    %ebx
8010249c:	5e                   	pop    %esi
8010249d:	5f                   	pop    %edi
8010249e:	5d                   	pop    %ebp
8010249f:	c3                   	ret    
801024a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801024a3:	31 c0                	xor    %eax,%eax
801024a5:	5b                   	pop    %ebx
801024a6:	5e                   	pop    %esi
801024a7:	5f                   	pop    %edi
801024a8:	5d                   	pop    %ebp
801024a9:	c3                   	ret    
801024aa:	83 ec 0c             	sub    $0xc,%esp
801024ad:	68 01 e9 10 80       	push   $0x8010e901
801024b2:	e8 19 df ff ff       	call   801003d0 <panic>
801024b7:	83 ec 0c             	sub    $0xc,%esp
801024ba:	68 ef e8 10 80       	push   $0x8010e8ef
801024bf:	e8 0c df ff ff       	call   801003d0 <panic>
801024c4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801024ca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

801024d0 <namex>:
801024d0:	55                   	push   %ebp
801024d1:	89 e5                	mov    %esp,%ebp
801024d3:	57                   	push   %edi
801024d4:	56                   	push   %esi
801024d5:	53                   	push   %ebx
801024d6:	89 c3                	mov    %eax,%ebx
801024d8:	83 ec 2c             	sub    $0x2c,%esp
801024db:	80 38 2f             	cmpb   $0x2f,(%eax)
801024de:	89 55 d4             	mov    %edx,-0x2c(%ebp)
801024e1:	89 4d e0             	mov    %ecx,-0x20(%ebp)
801024e4:	0f 84 2b 02 00 00    	je     80102715 <namex+0x245>
801024ea:	e8 74 2d 00 00       	call   80105263 <myproc>
801024ef:	83 ec 0c             	sub    $0xc,%esp
801024f2:	ff b0 8c 00 00 00    	pushl  0x8c(%eax)
801024f8:	e8 3c 19 00 00       	call   80103e39 <mntdup>
801024fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80102500:	e8 5e 2d 00 00       	call   80105263 <myproc>
80102505:	8b b8 88 00 00 00    	mov    0x88(%eax),%edi
8010250b:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80102512:	e8 59 3d 00 00       	call   80106270 <acquire>
80102517:	83 47 08 01          	addl   $0x1,0x8(%edi)
8010251b:	c7 04 24 60 dd 12 80 	movl   $0x8012dd60,(%esp)
80102522:	e8 69 3e 00 00       	call   80106390 <release>
80102527:	83 c4 10             	add    $0x10,%esp
8010252a:	eb 07                	jmp    80102533 <namex+0x63>
8010252c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102530:	83 c3 01             	add    $0x1,%ebx
80102533:	0f b6 03             	movzbl (%ebx),%eax
80102536:	3c 2f                	cmp    $0x2f,%al
80102538:	74 f6                	je     80102530 <namex+0x60>
8010253a:	84 c0                	test   %al,%al
8010253c:	0f 84 60 01 00 00    	je     801026a2 <namex+0x1d2>
80102542:	0f b6 03             	movzbl (%ebx),%eax
80102545:	89 de                	mov    %ebx,%esi
80102547:	84 c0                	test   %al,%al
80102549:	0f 84 2a 01 00 00    	je     80102679 <namex+0x1a9>
8010254f:	3c 2f                	cmp    $0x2f,%al
80102551:	75 11                	jne    80102564 <namex+0x94>
80102553:	e9 21 01 00 00       	jmp    80102679 <namex+0x1a9>
80102558:	90                   	nop
80102559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102560:	84 c0                	test   %al,%al
80102562:	74 0a                	je     8010256e <namex+0x9e>
80102564:	83 c6 01             	add    $0x1,%esi
80102567:	0f b6 06             	movzbl (%esi),%eax
8010256a:	3c 2f                	cmp    $0x2f,%al
8010256c:	75 f2                	jne    80102560 <namex+0x90>
8010256e:	89 f2                	mov    %esi,%edx
80102570:	29 da                	sub    %ebx,%edx
80102572:	83 fa 0d             	cmp    $0xd,%edx
80102575:	0f 8e 05 01 00 00    	jle    80102680 <namex+0x1b0>
8010257b:	83 ec 04             	sub    $0x4,%esp
8010257e:	6a 0e                	push   $0xe
80102580:	53                   	push   %ebx
80102581:	89 f3                	mov    %esi,%ebx
80102583:	ff 75 e0             	pushl  -0x20(%ebp)
80102586:	e8 05 3f 00 00       	call   80106490 <memmove>
8010258b:	83 c4 10             	add    $0x10,%esp
8010258e:	80 3e 2f             	cmpb   $0x2f,(%esi)
80102591:	75 0d                	jne    801025a0 <namex+0xd0>
80102593:	90                   	nop
80102594:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102598:	83 c3 01             	add    $0x1,%ebx
8010259b:	80 3b 2f             	cmpb   $0x2f,(%ebx)
8010259e:	74 f8                	je     80102598 <namex+0xc8>
801025a0:	83 ec 0c             	sub    $0xc,%esp
801025a3:	57                   	push   %edi
801025a4:	e8 27 f9 ff ff       	call   80101ed0 <ilock>
801025a9:	83 c4 10             	add    $0x10,%esp
801025ac:	66 83 7f 50 01       	cmpw   $0x1,0x50(%edi)
801025b1:	0f 85 37 01 00 00    	jne    801026ee <namex+0x21e>
801025b7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
801025ba:	85 c9                	test   %ecx,%ecx
801025bc:	74 09                	je     801025c7 <namex+0xf7>
801025be:	80 3b 00             	cmpb   $0x0,(%ebx)
801025c1:	0f 84 78 01 00 00    	je     8010273f <namex+0x26f>
801025c7:	83 ec 04             	sub    $0x4,%esp
801025ca:	6a 00                	push   $0x0
801025cc:	ff 75 e0             	pushl  -0x20(%ebp)
801025cf:	57                   	push   %edi
801025d0:	e8 4b fe ff ff       	call   80102420 <dirlookup>
801025d5:	83 c4 10             	add    $0x10,%esp
801025d8:	85 c0                	test   %eax,%eax
801025da:	89 c6                	mov    %eax,%esi
801025dc:	0f 84 0c 01 00 00    	je     801026ee <namex+0x21e>
801025e2:	83 ec 0c             	sub    $0xc,%esp
801025e5:	8b 47 04             	mov    0x4(%edi),%eax
801025e8:	57                   	push   %edi
801025e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
801025ec:	e8 bf f9 ff ff       	call   80101fb0 <iunlock>
801025f1:	89 3c 24             	mov    %edi,(%esp)
801025f4:	e8 07 fa ff ff       	call   80102000 <iput>
801025f9:	83 c4 0c             	add    $0xc,%esp
801025fc:	6a 0e                	push   $0xe
801025fe:	68 10 e9 10 80       	push   $0x8010e910
80102603:	ff 75 e0             	pushl  -0x20(%ebp)
80102606:	e8 05 3f 00 00       	call   80106510 <strncmp>
8010260b:	83 c4 10             	add    $0x10,%esp
8010260e:	85 c0                	test   %eax,%eax
80102610:	75 13                	jne    80102625 <namex+0x155>
80102612:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102615:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
80102619:	74 0a                	je     80102625 <namex+0x155>
8010261b:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
8010261f:	0f 84 9a 00 00 00    	je     801026bf <namex+0x1ef>
80102625:	83 ec 08             	sub    $0x8,%esp
80102628:	ff 75 e4             	pushl  -0x1c(%ebp)
8010262b:	56                   	push   %esi
8010262c:	e8 5f 1b 00 00       	call   80104190 <mntlookup>
80102631:	83 c4 10             	add    $0x10,%esp
80102634:	89 c1                	mov    %eax,%ecx
80102636:	ba 01 00 00 00       	mov    $0x1,%edx
8010263b:	85 c9                	test   %ecx,%ecx
8010263d:	89 55 d8             	mov    %edx,-0x28(%ebp)
80102640:	89 f7                	mov    %esi,%edi
80102642:	89 4d dc             	mov    %ecx,-0x24(%ebp)
80102645:	0f 84 e8 fe ff ff    	je     80102533 <namex+0x63>
8010264b:	83 ec 0c             	sub    $0xc,%esp
8010264e:	ff 75 e4             	pushl  -0x1c(%ebp)
80102651:	e8 85 18 00 00       	call   80103edb <mntput>
80102656:	89 34 24             	mov    %esi,(%esp)
80102659:	e8 a2 f9 ff ff       	call   80102000 <iput>
8010265e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
80102661:	8b 55 d8             	mov    -0x28(%ebp),%edx
80102664:	8b 41 0c             	mov    0xc(%ecx),%eax
80102667:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
8010266a:	e8 a1 f3 ff ff       	call   80101a10 <iget>
8010266f:	83 c4 10             	add    $0x10,%esp
80102672:	89 c7                	mov    %eax,%edi
80102674:	e9 ba fe ff ff       	jmp    80102533 <namex+0x63>
80102679:	31 d2                	xor    %edx,%edx
8010267b:	90                   	nop
8010267c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102680:	83 ec 04             	sub    $0x4,%esp
80102683:	89 55 dc             	mov    %edx,-0x24(%ebp)
80102686:	52                   	push   %edx
80102687:	53                   	push   %ebx
80102688:	8b 5d e0             	mov    -0x20(%ebp),%ebx
8010268b:	53                   	push   %ebx
8010268c:	e8 ff 3d 00 00       	call   80106490 <memmove>
80102691:	8b 55 dc             	mov    -0x24(%ebp),%edx
80102694:	83 c4 10             	add    $0x10,%esp
80102697:	c6 04 13 00          	movb   $0x0,(%ebx,%edx,1)
8010269b:	89 f3                	mov    %esi,%ebx
8010269d:	e9 ec fe ff ff       	jmp    8010258e <namex+0xbe>
801026a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
801026a5:	85 c0                	test   %eax,%eax
801026a7:	0f 85 b0 00 00 00    	jne    8010275d <namex+0x28d>
801026ad:	8b 45 08             	mov    0x8(%ebp),%eax
801026b0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801026b3:	89 08                	mov    %ecx,(%eax)
801026b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801026b8:	89 f8                	mov    %edi,%eax
801026ba:	5b                   	pop    %ebx
801026bb:	5e                   	pop    %esi
801026bc:	5f                   	pop    %edi
801026bd:	5d                   	pop    %ebp
801026be:	c3                   	ret    
801026bf:	83 ec 0c             	sub    $0xc,%esp
801026c2:	ff 30                	pushl  (%eax)
801026c4:	89 c7                	mov    %eax,%edi
801026c6:	e8 6e 17 00 00       	call   80103e39 <mntdup>
801026cb:	83 c4 0c             	add    $0xc,%esp
801026ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
801026d1:	6a 00                	push   $0x0
801026d3:	68 10 e9 10 80       	push   $0x8010e910
801026d8:	ff 77 04             	pushl  0x4(%edi)
801026db:	e8 40 fd ff ff       	call   80102420 <dirlookup>
801026e0:	83 c4 10             	add    $0x10,%esp
801026e3:	8b 50 04             	mov    0x4(%eax),%edx
801026e6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
801026e9:	e9 4d ff ff ff       	jmp    8010263b <namex+0x16b>
801026ee:	83 ec 0c             	sub    $0xc,%esp
801026f1:	57                   	push   %edi
801026f2:	e8 b9 f8 ff ff       	call   80101fb0 <iunlock>
801026f7:	89 3c 24             	mov    %edi,(%esp)
801026fa:	e8 01 f9 ff ff       	call   80102000 <iput>
801026ff:	5a                   	pop    %edx
80102700:	ff 75 e4             	pushl  -0x1c(%ebp)
80102703:	e8 d3 17 00 00       	call   80103edb <mntput>
80102708:	83 c4 10             	add    $0x10,%esp
8010270b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010270e:	31 c0                	xor    %eax,%eax
80102710:	5b                   	pop    %ebx
80102711:	5e                   	pop    %esi
80102712:	5f                   	pop    %edi
80102713:	5d                   	pop    %ebp
80102714:	c3                   	ret    
80102715:	e8 ad 16 00 00       	call   80103dc7 <getrootmount>
8010271a:	83 ec 0c             	sub    $0xc,%esp
8010271d:	50                   	push   %eax
8010271e:	e8 16 17 00 00       	call   80103e39 <mntdup>
80102723:	ba 01 00 00 00       	mov    $0x1,%edx
80102728:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010272b:	b8 01 00 00 00       	mov    $0x1,%eax
80102730:	e8 db f2 ff ff       	call   80101a10 <iget>
80102735:	83 c4 10             	add    $0x10,%esp
80102738:	89 c7                	mov    %eax,%edi
8010273a:	e9 f4 fd ff ff       	jmp    80102533 <namex+0x63>
8010273f:	83 ec 0c             	sub    $0xc,%esp
80102742:	57                   	push   %edi
80102743:	e8 68 f8 ff ff       	call   80101fb0 <iunlock>
80102748:	8b 45 08             	mov    0x8(%ebp),%eax
8010274b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010274e:	83 c4 10             	add    $0x10,%esp
80102751:	89 08                	mov    %ecx,(%eax)
80102753:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102756:	89 f8                	mov    %edi,%eax
80102758:	5b                   	pop    %ebx
80102759:	5e                   	pop    %esi
8010275a:	5f                   	pop    %edi
8010275b:	5d                   	pop    %ebp
8010275c:	c3                   	ret    
8010275d:	83 ec 0c             	sub    $0xc,%esp
80102760:	57                   	push   %edi
80102761:	eb 97                	jmp    801026fa <namex+0x22a>
80102763:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102769:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102770 <dirlink>:
80102770:	55                   	push   %ebp
80102771:	89 e5                	mov    %esp,%ebp
80102773:	57                   	push   %edi
80102774:	56                   	push   %esi
80102775:	53                   	push   %ebx
80102776:	83 ec 20             	sub    $0x20,%esp
80102779:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010277c:	6a 00                	push   $0x0
8010277e:	ff 75 0c             	pushl  0xc(%ebp)
80102781:	53                   	push   %ebx
80102782:	e8 99 fc ff ff       	call   80102420 <dirlookup>
80102787:	83 c4 10             	add    $0x10,%esp
8010278a:	85 c0                	test   %eax,%eax
8010278c:	75 67                	jne    801027f5 <dirlink+0x85>
8010278e:	8b 7b 58             	mov    0x58(%ebx),%edi
80102791:	8d 75 d8             	lea    -0x28(%ebp),%esi
80102794:	85 ff                	test   %edi,%edi
80102796:	74 29                	je     801027c1 <dirlink+0x51>
80102798:	31 ff                	xor    %edi,%edi
8010279a:	8d 75 d8             	lea    -0x28(%ebp),%esi
8010279d:	eb 09                	jmp    801027a8 <dirlink+0x38>
8010279f:	90                   	nop
801027a0:	83 c7 10             	add    $0x10,%edi
801027a3:	39 7b 58             	cmp    %edi,0x58(%ebx)
801027a6:	76 19                	jbe    801027c1 <dirlink+0x51>
801027a8:	6a 10                	push   $0x10
801027aa:	57                   	push   %edi
801027ab:	56                   	push   %esi
801027ac:	53                   	push   %ebx
801027ad:	e8 0e fa ff ff       	call   801021c0 <readi>
801027b2:	83 c4 10             	add    $0x10,%esp
801027b5:	83 f8 10             	cmp    $0x10,%eax
801027b8:	75 4e                	jne    80102808 <dirlink+0x98>
801027ba:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
801027bf:	75 df                	jne    801027a0 <dirlink+0x30>
801027c1:	8d 45 da             	lea    -0x26(%ebp),%eax
801027c4:	83 ec 04             	sub    $0x4,%esp
801027c7:	6a 0e                	push   $0xe
801027c9:	ff 75 0c             	pushl  0xc(%ebp)
801027cc:	50                   	push   %eax
801027cd:	e8 fe 3d 00 00       	call   801065d0 <strncpy>
801027d2:	8b 45 10             	mov    0x10(%ebp),%eax
801027d5:	6a 10                	push   $0x10
801027d7:	57                   	push   %edi
801027d8:	56                   	push   %esi
801027d9:	53                   	push   %ebx
801027da:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
801027de:	e8 ed fa ff ff       	call   801022d0 <writei>
801027e3:	83 c4 20             	add    $0x20,%esp
801027e6:	83 f8 10             	cmp    $0x10,%eax
801027e9:	75 2a                	jne    80102815 <dirlink+0xa5>
801027eb:	31 c0                	xor    %eax,%eax
801027ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
801027f0:	5b                   	pop    %ebx
801027f1:	5e                   	pop    %esi
801027f2:	5f                   	pop    %edi
801027f3:	5d                   	pop    %ebp
801027f4:	c3                   	ret    
801027f5:	83 ec 0c             	sub    $0xc,%esp
801027f8:	50                   	push   %eax
801027f9:	e8 02 f8 ff ff       	call   80102000 <iput>
801027fe:	83 c4 10             	add    $0x10,%esp
80102801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102806:	eb e5                	jmp    801027ed <dirlink+0x7d>
80102808:	83 ec 0c             	sub    $0xc,%esp
8010280b:	68 13 e9 10 80       	push   $0x8010e913
80102810:	e8 bb db ff ff       	call   801003d0 <panic>
80102815:	83 ec 0c             	sub    $0xc,%esp
80102818:	68 47 f1 10 80       	push   $0x8010f147
8010281d:	e8 ae db ff ff       	call   801003d0 <panic>
80102822:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102830 <initprocessroot>:
80102830:	55                   	push   %ebp
80102831:	89 e5                	mov    %esp,%ebp
80102833:	53                   	push   %ebx
80102834:	83 ec 04             	sub    $0x4,%esp
80102837:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010283a:	e8 7e 15 00 00       	call   80103dbd <getinitialrootmount>
8010283f:	ba 01 00 00 00       	mov    $0x1,%edx
80102844:	89 03                	mov    %eax,(%ebx)
80102846:	83 c4 04             	add    $0x4,%esp
80102849:	b8 01 00 00 00       	mov    $0x1,%eax
8010284e:	5b                   	pop    %ebx
8010284f:	5d                   	pop    %ebp
80102850:	e9 bb f1 ff ff       	jmp    80101a10 <iget>
80102855:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102859:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102860 <namei>:
80102860:	55                   	push   %ebp
80102861:	31 d2                	xor    %edx,%edx
80102863:	89 e5                	mov    %esp,%ebp
80102865:	53                   	push   %ebx
80102866:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80102869:	8d 4d ea             	lea    -0x16(%ebp),%ecx
8010286c:	83 ec 30             	sub    $0x30,%esp
8010286f:	50                   	push   %eax
80102870:	8b 45 08             	mov    0x8(%ebp),%eax
80102873:	e8 58 fc ff ff       	call   801024d0 <namex>
80102878:	83 c4 10             	add    $0x10,%esp
8010287b:	85 c0                	test   %eax,%eax
8010287d:	89 c3                	mov    %eax,%ebx
8010287f:	74 0e                	je     8010288f <namei+0x2f>
80102881:	83 ec 0c             	sub    $0xc,%esp
80102884:	ff 75 e4             	pushl  -0x1c(%ebp)
80102887:	e8 4f 16 00 00       	call   80103edb <mntput>
8010288c:	83 c4 10             	add    $0x10,%esp
8010288f:	89 d8                	mov    %ebx,%eax
80102891:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102894:	c9                   	leave  
80102895:	c3                   	ret    
80102896:	8d 76 00             	lea    0x0(%esi),%esi
80102899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801028a0 <nameiparent>:
801028a0:	55                   	push   %ebp
801028a1:	ba 01 00 00 00       	mov    $0x1,%edx
801028a6:	89 e5                	mov    %esp,%ebp
801028a8:	53                   	push   %ebx
801028a9:	8d 45 f4             	lea    -0xc(%ebp),%eax
801028ac:	83 ec 20             	sub    $0x20,%esp
801028af:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801028b2:	50                   	push   %eax
801028b3:	8b 45 08             	mov    0x8(%ebp),%eax
801028b6:	e8 15 fc ff ff       	call   801024d0 <namex>
801028bb:	83 c4 10             	add    $0x10,%esp
801028be:	85 c0                	test   %eax,%eax
801028c0:	89 c3                	mov    %eax,%ebx
801028c2:	74 0e                	je     801028d2 <nameiparent+0x32>
801028c4:	83 ec 0c             	sub    $0xc,%esp
801028c7:	ff 75 f4             	pushl  -0xc(%ebp)
801028ca:	e8 0c 16 00 00       	call   80103edb <mntput>
801028cf:	83 c4 10             	add    $0x10,%esp
801028d2:	89 d8                	mov    %ebx,%eax
801028d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801028d7:	c9                   	leave  
801028d8:	c3                   	ret    
801028d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801028e0 <nameiparentmount>:
801028e0:	55                   	push   %ebp
801028e1:	89 e5                	mov    %esp,%ebp
801028e3:	8b 55 10             	mov    0x10(%ebp),%edx
801028e6:	8b 45 08             	mov    0x8(%ebp),%eax
801028e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801028ec:	89 55 08             	mov    %edx,0x8(%ebp)
801028ef:	ba 01 00 00 00       	mov    $0x1,%edx
801028f4:	5d                   	pop    %ebp
801028f5:	e9 d6 fb ff ff       	jmp    801024d0 <namex>
801028fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80102900 <nameimount>:
80102900:	55                   	push   %ebp
80102901:	31 d2                	xor    %edx,%edx
80102903:	89 e5                	mov    %esp,%ebp
80102905:	83 ec 24             	sub    $0x24,%esp
80102908:	8b 45 08             	mov    0x8(%ebp),%eax
8010290b:	ff 75 0c             	pushl  0xc(%ebp)
8010290e:	8d 4d ea             	lea    -0x16(%ebp),%ecx
80102911:	e8 ba fb ff ff       	call   801024d0 <namex>
80102916:	c9                   	leave  
80102917:	c3                   	ret    
80102918:	66 90                	xchg   %ax,%ax
8010291a:	66 90                	xchg   %ax,%ax
8010291c:	66 90                	xchg   %ax,%ax
8010291e:	66 90                	xchg   %ax,%ax

80102920 <idestart>:
80102920:	55                   	push   %ebp
80102921:	85 c0                	test   %eax,%eax
80102923:	89 e5                	mov    %esp,%ebp
80102925:	56                   	push   %esi
80102926:	53                   	push   %ebx
80102927:	0f 84 ad 00 00 00    	je     801029da <idestart+0xba>
8010292d:	8b 48 08             	mov    0x8(%eax),%ecx
80102930:	89 c3                	mov    %eax,%ebx
80102932:	81 f9 cf 07 00 00    	cmp    $0x7cf,%ecx
80102938:	0f 87 8f 00 00 00    	ja     801029cd <idestart+0xad>
8010293e:	01 c9                	add    %ecx,%ecx
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102940:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102945:	8d 76 00             	lea    0x0(%esi),%esi
80102948:	ec                   	in     (%dx),%al
80102949:	83 e0 c0             	and    $0xffffffc0,%eax
8010294c:	3c 40                	cmp    $0x40,%al
8010294e:	75 f8                	jne    80102948 <idestart+0x28>
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102950:	31 f6                	xor    %esi,%esi
80102952:	ba f6 03 00 00       	mov    $0x3f6,%edx
80102957:	89 f0                	mov    %esi,%eax
80102959:	ee                   	out    %al,(%dx)
8010295a:	ba f2 01 00 00       	mov    $0x1f2,%edx
8010295f:	b8 02 00 00 00       	mov    $0x2,%eax
80102964:	ee                   	out    %al,(%dx)
80102965:	ba f3 01 00 00       	mov    $0x1f3,%edx
8010296a:	89 c8                	mov    %ecx,%eax
8010296c:	ee                   	out    %al,(%dx)
8010296d:	89 c8                	mov    %ecx,%eax
8010296f:	ba f4 01 00 00       	mov    $0x1f4,%edx
80102974:	c1 f8 08             	sar    $0x8,%eax
80102977:	ee                   	out    %al,(%dx)
80102978:	ba f5 01 00 00       	mov    $0x1f5,%edx
8010297d:	89 f0                	mov    %esi,%eax
8010297f:	ee                   	out    %al,(%dx)
80102980:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
80102984:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102989:	83 e0 01             	and    $0x1,%eax
8010298c:	c1 e0 04             	shl    $0x4,%eax
8010298f:	83 c8 e0             	or     $0xffffffe0,%eax
80102992:	ee                   	out    %al,(%dx)
80102993:	f6 03 04             	testb  $0x4,(%ebx)
80102996:	ba f7 01 00 00       	mov    $0x1f7,%edx
8010299b:	75 13                	jne    801029b0 <idestart+0x90>
8010299d:	b8 c4 ff ff ff       	mov    $0xffffffc4,%eax
801029a2:	ee                   	out    %al,(%dx)
801029a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
801029a6:	5b                   	pop    %ebx
801029a7:	5e                   	pop    %esi
801029a8:	5d                   	pop    %ebp
801029a9:	c3                   	ret    
801029aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801029b0:	b8 c5 ff ff ff       	mov    $0xffffffc5,%eax
801029b5:	ee                   	out    %al,(%dx)
}

static inline void
outsl(int port, const void *addr, int cnt)
{
  asm volatile("cld; rep outsl" :
801029b6:	b9 00 01 00 00       	mov    $0x100,%ecx
801029bb:	8d 73 60             	lea    0x60(%ebx),%esi
801029be:	ba f0 01 00 00       	mov    $0x1f0,%edx
801029c3:	fc                   	cld    
801029c4:	f3 6f                	rep outsl %ds:(%esi),(%dx)
801029c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
801029c9:	5b                   	pop    %ebx
801029ca:	5e                   	pop    %esi
801029cb:	5d                   	pop    %ebp
801029cc:	c3                   	ret    
801029cd:	83 ec 0c             	sub    $0xc,%esp
801029d0:	68 7c e9 10 80       	push   $0x8010e97c
801029d5:	e8 f6 d9 ff ff       	call   801003d0 <panic>
801029da:	83 ec 0c             	sub    $0xc,%esp
801029dd:	68 73 e9 10 80       	push   $0x8010e973
801029e2:	e8 e9 d9 ff ff       	call   801003d0 <panic>
801029e7:	89 f6                	mov    %esi,%esi
801029e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801029f0 <ideinit>:
801029f0:	55                   	push   %ebp
801029f1:	89 e5                	mov    %esp,%ebp
801029f3:	83 ec 10             	sub    $0x10,%esp
801029f6:	68 8e e9 10 80       	push   $0x8010e98e
801029fb:	68 80 05 12 80       	push   $0x80120580
80102a00:	e8 6b 37 00 00       	call   80106170 <initlock>
80102a05:	58                   	pop    %eax
80102a06:	a1 80 0a 13 80       	mov    0x80130a80,%eax
80102a0b:	5a                   	pop    %edx
80102a0c:	83 e8 01             	sub    $0x1,%eax
80102a0f:	50                   	push   %eax
80102a10:	6a 0e                	push   $0xe
80102a12:	e8 a9 02 00 00       	call   80102cc0 <ioapicenable>
80102a17:	83 c4 10             	add    $0x10,%esp
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102a1a:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102a1f:	90                   	nop
80102a20:	ec                   	in     (%dx),%al
80102a21:	83 e0 c0             	and    $0xffffffc0,%eax
80102a24:	3c 40                	cmp    $0x40,%al
80102a26:	75 f8                	jne    80102a20 <ideinit+0x30>
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102a28:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102a2d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
80102a32:	ee                   	out    %al,(%dx)
80102a33:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102a38:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102a3d:	eb 06                	jmp    80102a45 <ideinit+0x55>
80102a3f:	90                   	nop
80102a40:	83 e9 01             	sub    $0x1,%ecx
80102a43:	74 0f                	je     80102a54 <ideinit+0x64>
80102a45:	ec                   	in     (%dx),%al
80102a46:	84 c0                	test   %al,%al
80102a48:	74 f6                	je     80102a40 <ideinit+0x50>
80102a4a:	c7 05 60 05 12 80 01 	movl   $0x1,0x80120560
80102a51:	00 00 00 
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102a54:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102a59:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
80102a5e:	ee                   	out    %al,(%dx)
80102a5f:	c9                   	leave  
80102a60:	c3                   	ret    
80102a61:	eb 0d                	jmp    80102a70 <ideintr>
80102a63:	90                   	nop
80102a64:	90                   	nop
80102a65:	90                   	nop
80102a66:	90                   	nop
80102a67:	90                   	nop
80102a68:	90                   	nop
80102a69:	90                   	nop
80102a6a:	90                   	nop
80102a6b:	90                   	nop
80102a6c:	90                   	nop
80102a6d:	90                   	nop
80102a6e:	90                   	nop
80102a6f:	90                   	nop

80102a70 <ideintr>:
80102a70:	55                   	push   %ebp
80102a71:	89 e5                	mov    %esp,%ebp
80102a73:	57                   	push   %edi
80102a74:	56                   	push   %esi
80102a75:	53                   	push   %ebx
80102a76:	83 ec 18             	sub    $0x18,%esp
80102a79:	68 80 05 12 80       	push   $0x80120580
80102a7e:	e8 ed 37 00 00       	call   80106270 <acquire>
80102a83:	8b 1d 64 05 12 80    	mov    0x80120564,%ebx
80102a89:	83 c4 10             	add    $0x10,%esp
80102a8c:	85 db                	test   %ebx,%ebx
80102a8e:	74 34                	je     80102ac4 <ideintr+0x54>
80102a90:	8b 43 58             	mov    0x58(%ebx),%eax
80102a93:	a3 64 05 12 80       	mov    %eax,0x80120564
80102a98:	8b 33                	mov    (%ebx),%esi
80102a9a:	f7 c6 04 00 00 00    	test   $0x4,%esi
80102aa0:	74 3e                	je     80102ae0 <ideintr+0x70>
80102aa2:	83 e6 fb             	and    $0xfffffffb,%esi
80102aa5:	83 ec 0c             	sub    $0xc,%esp
80102aa8:	83 ce 02             	or     $0x2,%esi
80102aab:	89 33                	mov    %esi,(%ebx)
80102aad:	53                   	push   %ebx
80102aae:	e8 3b 33 00 00       	call   80105dee <wakeup>
80102ab3:	a1 64 05 12 80       	mov    0x80120564,%eax
80102ab8:	83 c4 10             	add    $0x10,%esp
80102abb:	85 c0                	test   %eax,%eax
80102abd:	74 05                	je     80102ac4 <ideintr+0x54>
80102abf:	e8 5c fe ff ff       	call   80102920 <idestart>
80102ac4:	83 ec 0c             	sub    $0xc,%esp
80102ac7:	68 80 05 12 80       	push   $0x80120580
80102acc:	e8 bf 38 00 00       	call   80106390 <release>
80102ad1:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102ad4:	5b                   	pop    %ebx
80102ad5:	5e                   	pop    %esi
80102ad6:	5f                   	pop    %edi
80102ad7:	5d                   	pop    %ebp
80102ad8:	c3                   	ret    
80102ad9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102ae0:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102ae5:	8d 76 00             	lea    0x0(%esi),%esi
80102ae8:	ec                   	in     (%dx),%al
80102ae9:	89 c1                	mov    %eax,%ecx
80102aeb:	83 e1 c0             	and    $0xffffffc0,%ecx
80102aee:	80 f9 40             	cmp    $0x40,%cl
80102af1:	75 f5                	jne    80102ae8 <ideintr+0x78>
80102af3:	a8 21                	test   $0x21,%al
80102af5:	75 ab                	jne    80102aa2 <ideintr+0x32>
80102af7:	8d 7b 60             	lea    0x60(%ebx),%edi
}

static inline void
insl(int port, void *addr, int cnt)
{
  asm volatile("cld; rep insl" :
80102afa:	b9 00 01 00 00       	mov    $0x100,%ecx
80102aff:	ba f0 01 00 00       	mov    $0x1f0,%edx
80102b04:	fc                   	cld    
80102b05:	f3 6d                	rep insl (%dx),%es:(%edi)
80102b07:	8b 33                	mov    (%ebx),%esi
80102b09:	eb 97                	jmp    80102aa2 <ideintr+0x32>
80102b0b:	90                   	nop
80102b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80102b10 <iderw>:
80102b10:	55                   	push   %ebp
80102b11:	89 e5                	mov    %esp,%ebp
80102b13:	53                   	push   %ebx
80102b14:	83 ec 10             	sub    $0x10,%esp
80102b17:	8b 5d 08             	mov    0x8(%ebp),%ebx
80102b1a:	8d 43 0c             	lea    0xc(%ebx),%eax
80102b1d:	50                   	push   %eax
80102b1e:	e8 1d 36 00 00       	call   80106140 <holdingsleep>
80102b23:	83 c4 10             	add    $0x10,%esp
80102b26:	85 c0                	test   %eax,%eax
80102b28:	0f 84 ad 00 00 00    	je     80102bdb <iderw+0xcb>
80102b2e:	8b 03                	mov    (%ebx),%eax
80102b30:	83 e0 06             	and    $0x6,%eax
80102b33:	83 f8 02             	cmp    $0x2,%eax
80102b36:	0f 84 b9 00 00 00    	je     80102bf5 <iderw+0xe5>
80102b3c:	8b 53 04             	mov    0x4(%ebx),%edx
80102b3f:	85 d2                	test   %edx,%edx
80102b41:	74 0d                	je     80102b50 <iderw+0x40>
80102b43:	a1 60 05 12 80       	mov    0x80120560,%eax
80102b48:	85 c0                	test   %eax,%eax
80102b4a:	0f 84 98 00 00 00    	je     80102be8 <iderw+0xd8>
80102b50:	83 ec 0c             	sub    $0xc,%esp
80102b53:	68 80 05 12 80       	push   $0x80120580
80102b58:	e8 13 37 00 00       	call   80106270 <acquire>
80102b5d:	8b 15 64 05 12 80    	mov    0x80120564,%edx
80102b63:	83 c4 10             	add    $0x10,%esp
80102b66:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
80102b6d:	85 d2                	test   %edx,%edx
80102b6f:	75 09                	jne    80102b7a <iderw+0x6a>
80102b71:	eb 58                	jmp    80102bcb <iderw+0xbb>
80102b73:	90                   	nop
80102b74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102b78:	89 c2                	mov    %eax,%edx
80102b7a:	8b 42 58             	mov    0x58(%edx),%eax
80102b7d:	85 c0                	test   %eax,%eax
80102b7f:	75 f7                	jne    80102b78 <iderw+0x68>
80102b81:	83 c2 58             	add    $0x58,%edx
80102b84:	89 1a                	mov    %ebx,(%edx)
80102b86:	3b 1d 64 05 12 80    	cmp    0x80120564,%ebx
80102b8c:	74 44                	je     80102bd2 <iderw+0xc2>
80102b8e:	8b 03                	mov    (%ebx),%eax
80102b90:	83 e0 06             	and    $0x6,%eax
80102b93:	83 f8 02             	cmp    $0x2,%eax
80102b96:	74 23                	je     80102bbb <iderw+0xab>
80102b98:	90                   	nop
80102b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102ba0:	83 ec 08             	sub    $0x8,%esp
80102ba3:	68 80 05 12 80       	push   $0x80120580
80102ba8:	53                   	push   %ebx
80102ba9:	e8 73 30 00 00       	call   80105c21 <sleep>
80102bae:	8b 03                	mov    (%ebx),%eax
80102bb0:	83 c4 10             	add    $0x10,%esp
80102bb3:	83 e0 06             	and    $0x6,%eax
80102bb6:	83 f8 02             	cmp    $0x2,%eax
80102bb9:	75 e5                	jne    80102ba0 <iderw+0x90>
80102bbb:	c7 45 08 80 05 12 80 	movl   $0x80120580,0x8(%ebp)
80102bc2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102bc5:	c9                   	leave  
80102bc6:	e9 c5 37 00 00       	jmp    80106390 <release>
80102bcb:	ba 64 05 12 80       	mov    $0x80120564,%edx
80102bd0:	eb b2                	jmp    80102b84 <iderw+0x74>
80102bd2:	89 d8                	mov    %ebx,%eax
80102bd4:	e8 47 fd ff ff       	call   80102920 <idestart>
80102bd9:	eb b3                	jmp    80102b8e <iderw+0x7e>
80102bdb:	83 ec 0c             	sub    $0xc,%esp
80102bde:	68 92 e9 10 80       	push   $0x8010e992
80102be3:	e8 e8 d7 ff ff       	call   801003d0 <panic>
80102be8:	83 ec 0c             	sub    $0xc,%esp
80102beb:	68 bd e9 10 80       	push   $0x8010e9bd
80102bf0:	e8 db d7 ff ff       	call   801003d0 <panic>
80102bf5:	83 ec 0c             	sub    $0xc,%esp
80102bf8:	68 a8 e9 10 80       	push   $0x8010e9a8
80102bfd:	e8 ce d7 ff ff       	call   801003d0 <panic>
80102c02:	66 90                	xchg   %ax,%ax
80102c04:	66 90                	xchg   %ax,%ax
80102c06:	66 90                	xchg   %ax,%ax
80102c08:	66 90                	xchg   %ax,%ax
80102c0a:	66 90                	xchg   %ax,%ax
80102c0c:	66 90                	xchg   %ax,%ax
80102c0e:	66 90                	xchg   %ax,%ax

80102c10 <ioapicinit>:
80102c10:	55                   	push   %ebp
80102c11:	c7 05 b4 f9 12 80 00 	movl   $0xfec00000,0x8012f9b4
80102c18:	00 c0 fe 
80102c1b:	89 e5                	mov    %esp,%ebp
80102c1d:	56                   	push   %esi
80102c1e:	53                   	push   %ebx
80102c1f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
80102c26:	00 00 00 
80102c29:	8b 15 b4 f9 12 80    	mov    0x8012f9b4,%edx
80102c2f:	8b 72 10             	mov    0x10(%edx),%esi
80102c32:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
80102c38:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102c3e:	0f b6 15 e0 04 13 80 	movzbl 0x801304e0,%edx
80102c45:	89 f0                	mov    %esi,%eax
80102c47:	c1 e8 10             	shr    $0x10,%eax
80102c4a:	0f b6 f0             	movzbl %al,%esi
80102c4d:	8b 41 10             	mov    0x10(%ecx),%eax
80102c50:	c1 e8 18             	shr    $0x18,%eax
80102c53:	39 d0                	cmp    %edx,%eax
80102c55:	74 16                	je     80102c6d <ioapicinit+0x5d>
80102c57:	83 ec 0c             	sub    $0xc,%esp
80102c5a:	68 dc e9 10 80       	push   $0x8010e9dc
80102c5f:	e8 fc d9 ff ff       	call   80100660 <cprintf>
80102c64:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102c6a:	83 c4 10             	add    $0x10,%esp
80102c6d:	83 c6 21             	add    $0x21,%esi
80102c70:	ba 10 00 00 00       	mov    $0x10,%edx
80102c75:	b8 20 00 00 00       	mov    $0x20,%eax
80102c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102c80:	89 11                	mov    %edx,(%ecx)
80102c82:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102c88:	89 c3                	mov    %eax,%ebx
80102c8a:	81 cb 00 00 01 00    	or     $0x10000,%ebx
80102c90:	83 c0 01             	add    $0x1,%eax
80102c93:	89 59 10             	mov    %ebx,0x10(%ecx)
80102c96:	8d 5a 01             	lea    0x1(%edx),%ebx
80102c99:	83 c2 02             	add    $0x2,%edx
80102c9c:	39 f0                	cmp    %esi,%eax
80102c9e:	89 19                	mov    %ebx,(%ecx)
80102ca0:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102ca6:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
80102cad:	75 d1                	jne    80102c80 <ioapicinit+0x70>
80102caf:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102cb2:	5b                   	pop    %ebx
80102cb3:	5e                   	pop    %esi
80102cb4:	5d                   	pop    %ebp
80102cb5:	c3                   	ret    
80102cb6:	8d 76 00             	lea    0x0(%esi),%esi
80102cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102cc0 <ioapicenable>:
80102cc0:	55                   	push   %ebp
80102cc1:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102cc7:	89 e5                	mov    %esp,%ebp
80102cc9:	8b 45 08             	mov    0x8(%ebp),%eax
80102ccc:	8d 50 20             	lea    0x20(%eax),%edx
80102ccf:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
80102cd3:	89 01                	mov    %eax,(%ecx)
80102cd5:	8b 0d b4 f9 12 80    	mov    0x8012f9b4,%ecx
80102cdb:	83 c0 01             	add    $0x1,%eax
80102cde:	89 51 10             	mov    %edx,0x10(%ecx)
80102ce1:	8b 55 0c             	mov    0xc(%ebp),%edx
80102ce4:	89 01                	mov    %eax,(%ecx)
80102ce6:	a1 b4 f9 12 80       	mov    0x8012f9b4,%eax
80102ceb:	c1 e2 18             	shl    $0x18,%edx
80102cee:	89 50 10             	mov    %edx,0x10(%eax)
80102cf1:	5d                   	pop    %ebp
80102cf2:	c3                   	ret    
80102cf3:	66 90                	xchg   %ax,%ax
80102cf5:	66 90                	xchg   %ax,%ax
80102cf7:	66 90                	xchg   %ax,%ax
80102cf9:	66 90                	xchg   %ax,%ax
80102cfb:	66 90                	xchg   %ax,%ax
80102cfd:	66 90                	xchg   %ax,%ax
80102cff:	90                   	nop

80102d00 <kfree>:
80102d00:	55                   	push   %ebp
80102d01:	89 e5                	mov    %esp,%ebp
80102d03:	53                   	push   %ebx
80102d04:	83 ec 04             	sub    $0x4,%esp
80102d07:	8b 5d 08             	mov    0x8(%ebp),%ebx
80102d0a:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
80102d10:	0f 85 7c 00 00 00    	jne    80102d92 <kfree+0x92>
80102d16:	81 fb 54 a6 14 80    	cmp    $0x8014a654,%ebx
80102d1c:	72 74                	jb     80102d92 <kfree+0x92>
80102d1e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80102d24:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80102d29:	77 67                	ja     80102d92 <kfree+0x92>
80102d2b:	83 ec 04             	sub    $0x4,%esp
80102d2e:	68 00 10 00 00       	push   $0x1000
80102d33:	6a 01                	push   $0x1
80102d35:	53                   	push   %ebx
80102d36:	e8 a5 36 00 00       	call   801063e0 <memset>
80102d3b:	8b 15 f4 f9 12 80    	mov    0x8012f9f4,%edx
80102d41:	83 c4 10             	add    $0x10,%esp
80102d44:	85 d2                	test   %edx,%edx
80102d46:	75 38                	jne    80102d80 <kfree+0x80>
80102d48:	a1 00 fa 12 80       	mov    0x8012fa00,%eax
80102d4d:	89 03                	mov    %eax,(%ebx)
80102d4f:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
80102d54:	83 05 f8 f9 12 80 01 	addl   $0x1,0x8012f9f8
80102d5b:	89 1d 00 fa 12 80    	mov    %ebx,0x8012fa00
80102d61:	85 c0                	test   %eax,%eax
80102d63:	75 0b                	jne    80102d70 <kfree+0x70>
80102d65:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102d68:	c9                   	leave  
80102d69:	c3                   	ret    
80102d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102d70:	c7 45 08 c0 f9 12 80 	movl   $0x8012f9c0,0x8(%ebp)
80102d77:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102d7a:	c9                   	leave  
80102d7b:	e9 10 36 00 00       	jmp    80106390 <release>
80102d80:	83 ec 0c             	sub    $0xc,%esp
80102d83:	68 c0 f9 12 80       	push   $0x8012f9c0
80102d88:	e8 e3 34 00 00       	call   80106270 <acquire>
80102d8d:	83 c4 10             	add    $0x10,%esp
80102d90:	eb b6                	jmp    80102d48 <kfree+0x48>
80102d92:	83 ec 0c             	sub    $0xc,%esp
80102d95:	68 0e ea 10 80       	push   $0x8010ea0e
80102d9a:	e8 31 d6 ff ff       	call   801003d0 <panic>
80102d9f:	90                   	nop

80102da0 <freerange>:
80102da0:	55                   	push   %ebp
80102da1:	89 e5                	mov    %esp,%ebp
80102da3:	56                   	push   %esi
80102da4:	53                   	push   %ebx
80102da5:	8b 45 08             	mov    0x8(%ebp),%eax
80102da8:	8b 75 0c             	mov    0xc(%ebp),%esi
80102dab:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102db1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
80102db7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102dbd:	39 de                	cmp    %ebx,%esi
80102dbf:	72 23                	jb     80102de4 <freerange+0x44>
80102dc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102dc8:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102dce:	83 ec 0c             	sub    $0xc,%esp
80102dd1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102dd7:	50                   	push   %eax
80102dd8:	e8 23 ff ff ff       	call   80102d00 <kfree>
80102ddd:	83 c4 10             	add    $0x10,%esp
80102de0:	39 f3                	cmp    %esi,%ebx
80102de2:	76 e4                	jbe    80102dc8 <freerange+0x28>
80102de4:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102de7:	5b                   	pop    %ebx
80102de8:	5e                   	pop    %esi
80102de9:	5d                   	pop    %ebp
80102dea:	c3                   	ret    
80102deb:	90                   	nop
80102dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80102df0 <kinit1>:
80102df0:	55                   	push   %ebp
80102df1:	89 e5                	mov    %esp,%ebp
80102df3:	56                   	push   %esi
80102df4:	53                   	push   %ebx
80102df5:	8b 75 0c             	mov    0xc(%ebp),%esi
80102df8:	83 ec 08             	sub    $0x8,%esp
80102dfb:	68 14 ea 10 80       	push   $0x8010ea14
80102e00:	68 c0 f9 12 80       	push   $0x8012f9c0
80102e05:	e8 66 33 00 00       	call   80106170 <initlock>
80102e0a:	8b 45 08             	mov    0x8(%ebp),%eax
80102e0d:	83 c4 10             	add    $0x10,%esp
80102e10:	c7 05 f4 f9 12 80 00 	movl   $0x0,0x8012f9f4
80102e17:	00 00 00 
80102e1a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102e20:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
80102e26:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102e2c:	39 de                	cmp    %ebx,%esi
80102e2e:	72 1c                	jb     80102e4c <kinit1+0x5c>
80102e30:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102e36:	83 ec 0c             	sub    $0xc,%esp
80102e39:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102e3f:	50                   	push   %eax
80102e40:	e8 bb fe ff ff       	call   80102d00 <kfree>
80102e45:	83 c4 10             	add    $0x10,%esp
80102e48:	39 de                	cmp    %ebx,%esi
80102e4a:	73 e4                	jae    80102e30 <kinit1+0x40>
80102e4c:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102e4f:	5b                   	pop    %ebx
80102e50:	5e                   	pop    %esi
80102e51:	5d                   	pop    %ebp
80102e52:	c3                   	ret    
80102e53:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102e59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102e60 <kinit2>:
80102e60:	55                   	push   %ebp
80102e61:	89 e5                	mov    %esp,%ebp
80102e63:	56                   	push   %esi
80102e64:	53                   	push   %ebx
80102e65:	8b 45 08             	mov    0x8(%ebp),%eax
80102e68:	8b 75 0c             	mov    0xc(%ebp),%esi
80102e6b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102e71:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
80102e77:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102e7d:	39 de                	cmp    %ebx,%esi
80102e7f:	72 23                	jb     80102ea4 <kinit2+0x44>
80102e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102e88:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102e8e:	83 ec 0c             	sub    $0xc,%esp
80102e91:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102e97:	50                   	push   %eax
80102e98:	e8 63 fe ff ff       	call   80102d00 <kfree>
80102e9d:	83 c4 10             	add    $0x10,%esp
80102ea0:	39 de                	cmp    %ebx,%esi
80102ea2:	73 e4                	jae    80102e88 <kinit2+0x28>
80102ea4:	c7 05 fc f9 12 80 00 	movl   $0x0,0x8012f9fc
80102eab:	00 00 00 
80102eae:	c7 05 f4 f9 12 80 01 	movl   $0x1,0x8012f9f4
80102eb5:	00 00 00 
80102eb8:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102ebb:	5b                   	pop    %ebx
80102ebc:	5e                   	pop    %esi
80102ebd:	5d                   	pop    %ebp
80102ebe:	c3                   	ret    
80102ebf:	90                   	nop

80102ec0 <decrese_protect_counter>:
80102ec0:	55                   	push   %ebp
80102ec1:	89 e5                	mov    %esp,%ebp
80102ec3:	83 ec 08             	sub    $0x8,%esp
80102ec6:	8b 15 f4 f9 12 80    	mov    0x8012f9f4,%edx
80102ecc:	85 d2                	test   %edx,%edx
80102ece:	75 10                	jne    80102ee0 <decrese_protect_counter+0x20>
80102ed0:	8b 45 08             	mov    0x8(%ebp),%eax
80102ed3:	29 05 fc f9 12 80    	sub    %eax,0x8012f9fc
80102ed9:	31 c0                	xor    %eax,%eax
80102edb:	c9                   	leave  
80102edc:	c3                   	ret    
80102edd:	8d 76 00             	lea    0x0(%esi),%esi
80102ee0:	83 ec 0c             	sub    $0xc,%esp
80102ee3:	68 c0 f9 12 80       	push   $0x8012f9c0
80102ee8:	e8 83 33 00 00       	call   80106270 <acquire>
80102eed:	8b 45 08             	mov    0x8(%ebp),%eax
80102ef0:	29 05 fc f9 12 80    	sub    %eax,0x8012f9fc
80102ef6:	83 c4 10             	add    $0x10,%esp
80102ef9:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
80102efe:	85 c0                	test   %eax,%eax
80102f00:	74 d7                	je     80102ed9 <decrese_protect_counter+0x19>
80102f02:	83 ec 0c             	sub    $0xc,%esp
80102f05:	68 c0 f9 12 80       	push   $0x8012f9c0
80102f0a:	e8 81 34 00 00       	call   80106390 <release>
80102f0f:	83 c4 10             	add    $0x10,%esp
80102f12:	31 c0                	xor    %eax,%eax
80102f14:	c9                   	leave  
80102f15:	c3                   	ret    
80102f16:	8d 76 00             	lea    0x0(%esi),%esi
80102f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80102f20 <increse_protect_counter>:
80102f20:	55                   	push   %ebp
80102f21:	89 e5                	mov    %esp,%ebp
80102f23:	53                   	push   %ebx
80102f24:	83 ec 04             	sub    $0x4,%esp
80102f27:	8b 5d 08             	mov    0x8(%ebp),%ebx
80102f2a:	85 db                	test   %ebx,%ebx
80102f2c:	0f 88 7e 00 00 00    	js     80102fb0 <increse_protect_counter+0x90>
80102f32:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
80102f37:	85 c0                	test   %eax,%eax
80102f39:	75 45                	jne    80102f80 <increse_protect_counter+0x60>
80102f3b:	03 1d fc f9 12 80    	add    0x8012f9fc,%ebx
80102f41:	3b 1d f8 f9 12 80    	cmp    0x8012f9f8,%ebx
80102f47:	7f 27                	jg     80102f70 <increse_protect_counter+0x50>
80102f49:	89 1d fc f9 12 80    	mov    %ebx,0x8012f9fc
80102f4f:	31 db                	xor    %ebx,%ebx
80102f51:	85 c0                	test   %eax,%eax
80102f53:	74 10                	je     80102f65 <increse_protect_counter+0x45>
80102f55:	83 ec 0c             	sub    $0xc,%esp
80102f58:	68 c0 f9 12 80       	push   $0x8012f9c0
80102f5d:	e8 2e 34 00 00       	call   80106390 <release>
80102f62:	83 c4 10             	add    $0x10,%esp
80102f65:	89 d8                	mov    %ebx,%eax
80102f67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102f6a:	c9                   	leave  
80102f6b:	c3                   	ret    
80102f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102f70:	bb 01 00 00 00       	mov    $0x1,%ebx
80102f75:	89 d8                	mov    %ebx,%eax
80102f77:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102f7a:	c9                   	leave  
80102f7b:	c3                   	ret    
80102f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102f80:	83 ec 0c             	sub    $0xc,%esp
80102f83:	68 c0 f9 12 80       	push   $0x8012f9c0
80102f88:	e8 e3 32 00 00       	call   80106270 <acquire>
80102f8d:	03 1d fc f9 12 80    	add    0x8012f9fc,%ebx
80102f93:	83 c4 10             	add    $0x10,%esp
80102f96:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
80102f9b:	3b 1d f8 f9 12 80    	cmp    0x8012f9f8,%ebx
80102fa1:	7e a6                	jle    80102f49 <increse_protect_counter+0x29>
80102fa3:	bb 01 00 00 00       	mov    $0x1,%ebx
80102fa8:	eb a7                	jmp    80102f51 <increse_protect_counter+0x31>
80102faa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102fb0:	f7 db                	neg    %ebx
80102fb2:	89 5d 08             	mov    %ebx,0x8(%ebp)
80102fb5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102fb8:	c9                   	leave  
80102fb9:	e9 02 ff ff ff       	jmp    80102ec0 <decrese_protect_counter>
80102fbe:	66 90                	xchg   %ax,%ax

80102fc0 <get_total_memory>:
80102fc0:	55                   	push   %ebp
80102fc1:	a1 f8 f9 12 80       	mov    0x8012f9f8,%eax
80102fc6:	89 e5                	mov    %esp,%ebp
80102fc8:	5d                   	pop    %ebp
80102fc9:	c3                   	ret    
80102fca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80102fd0 <kalloc>:
80102fd0:	55                   	push   %ebp
80102fd1:	89 e5                	mov    %esp,%ebp
80102fd3:	53                   	push   %ebx
80102fd4:	83 ec 14             	sub    $0x14,%esp
80102fd7:	8b 15 f8 f9 12 80    	mov    0x8012f9f8,%edx
80102fdd:	3b 15 fc f9 12 80    	cmp    0x8012f9fc,%edx
80102fe3:	7e 7b                	jle    80103060 <kalloc+0x90>
80102fe5:	8b 0d f4 f9 12 80    	mov    0x8012f9f4,%ecx
80102feb:	85 c9                	test   %ecx,%ecx
80102fed:	75 49                	jne    80103038 <kalloc+0x68>
80102fef:	a1 00 fa 12 80       	mov    0x8012fa00,%eax
80102ff4:	85 c0                	test   %eax,%eax
80102ff6:	74 15                	je     8010300d <kalloc+0x3d>
80102ff8:	8b 18                	mov    (%eax),%ebx
80102ffa:	83 ea 01             	sub    $0x1,%edx
80102ffd:	89 15 f8 f9 12 80    	mov    %edx,0x8012f9f8
80103003:	89 1d 00 fa 12 80    	mov    %ebx,0x8012fa00
80103009:	85 c9                	test   %ecx,%ecx
8010300b:	75 0b                	jne    80103018 <kalloc+0x48>
8010300d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103010:	c9                   	leave  
80103011:	c3                   	ret    
80103012:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103018:	83 ec 0c             	sub    $0xc,%esp
8010301b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010301e:	68 c0 f9 12 80       	push   $0x8012f9c0
80103023:	e8 68 33 00 00       	call   80106390 <release>
80103028:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010302b:	83 c4 10             	add    $0x10,%esp
8010302e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103031:	c9                   	leave  
80103032:	c3                   	ret    
80103033:	90                   	nop
80103034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80103038:	83 ec 0c             	sub    $0xc,%esp
8010303b:	68 c0 f9 12 80       	push   $0x8012f9c0
80103040:	e8 2b 32 00 00       	call   80106270 <acquire>
80103045:	a1 00 fa 12 80       	mov    0x8012fa00,%eax
8010304a:	83 c4 10             	add    $0x10,%esp
8010304d:	8b 15 f8 f9 12 80    	mov    0x8012f9f8,%edx
80103053:	8b 0d f4 f9 12 80    	mov    0x8012f9f4,%ecx
80103059:	85 c0                	test   %eax,%eax
8010305b:	75 9b                	jne    80102ff8 <kalloc+0x28>
8010305d:	eb aa                	jmp    80103009 <kalloc+0x39>
8010305f:	90                   	nop
80103060:	31 c0                	xor    %eax,%eax
80103062:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103065:	c9                   	leave  
80103066:	c3                   	ret    
80103067:	89 f6                	mov    %esi,%esi
80103069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80103070 <kmemtest>:
80103070:	55                   	push   %ebp
80103071:	89 e5                	mov    %esp,%ebp
80103073:	57                   	push   %edi
80103074:	56                   	push   %esi
80103075:	53                   	push   %ebx
80103076:	83 ec 1c             	sub    $0x1c,%esp
80103079:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
8010307e:	85 c0                	test   %eax,%eax
80103080:	89 45 e0             	mov    %eax,-0x20(%ebp)
80103083:	0f 85 97 00 00 00    	jne    80103120 <kmemtest+0xb0>
80103089:	8b 35 00 fa 12 80    	mov    0x8012fa00,%esi
8010308f:	a1 f8 f9 12 80       	mov    0x8012f9f8,%eax
80103094:	85 f6                	test   %esi,%esi
80103096:	89 45 dc             	mov    %eax,-0x24(%ebp)
80103099:	0f 84 c9 00 00 00    	je     80103168 <kmemtest+0xf8>
8010309f:	31 ff                	xor    %edi,%edi
801030a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
801030a8:	bb 01 00 00 00       	mov    $0x1,%ebx
801030ad:	8d 76 00             	lea    0x0(%esi),%esi
801030b0:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
801030b4:	8d 46 04             	lea    0x4(%esi),%eax
801030b7:	8d 8e 00 10 00 00    	lea    0x1000(%esi),%ecx
801030bd:	31 d2                	xor    %edx,%edx
801030bf:	90                   	nop
801030c0:	80 38 01             	cmpb   $0x1,(%eax)
801030c3:	0f 45 d3             	cmovne %ebx,%edx
801030c6:	83 c0 01             	add    $0x1,%eax
801030c9:	39 c1                	cmp    %eax,%ecx
801030cb:	75 f3                	jne    801030c0 <kmemtest+0x50>
801030cd:	8b 36                	mov    (%esi),%esi
801030cf:	01 d7                	add    %edx,%edi
801030d1:	85 f6                	test   %esi,%esi
801030d3:	75 db                	jne    801030b0 <kmemtest+0x40>
801030d5:	85 ff                	test   %edi,%edi
801030d7:	0f 94 c3             	sete   %bl
801030da:	8b 45 e0             	mov    -0x20(%ebp),%eax
801030dd:	85 c0                	test   %eax,%eax
801030df:	74 10                	je     801030f1 <kmemtest+0x81>
801030e1:	83 ec 0c             	sub    $0xc,%esp
801030e4:	68 c0 f9 12 80       	push   $0x8012f9c0
801030e9:	e8 a2 32 00 00       	call   80106390 <release>
801030ee:	83 c4 10             	add    $0x10,%esp
801030f1:	57                   	push   %edi
801030f2:	8b 75 e4             	mov    -0x1c(%ebp),%esi
801030f5:	8b 7d dc             	mov    -0x24(%ebp),%edi
801030f8:	56                   	push   %esi
801030f9:	57                   	push   %edi
801030fa:	68 1c ea 10 80       	push   $0x8010ea1c
801030ff:	e8 5c d5 ff ff       	call   80100660 <cprintf>
80103104:	89 f8                	mov    %edi,%eax
80103106:	83 c4 10             	add    $0x10,%esp
80103109:	39 f0                	cmp    %esi,%eax
8010310b:	0f 94 c0             	sete   %al
8010310e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103111:	21 d8                	and    %ebx,%eax
80103113:	83 f0 01             	xor    $0x1,%eax
80103116:	0f b6 c0             	movzbl %al,%eax
80103119:	5b                   	pop    %ebx
8010311a:	f7 d8                	neg    %eax
8010311c:	5e                   	pop    %esi
8010311d:	5f                   	pop    %edi
8010311e:	5d                   	pop    %ebp
8010311f:	c3                   	ret    
80103120:	83 ec 0c             	sub    $0xc,%esp
80103123:	68 c0 f9 12 80       	push   $0x8012f9c0
80103128:	e8 43 31 00 00       	call   80106270 <acquire>
8010312d:	a1 f8 f9 12 80       	mov    0x8012f9f8,%eax
80103132:	8b 35 00 fa 12 80    	mov    0x8012fa00,%esi
80103138:	83 c4 10             	add    $0x10,%esp
8010313b:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010313e:	a1 f4 f9 12 80       	mov    0x8012f9f4,%eax
80103143:	85 f6                	test   %esi,%esi
80103145:	89 45 e0             	mov    %eax,-0x20(%ebp)
80103148:	0f 85 51 ff ff ff    	jne    8010309f <kmemtest+0x2f>
8010314e:	bb 01 00 00 00       	mov    $0x1,%ebx
80103153:	31 ff                	xor    %edi,%edi
80103155:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010315c:	e9 79 ff ff ff       	jmp    801030da <kmemtest+0x6a>
80103161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103168:	bb 01 00 00 00       	mov    $0x1,%ebx
8010316d:	31 ff                	xor    %edi,%edi
8010316f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80103176:	e9 76 ff ff ff       	jmp    801030f1 <kmemtest+0x81>
8010317b:	66 90                	xchg   %ax,%ax
8010317d:	66 90                	xchg   %ax,%ax
8010317f:	90                   	nop

80103180 <kbdgetc>:
80103180:	55                   	push   %ebp
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103181:	ba 64 00 00 00       	mov    $0x64,%edx
80103186:	89 e5                	mov    %esp,%ebp
80103188:	ec                   	in     (%dx),%al
80103189:	a8 01                	test   $0x1,%al
8010318b:	0f 84 af 00 00 00    	je     80103240 <kbdgetc+0xc0>
80103191:	ba 60 00 00 00       	mov    $0x60,%edx
80103196:	ec                   	in     (%dx),%al
80103197:	0f b6 d0             	movzbl %al,%edx
8010319a:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
801031a0:	74 7e                	je     80103220 <kbdgetc+0xa0>
801031a2:	84 c0                	test   %al,%al
801031a4:	8b 0d b4 05 12 80    	mov    0x801205b4,%ecx
801031aa:	79 24                	jns    801031d0 <kbdgetc+0x50>
801031ac:	f6 c1 40             	test   $0x40,%cl
801031af:	75 05                	jne    801031b6 <kbdgetc+0x36>
801031b1:	89 c2                	mov    %eax,%edx
801031b3:	83 e2 7f             	and    $0x7f,%edx
801031b6:	0f b6 82 80 eb 10 80 	movzbl -0x7fef1480(%edx),%eax
801031bd:	83 c8 40             	or     $0x40,%eax
801031c0:	0f b6 c0             	movzbl %al,%eax
801031c3:	f7 d0                	not    %eax
801031c5:	21 c8                	and    %ecx,%eax
801031c7:	a3 b4 05 12 80       	mov    %eax,0x801205b4
801031cc:	31 c0                	xor    %eax,%eax
801031ce:	5d                   	pop    %ebp
801031cf:	c3                   	ret    
801031d0:	f6 c1 40             	test   $0x40,%cl
801031d3:	74 09                	je     801031de <kbdgetc+0x5e>
801031d5:	83 c8 80             	or     $0xffffff80,%eax
801031d8:	83 e1 bf             	and    $0xffffffbf,%ecx
801031db:	0f b6 d0             	movzbl %al,%edx
801031de:	0f b6 82 80 eb 10 80 	movzbl -0x7fef1480(%edx),%eax
801031e5:	09 c1                	or     %eax,%ecx
801031e7:	0f b6 82 80 ea 10 80 	movzbl -0x7fef1580(%edx),%eax
801031ee:	31 c1                	xor    %eax,%ecx
801031f0:	89 c8                	mov    %ecx,%eax
801031f2:	89 0d b4 05 12 80    	mov    %ecx,0x801205b4
801031f8:	83 e0 03             	and    $0x3,%eax
801031fb:	83 e1 08             	and    $0x8,%ecx
801031fe:	8b 04 85 60 ea 10 80 	mov    -0x7fef15a0(,%eax,4),%eax
80103205:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
80103209:	74 c3                	je     801031ce <kbdgetc+0x4e>
8010320b:	8d 50 9f             	lea    -0x61(%eax),%edx
8010320e:	83 fa 19             	cmp    $0x19,%edx
80103211:	77 1d                	ja     80103230 <kbdgetc+0xb0>
80103213:	83 e8 20             	sub    $0x20,%eax
80103216:	5d                   	pop    %ebp
80103217:	c3                   	ret    
80103218:	90                   	nop
80103219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103220:	31 c0                	xor    %eax,%eax
80103222:	83 0d b4 05 12 80 40 	orl    $0x40,0x801205b4
80103229:	5d                   	pop    %ebp
8010322a:	c3                   	ret    
8010322b:	90                   	nop
8010322c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80103230:	8d 48 bf             	lea    -0x41(%eax),%ecx
80103233:	8d 50 20             	lea    0x20(%eax),%edx
80103236:	5d                   	pop    %ebp
80103237:	83 f9 19             	cmp    $0x19,%ecx
8010323a:	0f 46 c2             	cmovbe %edx,%eax
8010323d:	c3                   	ret    
8010323e:	66 90                	xchg   %ax,%ax
80103240:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103245:	5d                   	pop    %ebp
80103246:	c3                   	ret    
80103247:	89 f6                	mov    %esi,%esi
80103249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80103250 <kbdintr>:
80103250:	55                   	push   %ebp
80103251:	89 e5                	mov    %esp,%ebp
80103253:	83 ec 14             	sub    $0x14,%esp
80103256:	68 80 31 10 80       	push   $0x80103180
8010325b:	e8 e0 d5 ff ff       	call   80100840 <consoleintr>
80103260:	83 c4 10             	add    $0x10,%esp
80103263:	c9                   	leave  
80103264:	c3                   	ret    
80103265:	66 90                	xchg   %ax,%ax
80103267:	66 90                	xchg   %ax,%ax
80103269:	66 90                	xchg   %ax,%ax
8010326b:	66 90                	xchg   %ax,%ax
8010326d:	66 90                	xchg   %ax,%ax
8010326f:	90                   	nop

80103270 <lapicinit>:
80103270:	a1 04 fa 12 80       	mov    0x8012fa04,%eax
80103275:	55                   	push   %ebp
80103276:	89 e5                	mov    %esp,%ebp
80103278:	85 c0                	test   %eax,%eax
8010327a:	0f 84 c8 00 00 00    	je     80103348 <lapicinit+0xd8>
80103280:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
80103287:	01 00 00 
8010328a:	8b 50 20             	mov    0x20(%eax),%edx
8010328d:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
80103294:	00 00 00 
80103297:	8b 50 20             	mov    0x20(%eax),%edx
8010329a:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
801032a1:	00 02 00 
801032a4:	8b 50 20             	mov    0x20(%eax),%edx
801032a7:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
801032ae:	96 98 00 
801032b1:	8b 50 20             	mov    0x20(%eax),%edx
801032b4:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
801032bb:	00 01 00 
801032be:	8b 50 20             	mov    0x20(%eax),%edx
801032c1:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
801032c8:	00 01 00 
801032cb:	8b 50 20             	mov    0x20(%eax),%edx
801032ce:	8b 50 30             	mov    0x30(%eax),%edx
801032d1:	c1 ea 10             	shr    $0x10,%edx
801032d4:	80 fa 03             	cmp    $0x3,%dl
801032d7:	77 77                	ja     80103350 <lapicinit+0xe0>
801032d9:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
801032e0:	00 00 00 
801032e3:	8b 50 20             	mov    0x20(%eax),%edx
801032e6:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
801032ed:	00 00 00 
801032f0:	8b 50 20             	mov    0x20(%eax),%edx
801032f3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
801032fa:	00 00 00 
801032fd:	8b 50 20             	mov    0x20(%eax),%edx
80103300:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
80103307:	00 00 00 
8010330a:	8b 50 20             	mov    0x20(%eax),%edx
8010330d:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
80103314:	00 00 00 
80103317:	8b 50 20             	mov    0x20(%eax),%edx
8010331a:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
80103321:	85 08 00 
80103324:	8b 50 20             	mov    0x20(%eax),%edx
80103327:	89 f6                	mov    %esi,%esi
80103329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80103330:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
80103336:	80 e6 10             	and    $0x10,%dh
80103339:	75 f5                	jne    80103330 <lapicinit+0xc0>
8010333b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
80103342:	00 00 00 
80103345:	8b 40 20             	mov    0x20(%eax),%eax
80103348:	5d                   	pop    %ebp
80103349:	c3                   	ret    
8010334a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103350:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
80103357:	00 01 00 
8010335a:	8b 50 20             	mov    0x20(%eax),%edx
8010335d:	e9 77 ff ff ff       	jmp    801032d9 <lapicinit+0x69>
80103362:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103369:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80103370 <lapicid>:
80103370:	a1 04 fa 12 80       	mov    0x8012fa04,%eax
80103375:	55                   	push   %ebp
80103376:	89 e5                	mov    %esp,%ebp
80103378:	85 c0                	test   %eax,%eax
8010337a:	74 0c                	je     80103388 <lapicid+0x18>
8010337c:	8b 40 20             	mov    0x20(%eax),%eax
8010337f:	5d                   	pop    %ebp
80103380:	c1 e8 18             	shr    $0x18,%eax
80103383:	c3                   	ret    
80103384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80103388:	31 c0                	xor    %eax,%eax
8010338a:	5d                   	pop    %ebp
8010338b:	c3                   	ret    
8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80103390 <lapiceoi>:
80103390:	a1 04 fa 12 80       	mov    0x8012fa04,%eax
80103395:	55                   	push   %ebp
80103396:	89 e5                	mov    %esp,%ebp
80103398:	85 c0                	test   %eax,%eax
8010339a:	74 0d                	je     801033a9 <lapiceoi+0x19>
8010339c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
801033a3:	00 00 00 
801033a6:	8b 40 20             	mov    0x20(%eax),%eax
801033a9:	5d                   	pop    %ebp
801033aa:	c3                   	ret    
801033ab:	90                   	nop
801033ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801033b0 <microdelay>:
801033b0:	55                   	push   %ebp
801033b1:	89 e5                	mov    %esp,%ebp
801033b3:	5d                   	pop    %ebp
801033b4:	c3                   	ret    
801033b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801033b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801033c0 <lapicstartap>:
801033c0:	55                   	push   %ebp
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801033c1:	ba 70 00 00 00       	mov    $0x70,%edx
801033c6:	b8 0f 00 00 00       	mov    $0xf,%eax
801033cb:	89 e5                	mov    %esp,%ebp
801033cd:	53                   	push   %ebx
801033ce:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801033d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
801033d4:	ee                   	out    %al,(%dx)
801033d5:	ba 71 00 00 00       	mov    $0x71,%edx
801033da:	b8 0a 00 00 00       	mov    $0xa,%eax
801033df:	ee                   	out    %al,(%dx)
801033e0:	31 c0                	xor    %eax,%eax
801033e2:	c1 e3 18             	shl    $0x18,%ebx
801033e5:	66 a3 67 04 00 80    	mov    %ax,0x80000467
801033eb:	89 c8                	mov    %ecx,%eax
801033ed:	c1 e9 0c             	shr    $0xc,%ecx
801033f0:	c1 e8 04             	shr    $0x4,%eax
801033f3:	89 da                	mov    %ebx,%edx
801033f5:	80 cd 06             	or     $0x6,%ch
801033f8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
801033fe:	a1 04 fa 12 80       	mov    0x8012fa04,%eax
80103403:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
80103409:	8b 58 20             	mov    0x20(%eax),%ebx
8010340c:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
80103413:	c5 00 00 
80103416:	8b 58 20             	mov    0x20(%eax),%ebx
80103419:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
80103420:	85 00 00 
80103423:	8b 58 20             	mov    0x20(%eax),%ebx
80103426:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
8010342c:	8b 58 20             	mov    0x20(%eax),%ebx
8010342f:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
80103435:	8b 58 20             	mov    0x20(%eax),%ebx
80103438:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
8010343e:	8b 50 20             	mov    0x20(%eax),%edx
80103441:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
80103447:	8b 40 20             	mov    0x20(%eax),%eax
8010344a:	5b                   	pop    %ebx
8010344b:	5d                   	pop    %ebp
8010344c:	c3                   	ret    
8010344d:	8d 76 00             	lea    0x0(%esi),%esi

80103450 <cmostime>:
80103450:	55                   	push   %ebp
80103451:	ba 70 00 00 00       	mov    $0x70,%edx
80103456:	b8 0b 00 00 00       	mov    $0xb,%eax
8010345b:	89 e5                	mov    %esp,%ebp
8010345d:	57                   	push   %edi
8010345e:	56                   	push   %esi
8010345f:	53                   	push   %ebx
80103460:	83 ec 4c             	sub    $0x4c,%esp
80103463:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103464:	ba 71 00 00 00       	mov    $0x71,%edx
80103469:	ec                   	in     (%dx),%al
8010346a:	83 e0 04             	and    $0x4,%eax
8010346d:	8d 75 d0             	lea    -0x30(%ebp),%esi
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103470:	31 db                	xor    %ebx,%ebx
80103472:	88 45 b7             	mov    %al,-0x49(%ebp)
80103475:	bf 70 00 00 00       	mov    $0x70,%edi
8010347a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103480:	89 d8                	mov    %ebx,%eax
80103482:	89 fa                	mov    %edi,%edx
80103484:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103485:	b9 71 00 00 00       	mov    $0x71,%ecx
8010348a:	89 ca                	mov    %ecx,%edx
8010348c:	ec                   	in     (%dx),%al
8010348d:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103490:	89 fa                	mov    %edi,%edx
80103492:	89 45 b8             	mov    %eax,-0x48(%ebp)
80103495:	b8 02 00 00 00       	mov    $0x2,%eax
8010349a:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010349b:	89 ca                	mov    %ecx,%edx
8010349d:	ec                   	in     (%dx),%al
8010349e:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034a1:	89 fa                	mov    %edi,%edx
801034a3:	89 45 bc             	mov    %eax,-0x44(%ebp)
801034a6:	b8 04 00 00 00       	mov    $0x4,%eax
801034ab:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034ac:	89 ca                	mov    %ecx,%edx
801034ae:	ec                   	in     (%dx),%al
801034af:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034b2:	89 fa                	mov    %edi,%edx
801034b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
801034b7:	b8 07 00 00 00       	mov    $0x7,%eax
801034bc:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034bd:	89 ca                	mov    %ecx,%edx
801034bf:	ec                   	in     (%dx),%al
801034c0:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034c3:	89 fa                	mov    %edi,%edx
801034c5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
801034c8:	b8 08 00 00 00       	mov    $0x8,%eax
801034cd:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034ce:	89 ca                	mov    %ecx,%edx
801034d0:	ec                   	in     (%dx),%al
801034d1:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034d4:	89 fa                	mov    %edi,%edx
801034d6:	89 45 c8             	mov    %eax,-0x38(%ebp)
801034d9:	b8 09 00 00 00       	mov    $0x9,%eax
801034de:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034df:	89 ca                	mov    %ecx,%edx
801034e1:	ec                   	in     (%dx),%al
801034e2:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034e5:	89 fa                	mov    %edi,%edx
801034e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
801034ea:	b8 0a 00 00 00       	mov    $0xa,%eax
801034ef:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034f0:	89 ca                	mov    %ecx,%edx
801034f2:	ec                   	in     (%dx),%al
801034f3:	84 c0                	test   %al,%al
801034f5:	78 89                	js     80103480 <cmostime+0x30>
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801034f7:	89 d8                	mov    %ebx,%eax
801034f9:	89 fa                	mov    %edi,%edx
801034fb:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801034fc:	89 ca                	mov    %ecx,%edx
801034fe:	ec                   	in     (%dx),%al
801034ff:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103502:	89 fa                	mov    %edi,%edx
80103504:	89 45 d0             	mov    %eax,-0x30(%ebp)
80103507:	b8 02 00 00 00       	mov    $0x2,%eax
8010350c:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010350d:	89 ca                	mov    %ecx,%edx
8010350f:	ec                   	in     (%dx),%al
80103510:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103513:	89 fa                	mov    %edi,%edx
80103515:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80103518:	b8 04 00 00 00       	mov    $0x4,%eax
8010351d:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010351e:	89 ca                	mov    %ecx,%edx
80103520:	ec                   	in     (%dx),%al
80103521:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103524:	89 fa                	mov    %edi,%edx
80103526:	89 45 d8             	mov    %eax,-0x28(%ebp)
80103529:	b8 07 00 00 00       	mov    $0x7,%eax
8010352e:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010352f:	89 ca                	mov    %ecx,%edx
80103531:	ec                   	in     (%dx),%al
80103532:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103535:	89 fa                	mov    %edi,%edx
80103537:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010353a:	b8 08 00 00 00       	mov    $0x8,%eax
8010353f:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103540:	89 ca                	mov    %ecx,%edx
80103542:	ec                   	in     (%dx),%al
80103543:	0f b6 c0             	movzbl %al,%eax
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103546:	89 fa                	mov    %edi,%edx
80103548:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010354b:	b8 09 00 00 00       	mov    $0x9,%eax
80103550:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103551:	89 ca                	mov    %ecx,%edx
80103553:	ec                   	in     (%dx),%al
80103554:	0f b6 c0             	movzbl %al,%eax
80103557:	83 ec 04             	sub    $0x4,%esp
8010355a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010355d:	8d 45 b8             	lea    -0x48(%ebp),%eax
80103560:	6a 18                	push   $0x18
80103562:	56                   	push   %esi
80103563:	50                   	push   %eax
80103564:	e8 c7 2e 00 00       	call   80106430 <memcmp>
80103569:	83 c4 10             	add    $0x10,%esp
8010356c:	85 c0                	test   %eax,%eax
8010356e:	0f 85 0c ff ff ff    	jne    80103480 <cmostime+0x30>
80103574:	80 7d b7 00          	cmpb   $0x0,-0x49(%ebp)
80103578:	75 78                	jne    801035f2 <cmostime+0x1a2>
8010357a:	8b 45 b8             	mov    -0x48(%ebp),%eax
8010357d:	89 c2                	mov    %eax,%edx
8010357f:	83 e0 0f             	and    $0xf,%eax
80103582:	c1 ea 04             	shr    $0x4,%edx
80103585:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103588:	8d 04 50             	lea    (%eax,%edx,2),%eax
8010358b:	89 45 b8             	mov    %eax,-0x48(%ebp)
8010358e:	8b 45 bc             	mov    -0x44(%ebp),%eax
80103591:	89 c2                	mov    %eax,%edx
80103593:	83 e0 0f             	and    $0xf,%eax
80103596:	c1 ea 04             	shr    $0x4,%edx
80103599:	8d 14 92             	lea    (%edx,%edx,4),%edx
8010359c:	8d 04 50             	lea    (%eax,%edx,2),%eax
8010359f:	89 45 bc             	mov    %eax,-0x44(%ebp)
801035a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
801035a5:	89 c2                	mov    %eax,%edx
801035a7:	83 e0 0f             	and    $0xf,%eax
801035aa:	c1 ea 04             	shr    $0x4,%edx
801035ad:	8d 14 92             	lea    (%edx,%edx,4),%edx
801035b0:	8d 04 50             	lea    (%eax,%edx,2),%eax
801035b3:	89 45 c0             	mov    %eax,-0x40(%ebp)
801035b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
801035b9:	89 c2                	mov    %eax,%edx
801035bb:	83 e0 0f             	and    $0xf,%eax
801035be:	c1 ea 04             	shr    $0x4,%edx
801035c1:	8d 14 92             	lea    (%edx,%edx,4),%edx
801035c4:	8d 04 50             	lea    (%eax,%edx,2),%eax
801035c7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
801035ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
801035cd:	89 c2                	mov    %eax,%edx
801035cf:	83 e0 0f             	and    $0xf,%eax
801035d2:	c1 ea 04             	shr    $0x4,%edx
801035d5:	8d 14 92             	lea    (%edx,%edx,4),%edx
801035d8:	8d 04 50             	lea    (%eax,%edx,2),%eax
801035db:	89 45 c8             	mov    %eax,-0x38(%ebp)
801035de:	8b 45 cc             	mov    -0x34(%ebp),%eax
801035e1:	89 c2                	mov    %eax,%edx
801035e3:	83 e0 0f             	and    $0xf,%eax
801035e6:	c1 ea 04             	shr    $0x4,%edx
801035e9:	8d 14 92             	lea    (%edx,%edx,4),%edx
801035ec:	8d 04 50             	lea    (%eax,%edx,2),%eax
801035ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
801035f2:	8b 75 08             	mov    0x8(%ebp),%esi
801035f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
801035f8:	89 06                	mov    %eax,(%esi)
801035fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
801035fd:	89 46 04             	mov    %eax,0x4(%esi)
80103600:	8b 45 c0             	mov    -0x40(%ebp),%eax
80103603:	89 46 08             	mov    %eax,0x8(%esi)
80103606:	8b 45 c4             	mov    -0x3c(%ebp),%eax
80103609:	89 46 0c             	mov    %eax,0xc(%esi)
8010360c:	8b 45 c8             	mov    -0x38(%ebp),%eax
8010360f:	89 46 10             	mov    %eax,0x10(%esi)
80103612:	8b 45 cc             	mov    -0x34(%ebp),%eax
80103615:	89 46 14             	mov    %eax,0x14(%esi)
80103618:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
8010361f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103622:	5b                   	pop    %ebx
80103623:	5e                   	pop    %esi
80103624:	5f                   	pop    %edi
80103625:	5d                   	pop    %ebp
80103626:	c3                   	ret    
80103627:	66 90                	xchg   %ax,%ax
80103629:	66 90                	xchg   %ax,%ax
8010362b:	66 90                	xchg   %ax,%ax
8010362d:	66 90                	xchg   %ax,%ax
8010362f:	90                   	nop

80103630 <write_head>:
80103630:	55                   	push   %ebp
80103631:	89 e5                	mov    %esp,%ebp
80103633:	53                   	push   %ebx
80103634:	83 ec 0c             	sub    $0xc,%esp
80103637:	ff 35 54 fa 12 80    	pushl  0x8012fa54
8010363d:	ff 35 64 fa 12 80    	pushl  0x8012fa64
80103643:	e8 98 cb ff ff       	call   801001e0 <bread>
80103648:	8b 0d 68 fa 12 80    	mov    0x8012fa68,%ecx
8010364e:	83 c4 10             	add    $0x10,%esp
80103651:	89 c3                	mov    %eax,%ebx
80103653:	85 c9                	test   %ecx,%ecx
80103655:	89 48 60             	mov    %ecx,0x60(%eax)
80103658:	7e 1f                	jle    80103679 <write_head+0x49>
8010365a:	8d 04 8d 00 00 00 00 	lea    0x0(,%ecx,4),%eax
80103661:	31 d2                	xor    %edx,%edx
80103663:	90                   	nop
80103664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80103668:	8b 8a 6c fa 12 80    	mov    -0x7fed0594(%edx),%ecx
8010366e:	89 4c 13 64          	mov    %ecx,0x64(%ebx,%edx,1)
80103672:	83 c2 04             	add    $0x4,%edx
80103675:	39 c2                	cmp    %eax,%edx
80103677:	75 ef                	jne    80103668 <write_head+0x38>
80103679:	83 ec 0c             	sub    $0xc,%esp
8010367c:	53                   	push   %ebx
8010367d:	e8 7e cc ff ff       	call   80100300 <bwrite>
80103682:	89 1c 24             	mov    %ebx,(%esp)
80103685:	e8 b6 cc ff ff       	call   80100340 <brelse>
8010368a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010368d:	c9                   	leave  
8010368e:	c3                   	ret    
8010368f:	90                   	nop

80103690 <install_trans>:
80103690:	a1 68 fa 12 80       	mov    0x8012fa68,%eax
80103695:	85 c0                	test   %eax,%eax
80103697:	0f 8e 98 00 00 00    	jle    80103735 <install_trans+0xa5>
8010369d:	55                   	push   %ebp
8010369e:	89 e5                	mov    %esp,%ebp
801036a0:	57                   	push   %edi
801036a1:	56                   	push   %esi
801036a2:	53                   	push   %ebx
801036a3:	31 f6                	xor    %esi,%esi
801036a5:	83 ec 0c             	sub    $0xc,%esp
801036a8:	90                   	nop
801036a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801036b0:	a1 54 fa 12 80       	mov    0x8012fa54,%eax
801036b5:	83 ec 08             	sub    $0x8,%esp
801036b8:	01 f0                	add    %esi,%eax
801036ba:	83 c0 01             	add    $0x1,%eax
801036bd:	50                   	push   %eax
801036be:	ff 35 64 fa 12 80    	pushl  0x8012fa64
801036c4:	e8 17 cb ff ff       	call   801001e0 <bread>
801036c9:	89 c7                	mov    %eax,%edi
801036cb:	58                   	pop    %eax
801036cc:	5a                   	pop    %edx
801036cd:	ff 34 b5 6c fa 12 80 	pushl  -0x7fed0594(,%esi,4)
801036d4:	ff 35 64 fa 12 80    	pushl  0x8012fa64
801036da:	83 c6 01             	add    $0x1,%esi
801036dd:	e8 fe ca ff ff       	call   801001e0 <bread>
801036e2:	89 c3                	mov    %eax,%ebx
801036e4:	8d 47 60             	lea    0x60(%edi),%eax
801036e7:	83 c4 0c             	add    $0xc,%esp
801036ea:	68 00 04 00 00       	push   $0x400
801036ef:	50                   	push   %eax
801036f0:	8d 43 60             	lea    0x60(%ebx),%eax
801036f3:	50                   	push   %eax
801036f4:	e8 97 2d 00 00       	call   80106490 <memmove>
801036f9:	89 1c 24             	mov    %ebx,(%esp)
801036fc:	e8 ff cb ff ff       	call   80100300 <bwrite>
80103701:	59                   	pop    %ecx
80103702:	ff 73 5c             	pushl  0x5c(%ebx)
80103705:	e8 36 ac 00 00       	call   8010e340 <cgroup_mem_stat_file_dirty_decr>
8010370a:	58                   	pop    %eax
8010370b:	ff 73 5c             	pushl  0x5c(%ebx)
8010370e:	e8 5d ac 00 00       	call   8010e370 <cgroup_mem_stat_file_dirty_aggregated_incr>
80103713:	89 3c 24             	mov    %edi,(%esp)
80103716:	e8 25 cc ff ff       	call   80100340 <brelse>
8010371b:	89 1c 24             	mov    %ebx,(%esp)
8010371e:	e8 1d cc ff ff       	call   80100340 <brelse>
80103723:	83 c4 10             	add    $0x10,%esp
80103726:	39 35 68 fa 12 80    	cmp    %esi,0x8012fa68
8010372c:	7f 82                	jg     801036b0 <install_trans+0x20>
8010372e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103731:	5b                   	pop    %ebx
80103732:	5e                   	pop    %esi
80103733:	5f                   	pop    %edi
80103734:	5d                   	pop    %ebp
80103735:	f3 c3                	repz ret 
80103737:	89 f6                	mov    %esi,%esi
80103739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80103740 <initlog>:
80103740:	55                   	push   %ebp
80103741:	89 e5                	mov    %esp,%ebp
80103743:	53                   	push   %ebx
80103744:	83 ec 2c             	sub    $0x2c,%esp
80103747:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010374a:	68 80 ec 10 80       	push   $0x8010ec80
8010374f:	68 20 fa 12 80       	push   $0x8012fa20
80103754:	e8 17 2a 00 00       	call   80106170 <initlock>
80103759:	58                   	pop    %eax
8010375a:	8d 45 dc             	lea    -0x24(%ebp),%eax
8010375d:	5a                   	pop    %edx
8010375e:	50                   	push   %eax
8010375f:	53                   	push   %ebx
80103760:	e8 5b e4 ff ff       	call   80101bc0 <readsb>
80103765:	8b 55 e8             	mov    -0x18(%ebp),%edx
80103768:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010376b:	59                   	pop    %ecx
8010376c:	89 1d 64 fa 12 80    	mov    %ebx,0x8012fa64
80103772:	89 15 58 fa 12 80    	mov    %edx,0x8012fa58
80103778:	a3 54 fa 12 80       	mov    %eax,0x8012fa54
8010377d:	5a                   	pop    %edx
8010377e:	50                   	push   %eax
8010377f:	53                   	push   %ebx
80103780:	e8 5b ca ff ff       	call   801001e0 <bread>
80103785:	8b 48 60             	mov    0x60(%eax),%ecx
80103788:	83 c4 10             	add    $0x10,%esp
8010378b:	85 c9                	test   %ecx,%ecx
8010378d:	89 0d 68 fa 12 80    	mov    %ecx,0x8012fa68
80103793:	7e 1c                	jle    801037b1 <initlog+0x71>
80103795:	8d 1c 8d 00 00 00 00 	lea    0x0(,%ecx,4),%ebx
8010379c:	31 d2                	xor    %edx,%edx
8010379e:	66 90                	xchg   %ax,%ax
801037a0:	8b 4c 10 64          	mov    0x64(%eax,%edx,1),%ecx
801037a4:	83 c2 04             	add    $0x4,%edx
801037a7:	89 8a 68 fa 12 80    	mov    %ecx,-0x7fed0598(%edx)
801037ad:	39 da                	cmp    %ebx,%edx
801037af:	75 ef                	jne    801037a0 <initlog+0x60>
801037b1:	83 ec 0c             	sub    $0xc,%esp
801037b4:	50                   	push   %eax
801037b5:	e8 86 cb ff ff       	call   80100340 <brelse>
801037ba:	e8 d1 fe ff ff       	call   80103690 <install_trans>
801037bf:	c7 05 68 fa 12 80 00 	movl   $0x0,0x8012fa68
801037c6:	00 00 00 
801037c9:	e8 62 fe ff ff       	call   80103630 <write_head>
801037ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801037d1:	c9                   	leave  
801037d2:	c3                   	ret    
801037d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801037d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801037e0 <begin_op>:
801037e0:	55                   	push   %ebp
801037e1:	89 e5                	mov    %esp,%ebp
801037e3:	83 ec 14             	sub    $0x14,%esp
801037e6:	68 20 fa 12 80       	push   $0x8012fa20
801037eb:	e8 80 2a 00 00       	call   80106270 <acquire>
801037f0:	83 c4 10             	add    $0x10,%esp
801037f3:	eb 18                	jmp    8010380d <begin_op+0x2d>
801037f5:	8d 76 00             	lea    0x0(%esi),%esi
801037f8:	83 ec 08             	sub    $0x8,%esp
801037fb:	68 20 fa 12 80       	push   $0x8012fa20
80103800:	68 20 fa 12 80       	push   $0x8012fa20
80103805:	e8 17 24 00 00       	call   80105c21 <sleep>
8010380a:	83 c4 10             	add    $0x10,%esp
8010380d:	a1 60 fa 12 80       	mov    0x8012fa60,%eax
80103812:	85 c0                	test   %eax,%eax
80103814:	75 e2                	jne    801037f8 <begin_op+0x18>
80103816:	a1 5c fa 12 80       	mov    0x8012fa5c,%eax
8010381b:	8b 15 68 fa 12 80    	mov    0x8012fa68,%edx
80103821:	83 c0 01             	add    $0x1,%eax
80103824:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
80103827:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
8010382a:	83 fa 1e             	cmp    $0x1e,%edx
8010382d:	7f c9                	jg     801037f8 <begin_op+0x18>
8010382f:	83 ec 0c             	sub    $0xc,%esp
80103832:	a3 5c fa 12 80       	mov    %eax,0x8012fa5c
80103837:	68 20 fa 12 80       	push   $0x8012fa20
8010383c:	e8 4f 2b 00 00       	call   80106390 <release>
80103841:	83 c4 10             	add    $0x10,%esp
80103844:	c9                   	leave  
80103845:	c3                   	ret    
80103846:	8d 76 00             	lea    0x0(%esi),%esi
80103849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80103850 <end_op>:
80103850:	55                   	push   %ebp
80103851:	89 e5                	mov    %esp,%ebp
80103853:	57                   	push   %edi
80103854:	56                   	push   %esi
80103855:	53                   	push   %ebx
80103856:	83 ec 18             	sub    $0x18,%esp
80103859:	68 20 fa 12 80       	push   $0x8012fa20
8010385e:	e8 0d 2a 00 00       	call   80106270 <acquire>
80103863:	a1 5c fa 12 80       	mov    0x8012fa5c,%eax
80103868:	8b 1d 60 fa 12 80    	mov    0x8012fa60,%ebx
8010386e:	83 c4 10             	add    $0x10,%esp
80103871:	83 e8 01             	sub    $0x1,%eax
80103874:	85 db                	test   %ebx,%ebx
80103876:	a3 5c fa 12 80       	mov    %eax,0x8012fa5c
8010387b:	0f 85 23 01 00 00    	jne    801039a4 <end_op+0x154>
80103881:	85 c0                	test   %eax,%eax
80103883:	0f 85 f7 00 00 00    	jne    80103980 <end_op+0x130>
80103889:	83 ec 0c             	sub    $0xc,%esp
8010388c:	c7 05 60 fa 12 80 01 	movl   $0x1,0x8012fa60
80103893:	00 00 00 
80103896:	31 db                	xor    %ebx,%ebx
80103898:	68 20 fa 12 80       	push   $0x8012fa20
8010389d:	e8 ee 2a 00 00       	call   80106390 <release>
801038a2:	8b 0d 68 fa 12 80    	mov    0x8012fa68,%ecx
801038a8:	83 c4 10             	add    $0x10,%esp
801038ab:	85 c9                	test   %ecx,%ecx
801038ad:	0f 8e 8a 00 00 00    	jle    8010393d <end_op+0xed>
801038b3:	90                   	nop
801038b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801038b8:	a1 54 fa 12 80       	mov    0x8012fa54,%eax
801038bd:	83 ec 08             	sub    $0x8,%esp
801038c0:	01 d8                	add    %ebx,%eax
801038c2:	83 c0 01             	add    $0x1,%eax
801038c5:	50                   	push   %eax
801038c6:	ff 35 64 fa 12 80    	pushl  0x8012fa64
801038cc:	e8 0f c9 ff ff       	call   801001e0 <bread>
801038d1:	89 c6                	mov    %eax,%esi
801038d3:	58                   	pop    %eax
801038d4:	5a                   	pop    %edx
801038d5:	ff 34 9d 6c fa 12 80 	pushl  -0x7fed0594(,%ebx,4)
801038dc:	ff 35 64 fa 12 80    	pushl  0x8012fa64
801038e2:	83 c3 01             	add    $0x1,%ebx
801038e5:	e8 f6 c8 ff ff       	call   801001e0 <bread>
801038ea:	89 c7                	mov    %eax,%edi
801038ec:	8d 40 60             	lea    0x60(%eax),%eax
801038ef:	83 c4 0c             	add    $0xc,%esp
801038f2:	68 00 04 00 00       	push   $0x400
801038f7:	50                   	push   %eax
801038f8:	8d 46 60             	lea    0x60(%esi),%eax
801038fb:	50                   	push   %eax
801038fc:	e8 8f 2b 00 00       	call   80106490 <memmove>
80103901:	89 34 24             	mov    %esi,(%esp)
80103904:	e8 f7 c9 ff ff       	call   80100300 <bwrite>
80103909:	89 3c 24             	mov    %edi,(%esp)
8010390c:	e8 2f ca ff ff       	call   80100340 <brelse>
80103911:	89 34 24             	mov    %esi,(%esp)
80103914:	e8 27 ca ff ff       	call   80100340 <brelse>
80103919:	83 c4 10             	add    $0x10,%esp
8010391c:	3b 1d 68 fa 12 80    	cmp    0x8012fa68,%ebx
80103922:	7c 94                	jl     801038b8 <end_op+0x68>
80103924:	e8 07 fd ff ff       	call   80103630 <write_head>
80103929:	e8 62 fd ff ff       	call   80103690 <install_trans>
8010392e:	c7 05 68 fa 12 80 00 	movl   $0x0,0x8012fa68
80103935:	00 00 00 
80103938:	e8 f3 fc ff ff       	call   80103630 <write_head>
8010393d:	83 ec 0c             	sub    $0xc,%esp
80103940:	68 20 fa 12 80       	push   $0x8012fa20
80103945:	e8 26 29 00 00       	call   80106270 <acquire>
8010394a:	c7 04 24 20 fa 12 80 	movl   $0x8012fa20,(%esp)
80103951:	c7 05 60 fa 12 80 00 	movl   $0x0,0x8012fa60
80103958:	00 00 00 
8010395b:	e8 8e 24 00 00       	call   80105dee <wakeup>
80103960:	c7 04 24 20 fa 12 80 	movl   $0x8012fa20,(%esp)
80103967:	e8 24 2a 00 00       	call   80106390 <release>
8010396c:	83 c4 10             	add    $0x10,%esp
8010396f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103972:	5b                   	pop    %ebx
80103973:	5e                   	pop    %esi
80103974:	5f                   	pop    %edi
80103975:	5d                   	pop    %ebp
80103976:	c3                   	ret    
80103977:	89 f6                	mov    %esi,%esi
80103979:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80103980:	83 ec 0c             	sub    $0xc,%esp
80103983:	68 20 fa 12 80       	push   $0x8012fa20
80103988:	e8 61 24 00 00       	call   80105dee <wakeup>
8010398d:	c7 04 24 20 fa 12 80 	movl   $0x8012fa20,(%esp)
80103994:	e8 f7 29 00 00       	call   80106390 <release>
80103999:	83 c4 10             	add    $0x10,%esp
8010399c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010399f:	5b                   	pop    %ebx
801039a0:	5e                   	pop    %esi
801039a1:	5f                   	pop    %edi
801039a2:	5d                   	pop    %ebp
801039a3:	c3                   	ret    
801039a4:	83 ec 0c             	sub    $0xc,%esp
801039a7:	68 84 ec 10 80       	push   $0x8010ec84
801039ac:	e8 1f ca ff ff       	call   801003d0 <panic>
801039b1:	eb 0d                	jmp    801039c0 <log_write>
801039b3:	90                   	nop
801039b4:	90                   	nop
801039b5:	90                   	nop
801039b6:	90                   	nop
801039b7:	90                   	nop
801039b8:	90                   	nop
801039b9:	90                   	nop
801039ba:	90                   	nop
801039bb:	90                   	nop
801039bc:	90                   	nop
801039bd:	90                   	nop
801039be:	90                   	nop
801039bf:	90                   	nop

801039c0 <log_write>:
801039c0:	55                   	push   %ebp
801039c1:	89 e5                	mov    %esp,%ebp
801039c3:	53                   	push   %ebx
801039c4:	83 ec 04             	sub    $0x4,%esp
801039c7:	8b 15 68 fa 12 80    	mov    0x8012fa68,%edx
801039cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
801039d0:	83 fa 1d             	cmp    $0x1d,%edx
801039d3:	0f 8f d7 00 00 00    	jg     80103ab0 <log_write+0xf0>
801039d9:	a1 58 fa 12 80       	mov    0x8012fa58,%eax
801039de:	83 e8 01             	sub    $0x1,%eax
801039e1:	39 c2                	cmp    %eax,%edx
801039e3:	0f 8d c7 00 00 00    	jge    80103ab0 <log_write+0xf0>
801039e9:	a1 5c fa 12 80       	mov    0x8012fa5c,%eax
801039ee:	85 c0                	test   %eax,%eax
801039f0:	0f 8e c7 00 00 00    	jle    80103abd <log_write+0xfd>
801039f6:	66 83 7b 06 07       	cmpw   $0x7,0x6(%ebx)
801039fb:	0f 84 8f 00 00 00    	je     80103a90 <log_write+0xd0>
80103a01:	83 ec 0c             	sub    $0xc,%esp
80103a04:	68 20 fa 12 80       	push   $0x8012fa20
80103a09:	e8 62 28 00 00       	call   80106270 <acquire>
80103a0e:	8b 15 68 fa 12 80    	mov    0x8012fa68,%edx
80103a14:	83 c4 10             	add    $0x10,%esp
80103a17:	83 fa 00             	cmp    $0x0,%edx
80103a1a:	0f 8e 7c 00 00 00    	jle    80103a9c <log_write+0xdc>
80103a20:	8b 4b 08             	mov    0x8(%ebx),%ecx
80103a23:	31 c0                	xor    %eax,%eax
80103a25:	3b 0d 6c fa 12 80    	cmp    0x8012fa6c,%ecx
80103a2b:	75 0c                	jne    80103a39 <log_write+0x79>
80103a2d:	eb 51                	jmp    80103a80 <log_write+0xc0>
80103a2f:	90                   	nop
80103a30:	39 0c 85 6c fa 12 80 	cmp    %ecx,-0x7fed0594(,%eax,4)
80103a37:	74 47                	je     80103a80 <log_write+0xc0>
80103a39:	83 c0 01             	add    $0x1,%eax
80103a3c:	39 d0                	cmp    %edx,%eax
80103a3e:	75 f0                	jne    80103a30 <log_write+0x70>
80103a40:	89 0c 95 6c fa 12 80 	mov    %ecx,-0x7fed0594(,%edx,4)
80103a47:	83 c2 01             	add    $0x1,%edx
80103a4a:	89 15 68 fa 12 80    	mov    %edx,0x8012fa68
80103a50:	e8 df 25 00 00       	call   80106034 <proc_get_cgroup>
80103a55:	83 ec 0c             	sub    $0xc,%esp
80103a58:	89 43 5c             	mov    %eax,0x5c(%ebx)
80103a5b:	50                   	push   %eax
80103a5c:	e8 af a8 00 00       	call   8010e310 <cgroup_mem_stat_file_dirty_incr>
80103a61:	83 c4 10             	add    $0x10,%esp
80103a64:	83 0b 04             	orl    $0x4,(%ebx)
80103a67:	c7 45 08 20 fa 12 80 	movl   $0x8012fa20,0x8(%ebp)
80103a6e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103a71:	c9                   	leave  
80103a72:	e9 19 29 00 00       	jmp    80106390 <release>
80103a77:	89 f6                	mov    %esi,%esi
80103a79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80103a80:	89 0c 85 6c fa 12 80 	mov    %ecx,-0x7fed0594(,%eax,4)
80103a87:	eb db                	jmp    80103a64 <log_write+0xa4>
80103a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103a90:	89 5d 08             	mov    %ebx,0x8(%ebp)
80103a93:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103a96:	c9                   	leave  
80103a97:	e9 64 c8 ff ff       	jmp    80100300 <bwrite>
80103a9c:	8b 43 08             	mov    0x8(%ebx),%eax
80103a9f:	a3 6c fa 12 80       	mov    %eax,0x8012fa6c
80103aa4:	75 be                	jne    80103a64 <log_write+0xa4>
80103aa6:	eb 9f                	jmp    80103a47 <log_write+0x87>
80103aa8:	90                   	nop
80103aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103ab0:	83 ec 0c             	sub    $0xc,%esp
80103ab3:	68 93 ec 10 80       	push   $0x8010ec93
80103ab8:	e8 13 c9 ff ff       	call   801003d0 <panic>
80103abd:	83 ec 0c             	sub    $0xc,%esp
80103ac0:	68 a9 ec 10 80       	push   $0x8010eca9
80103ac5:	e8 06 c9 ff ff       	call   801003d0 <panic>
80103aca:	66 90                	xchg   %ax,%ax
80103acc:	66 90                	xchg   %ax,%ax
80103ace:	66 90                	xchg   %ax,%ax

80103ad0 <mpmain>:
80103ad0:	55                   	push   %ebp
80103ad1:	89 e5                	mov    %esp,%ebp
80103ad3:	53                   	push   %ebx
80103ad4:	83 ec 04             	sub    $0x4,%esp
80103ad7:	e8 6c 17 00 00       	call   80105248 <cpuid>
80103adc:	89 c3                	mov    %eax,%ebx
80103ade:	e8 65 17 00 00       	call   80105248 <cpuid>
80103ae3:	83 ec 04             	sub    $0x4,%esp
80103ae6:	53                   	push   %ebx
80103ae7:	50                   	push   %eax
80103ae8:	68 c4 ec 10 80       	push   $0x8010ecc4
80103aed:	e8 6e cb ff ff       	call   80100660 <cprintf>
80103af2:	e8 09 46 00 00       	call   80108100 <idtinit>
80103af7:	e8 f0 16 00 00       	call   801051ec <mycpu>
80103afc:	89 c2                	mov    %eax,%edx
xchg(volatile uint *addr, uint newval)
{
  uint result;

  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80103afe:	b8 01 00 00 00       	mov    $0x1,%eax
80103b03:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
80103b0a:	e8 66 1d 00 00       	call   80105875 <scheduler>
80103b0f:	90                   	nop

80103b10 <mpenter>:
80103b10:	55                   	push   %ebp
80103b11:	89 e5                	mov    %esp,%ebp
80103b13:	83 ec 08             	sub    $0x8,%esp
80103b16:	e8 55 57 00 00       	call   80109270 <switchkvm>
80103b1b:	e8 50 56 00 00       	call   80109170 <seginit>
80103b20:	e8 4b f7 ff ff       	call   80103270 <lapicinit>
80103b25:	e8 a6 ff ff ff       	call   80103ad0 <mpmain>
80103b2a:	66 90                	xchg   %ax,%ax
80103b2c:	66 90                	xchg   %ax,%ax
80103b2e:	66 90                	xchg   %ax,%ax

80103b30 <main>:
80103b30:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80103b34:	83 e4 f0             	and    $0xfffffff0,%esp
80103b37:	ff 71 fc             	pushl  -0x4(%ecx)
80103b3a:	55                   	push   %ebp
80103b3b:	89 e5                	mov    %esp,%ebp
80103b3d:	53                   	push   %ebx
80103b3e:	51                   	push   %ecx
80103b3f:	bb 00 05 13 80       	mov    $0x80130500,%ebx
80103b44:	83 ec 08             	sub    $0x8,%esp
80103b47:	68 00 00 40 80       	push   $0x80400000
80103b4c:	68 54 a6 14 80       	push   $0x8014a654
80103b51:	e8 9a f2 ff ff       	call   80102df0 <kinit1>
80103b56:	e8 95 5c 00 00       	call   801097f0 <kvmalloc>
80103b5b:	e8 50 0c 00 00       	call   801047b0 <mpinit>
80103b60:	e8 0b f7 ff ff       	call   80103270 <lapicinit>
80103b65:	e8 06 56 00 00       	call   80109170 <seginit>
80103b6a:	e8 01 11 00 00       	call   80104c70 <picinit>
80103b6f:	e8 9c f0 ff ff       	call   80102c10 <ioapicinit>
80103b74:	e8 b7 d0 ff ff       	call   80100c30 <consoleinit>
80103b79:	e8 12 d1 ff ff       	call   80100c90 <ttyinit>
80103b7e:	e8 bd 48 00 00       	call   80108440 <uartinit>
80103b83:	e8 4a 16 00 00       	call   801051d2 <pinit>
80103b88:	e8 d3 44 00 00       	call   80108060 <tvinit>
80103b8d:	e8 ae c4 ff ff       	call   80100040 <binit>
80103b92:	e8 a9 d9 ff ff       	call   80101540 <fileinit>
80103b97:	e8 54 ee ff ff       	call   801029f0 <ideinit>
80103b9c:	83 c4 0c             	add    $0xc,%esp
80103b9f:	68 8a 00 00 00       	push   $0x8a
80103ba4:	68 8c 04 12 80       	push   $0x8012048c
80103ba9:	68 00 70 00 80       	push   $0x80007000
80103bae:	e8 dd 28 00 00       	call   80106490 <memmove>
80103bb3:	69 05 80 0a 13 80 b0 	imul   $0xb0,0x80130a80,%eax
80103bba:	00 00 00 
80103bbd:	83 c4 10             	add    $0x10,%esp
80103bc0:	05 00 05 13 80       	add    $0x80130500,%eax
80103bc5:	39 d8                	cmp    %ebx,%eax
80103bc7:	76 6a                	jbe    80103c33 <main+0x103>
80103bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80103bd0:	e8 17 16 00 00       	call   801051ec <mycpu>
80103bd5:	39 d8                	cmp    %ebx,%eax
80103bd7:	74 41                	je     80103c1a <main+0xea>
80103bd9:	e8 f2 f3 ff ff       	call   80102fd0 <kalloc>
80103bde:	05 00 10 00 00       	add    $0x1000,%eax
80103be3:	c7 05 f8 6f 00 80 10 	movl   $0x80103b10,0x80006ff8
80103bea:	3b 10 80 
80103bed:	c7 05 f4 6f 00 80 00 	movl   $0x11f000,0x80006ff4
80103bf4:	f0 11 00 
80103bf7:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
80103bfc:	0f b6 03             	movzbl (%ebx),%eax
80103bff:	83 ec 08             	sub    $0x8,%esp
80103c02:	68 00 70 00 00       	push   $0x7000
80103c07:	50                   	push   %eax
80103c08:	e8 b3 f7 ff ff       	call   801033c0 <lapicstartap>
80103c0d:	83 c4 10             	add    $0x10,%esp
80103c10:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
80103c16:	85 c0                	test   %eax,%eax
80103c18:	74 f6                	je     80103c10 <main+0xe0>
80103c1a:	69 05 80 0a 13 80 b0 	imul   $0xb0,0x80130a80,%eax
80103c21:	00 00 00 
80103c24:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
80103c2a:	05 00 05 13 80       	add    $0x80130500,%eax
80103c2f:	39 c3                	cmp    %eax,%ebx
80103c31:	72 9d                	jb     80103bd0 <main+0xa0>
80103c33:	83 ec 08             	sub    $0x8,%esp
80103c36:	68 00 00 00 8e       	push   $0x8e000000
80103c3b:	68 00 00 40 80       	push   $0x80400000
80103c40:	e8 1b f2 ff ff       	call   80102e60 <kinit2>
80103c45:	e8 16 90 00 00       	call   8010cc60 <cginit>
80103c4a:	e8 5c 16 00 00       	call   801052ab <userinit>
80103c4f:	e8 ac d1 ff ff       	call   80100e00 <devinit>
80103c54:	e8 76 0d 00 00       	call   801049cf <namespaceinit>
80103c59:	e8 72 fe ff ff       	call   80103ad0 <mpmain>

80103c5e <allocmntlist>:
  release(&mount_holder.mnt_list_lock);
}

static struct mount_list*
allocmntlist(void)
{
80103c5e:	55                   	push   %ebp
80103c5f:	89 e5                	mov    %esp,%ebp
80103c61:	53                   	push   %ebx
80103c62:	83 ec 10             	sub    $0x10,%esp
  acquire(&mount_holder.mnt_list_lock);
80103c65:	68 00 fb 12 80       	push   $0x8012fb00
80103c6a:	e8 01 26 00 00       	call   80106270 <acquire>
  int i;
  // Find empty mount struct
  for (i = 0; i < NMOUNT && mount_holder.mnt_list[i].mnt.ref != 0; i++);
80103c6f:	83 c4 10             	add    $0x10,%esp
80103c72:	ba 00 00 00 00       	mov    $0x0,%edx
80103c77:	eb 03                	jmp    80103c7c <allocmntlist+0x1e>
80103c79:	83 c2 01             	add    $0x1,%edx
80103c7c:	83 fa 09             	cmp    $0x9,%edx
80103c7f:	7f 13                	jg     80103c94 <allocmntlist+0x36>
80103c81:	8d 0c 92             	lea    (%edx,%edx,4),%ecx
80103c84:	8d 04 8d 00 00 00 00 	lea    0x0(,%ecx,4),%eax
80103c8b:	83 b8 3c fb 12 80 00 	cmpl   $0x0,-0x7fed04c4(%eax)
80103c92:	75 e5                	jne    80103c79 <allocmntlist+0x1b>

  if (i == NMOUNT) {
80103c94:	83 fa 0a             	cmp    $0xa,%edx
80103c97:	75 0d                	jne    80103ca6 <allocmntlist+0x48>
    // error - no available mount memory.
    panic("out of mount_list objects");
80103c99:	83 ec 0c             	sub    $0xc,%esp
80103c9c:	68 d8 ec 10 80       	push   $0x8010ecd8
80103ca1:	e8 2a c7 ff ff       	call   801003d0 <panic>
  }

  struct mount_list *newmountentry = &mount_holder.mnt_list[i];
80103ca6:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
80103cad:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
80103cb0:	8d 1c 8d 00 00 00 00 	lea    0x0(,%ecx,4),%ebx
80103cb7:	89 d9                	mov    %ebx,%ecx
80103cb9:	81 c3 34 fb 12 80    	add    $0x8012fb34,%ebx
  newmountentry->mnt.ref = 1;
80103cbf:	c7 81 3c fb 12 80 01 	movl   $0x1,-0x7fed04c4(%ecx)
80103cc6:	00 00 00 

  release(&mount_holder.mnt_list_lock);
80103cc9:	83 ec 0c             	sub    $0xc,%esp
80103ccc:	68 00 fb 12 80       	push   $0x8012fb00
80103cd1:	e8 ba 26 00 00       	call   80106390 <release>

  return newmountentry;
}
80103cd6:	89 d8                	mov    %ebx,%eax
80103cd8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103cdb:	c9                   	leave  
80103cdc:	c3                   	ret    

80103cdd <shallowcopyactivemounts>:
 //cprintf("All unmounted\n");
}*/

static struct mount_list*
shallowcopyactivemounts(struct mount **newcwdmount)
{
80103cdd:	55                   	push   %ebp
80103cde:	89 e5                	mov    %esp,%ebp
80103ce0:	57                   	push   %edi
80103ce1:	56                   	push   %esi
80103ce2:	53                   	push   %ebx
80103ce3:	83 ec 1c             	sub    $0x1c,%esp
80103ce6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  struct mount_list *head = 0;
  struct mount_list *entry = myproc()->nsproxy->mount_ns->list_mounts;
80103ce9:	e8 75 15 00 00       	call   80105263 <myproc>
80103cee:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103cf4:	8b 40 04             	mov    0x4(%eax),%eax
80103cf7:	8b 70 3c             	mov    0x3c(%eax),%esi
  struct mount_list *prev = 0;
80103cfa:	bf 00 00 00 00       	mov    $0x0,%edi
}*/

static struct mount_list*
shallowcopyactivemounts(struct mount **newcwdmount)
{
  struct mount_list *head = 0;
80103cff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  struct mount_list *entry = myproc()->nsproxy->mount_ns->list_mounts;
  struct mount_list *prev = 0;
  while (entry != 0) {
80103d06:	eb 5a                	jmp    80103d62 <shallowcopyactivemounts+0x85>
    struct mount_list* newentry = allocmntlist();
80103d08:	e8 51 ff ff ff       	call   80103c5e <allocmntlist>
80103d0d:	89 c3                	mov    %eax,%ebx
    if (head == 0) {
80103d0f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
80103d13:	75 03                	jne    80103d18 <shallowcopyactivemounts+0x3b>
      head = newentry;
80103d15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    newentry->mnt.ref = 1;
80103d18:	c7 43 08 01 00 00 00 	movl   $0x1,0x8(%ebx)
    newentry->mnt.mountpoint = idup(entry->mnt.mountpoint);
80103d1f:	83 ec 0c             	sub    $0xc,%esp
80103d22:	ff 76 04             	pushl  0x4(%esi)
80103d25:	e8 76 e1 ff ff       	call   80101ea0 <idup>
80103d2a:	89 43 04             	mov    %eax,0x4(%ebx)
    newentry->mnt.parent = 0;
80103d2d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
    newentry->mnt.dev=entry->mnt.dev;
80103d33:	8b 46 0c             	mov    0xc(%esi),%eax
80103d36:	89 43 0c             	mov    %eax,0xc(%ebx)
    deviceget(newentry->mnt.dev);
80103d39:	89 04 24             	mov    %eax,(%esp)
80103d3c:	e8 cf d1 ff ff       	call   80100f10 <deviceget>
    if (prev != 0) {
80103d41:	83 c4 10             	add    $0x10,%esp
80103d44:	85 ff                	test   %edi,%edi
80103d46:	74 03                	je     80103d4b <shallowcopyactivemounts+0x6e>
      prev->next = newentry;
80103d48:	89 5f 10             	mov    %ebx,0x10(%edi)
    }

    if (myproc()->cwdmount == &entry->mnt) {
80103d4b:	e8 13 15 00 00       	call   80105263 <myproc>
80103d50:	39 b0 8c 00 00 00    	cmp    %esi,0x8c(%eax)
80103d56:	75 05                	jne    80103d5d <shallowcopyactivemounts+0x80>
      *newcwdmount = &newentry->mnt;
80103d58:	8b 45 e0             	mov    -0x20(%ebp),%eax
80103d5b:	89 18                	mov    %ebx,(%eax)
    }

    prev = newentry;
    entry = entry->next;
80103d5d:	8b 76 10             	mov    0x10(%esi),%esi

    if (myproc()->cwdmount == &entry->mnt) {
      *newcwdmount = &newentry->mnt;
    }

    prev = newentry;
80103d60:	89 df                	mov    %ebx,%edi
shallowcopyactivemounts(struct mount **newcwdmount)
{
  struct mount_list *head = 0;
  struct mount_list *entry = myproc()->nsproxy->mount_ns->list_mounts;
  struct mount_list *prev = 0;
  while (entry != 0) {
80103d62:	85 f6                	test   %esi,%esi
80103d64:	75 a2                	jne    80103d08 <shallowcopyactivemounts+0x2b>
    entry = entry->next;
  }
  

  return head;
}
80103d66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103d69:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103d6c:	5b                   	pop    %ebx
80103d6d:	5e                   	pop    %esi
80103d6e:	5f                   	pop    %edi
80103d6f:	5d                   	pop    %ebp
80103d70:	c3                   	ret    

80103d71 <getactivemounts>:
  struct mount_list mnt_list[NMOUNT];
} mount_holder;

struct mount_list*
getactivemounts()
{
80103d71:	55                   	push   %ebp
80103d72:	89 e5                	mov    %esp,%ebp
80103d74:	83 ec 08             	sub    $0x8,%esp
  return myproc()->nsproxy->mount_ns->list_mounts;
80103d77:	e8 e7 14 00 00       	call   80105263 <myproc>
80103d7c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103d82:	8b 40 04             	mov    0x4(%eax),%eax
80103d85:	8b 40 3c             	mov    0x3c(%eax),%eax
}
80103d88:	c9                   	leave  
80103d89:	c3                   	ret    

80103d8a <addmountinternal>:

// Parent mount (if it exists) must already be ref-incremented.
static void
addmountinternal(struct mount_list *mnt_list, uint dev, struct inode *mountpoint, struct mount *parent)
{
80103d8a:	55                   	push   %ebp
80103d8b:	89 e5                	mov    %esp,%ebp
80103d8d:	53                   	push   %ebx
80103d8e:	83 ec 04             	sub    $0x4,%esp
80103d91:	89 c3                	mov    %eax,%ebx
  mnt_list->mnt.mountpoint = mountpoint;
80103d93:	89 48 04             	mov    %ecx,0x4(%eax)
  mnt_list->mnt.dev = dev;
80103d96:	89 50 0c             	mov    %edx,0xc(%eax)
  mnt_list->mnt.parent = parent;
80103d99:	8b 45 08             	mov    0x8(%ebp),%eax
80103d9c:	89 03                	mov    %eax,(%ebx)

  // add to linked list
  mnt_list->next = getactivemounts();
80103d9e:	e8 ce ff ff ff       	call   80103d71 <getactivemounts>
80103da3:	89 43 10             	mov    %eax,0x10(%ebx)
  myproc()->nsproxy->mount_ns->list_mounts = mnt_list;
80103da6:	e8 b8 14 00 00       	call   80105263 <myproc>
80103dab:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103db1:	8b 40 04             	mov    0x4(%eax),%eax
80103db4:	89 58 3c             	mov    %ebx,0x3c(%eax)
}
80103db7:	83 c4 04             	add    $0x4,%esp
80103dba:	5b                   	pop    %ebx
80103dbb:	5d                   	pop    %ebp
80103dbc:	c3                   	ret    

80103dbd <getinitialrootmount>:

struct mount *
getinitialrootmount(void)
{
80103dbd:	55                   	push   %ebp
80103dbe:	89 e5                	mov    %esp,%ebp
  return &mount_holder.mnt_list[0].mnt;
}
80103dc0:	b8 34 fb 12 80       	mov    $0x8012fb34,%eax
80103dc5:	5d                   	pop    %ebp
80103dc6:	c3                   	ret    

80103dc7 <getrootmount>:

struct mount *
getrootmount(void)
{
80103dc7:	55                   	push   %ebp
80103dc8:	89 e5                	mov    %esp,%ebp
80103dca:	83 ec 08             	sub    $0x8,%esp
  return myproc()->nsproxy->mount_ns->root;
80103dcd:	e8 91 14 00 00       	call   80105263 <myproc>
80103dd2:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103dd8:	8b 40 04             	mov    0x4(%eax),%eax
80103ddb:	8b 40 38             	mov    0x38(%eax),%eax
}
80103dde:	c9                   	leave  
80103ddf:	c3                   	ret    

80103de0 <mntinit>:

void
mntinit(void)
{
80103de0:	55                   	push   %ebp
80103de1:	89 e5                	mov    %esp,%ebp
80103de3:	53                   	push   %ebx
80103de4:	83 ec 0c             	sub    $0xc,%esp
  initlock(&mount_holder.mnt_list_lock, "mount_list");
80103de7:	68 f2 ec 10 80       	push   $0x8010ecf2
80103dec:	68 00 fb 12 80       	push   $0x8012fb00
80103df1:	e8 7a 23 00 00       	call   80106170 <initlock>

  addmountinternal(&mount_holder.mnt_list[0], ROOTDEV, 0, 0);
80103df6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
80103dfd:	b9 00 00 00 00       	mov    $0x0,%ecx
80103e02:	ba 01 00 00 00       	mov    $0x1,%edx
80103e07:	b8 34 fb 12 80       	mov    $0x8012fb34,%eax
80103e0c:	e8 79 ff ff ff       	call   80103d8a <addmountinternal>
  mount_holder.mnt_list[0].mnt.ref = 1;
80103e11:	c7 05 3c fb 12 80 01 	movl   $0x1,0x8012fb3c
80103e18:	00 00 00 
  myproc()->nsproxy->mount_ns->root = getinitialrootmount();
80103e1b:	e8 43 14 00 00       	call   80105263 <myproc>
80103e20:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103e26:	8b 58 04             	mov    0x4(%eax),%ebx
80103e29:	e8 8f ff ff ff       	call   80103dbd <getinitialrootmount>
80103e2e:	89 43 38             	mov    %eax,0x38(%ebx)
}
80103e31:	83 c4 10             	add    $0x10,%esp
80103e34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103e37:	c9                   	leave  
80103e38:	c3                   	ret    

80103e39 <mntdup>:

struct mount*
mntdup(struct mount *mnt)
{
80103e39:	55                   	push   %ebp
80103e3a:	89 e5                	mov    %esp,%ebp
80103e3c:	53                   	push   %ebx
80103e3d:	83 ec 10             	sub    $0x10,%esp
80103e40:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&mount_holder.mnt_list_lock);
80103e43:	68 00 fb 12 80       	push   $0x8012fb00
80103e48:	e8 23 24 00 00       	call   80106270 <acquire>
  mnt->ref++;
80103e4d:	8b 43 08             	mov    0x8(%ebx),%eax
80103e50:	83 c0 01             	add    $0x1,%eax
80103e53:	89 43 08             	mov    %eax,0x8(%ebx)
  release(&mount_holder.mnt_list_lock);
80103e56:	c7 04 24 00 fb 12 80 	movl   $0x8012fb00,(%esp)
80103e5d:	e8 2e 25 00 00       	call   80106390 <release>
  return mnt;
}
80103e62:	89 d8                	mov    %ebx,%eax
80103e64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103e67:	c9                   	leave  
80103e68:	c3                   	ret    

80103e69 <fixparents>:
  return head;
}

static void
fixparents(struct mount_list* newentry)
{
80103e69:	55                   	push   %ebp
80103e6a:	89 e5                	mov    %esp,%ebp
80103e6c:	56                   	push   %esi
80103e6d:	53                   	push   %ebx
80103e6e:	89 c6                	mov    %eax,%esi
  struct mount_list *entry = myproc()->nsproxy->mount_ns->list_mounts;
80103e70:	e8 ee 13 00 00       	call   80105263 <myproc>
80103e75:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103e7b:	8b 40 04             	mov    0x4(%eax),%eax
80103e7e:	8b 58 3c             	mov    0x3c(%eax),%ebx

  while (entry != 0) {    
80103e81:	eb 4d                	jmp    80103ed0 <fixparents+0x67>
    if (entry->mnt.parent != 0) {
80103e83:	83 3b 00             	cmpl   $0x0,(%ebx)
80103e86:	74 42                	je     80103eca <fixparents+0x61>
      struct mount_list *finder = myproc()->nsproxy->mount_ns->list_mounts;
80103e88:	e8 d6 13 00 00       	call   80105263 <myproc>
80103e8d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103e93:	8b 40 04             	mov    0x4(%eax),%eax
80103e96:	8b 40 3c             	mov    0x3c(%eax),%eax
      struct mount_list *newfinder = newentry;
80103e99:	89 f2                	mov    %esi,%edx
      while (finder != 0 && entry->mnt.parent != &finder->mnt) {
80103e9b:	eb 06                	jmp    80103ea3 <fixparents+0x3a>
        finder = finder->next;
80103e9d:	8b 40 10             	mov    0x10(%eax),%eax
        newfinder = newfinder->next;
80103ea0:	8b 52 10             	mov    0x10(%edx),%edx

  while (entry != 0) {    
    if (entry->mnt.parent != 0) {
      struct mount_list *finder = myproc()->nsproxy->mount_ns->list_mounts;
      struct mount_list *newfinder = newentry;
      while (finder != 0 && entry->mnt.parent != &finder->mnt) {
80103ea3:	85 c0                	test   %eax,%eax
80103ea5:	74 04                	je     80103eab <fixparents+0x42>
80103ea7:	39 03                	cmp    %eax,(%ebx)
80103ea9:	75 f2                	jne    80103e9d <fixparents+0x34>
        finder = finder->next;
        newfinder = newfinder->next;
      }

      if (finder == 0) {
80103eab:	85 c0                	test   %eax,%eax
80103ead:	75 0d                	jne    80103ebc <fixparents+0x53>
        panic("invalid mount tree structure");
80103eaf:	83 ec 0c             	sub    $0xc,%esp
80103eb2:	68 fd ec 10 80       	push   $0x8010ecfd
80103eb7:	e8 14 c5 ff ff       	call   801003d0 <panic>
      }

      newentry->mnt.parent = mntdup(&newfinder->mnt);
80103ebc:	83 ec 0c             	sub    $0xc,%esp
80103ebf:	52                   	push   %edx
80103ec0:	e8 74 ff ff ff       	call   80103e39 <mntdup>
80103ec5:	89 06                	mov    %eax,(%esi)
80103ec7:	83 c4 10             	add    $0x10,%esp
    }

    newentry = newentry->next;
80103eca:	8b 76 10             	mov    0x10(%esi),%esi
    entry = entry->next;
80103ecd:	8b 5b 10             	mov    0x10(%ebx),%ebx
static void
fixparents(struct mount_list* newentry)
{
  struct mount_list *entry = myproc()->nsproxy->mount_ns->list_mounts;

  while (entry != 0) {    
80103ed0:	85 db                	test   %ebx,%ebx
80103ed2:	75 af                	jne    80103e83 <fixparents+0x1a>
    }

    newentry = newentry->next;
    entry = entry->next;
  }
}
80103ed4:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103ed7:	5b                   	pop    %ebx
80103ed8:	5e                   	pop    %esi
80103ed9:	5d                   	pop    %ebp
80103eda:	c3                   	ret    

80103edb <mntput>:
  return mnt;
}

void
mntput(struct mount *mnt)
{
80103edb:	55                   	push   %ebp
80103edc:	89 e5                	mov    %esp,%ebp
80103ede:	53                   	push   %ebx
80103edf:	83 ec 10             	sub    $0x10,%esp
80103ee2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&mount_holder.mnt_list_lock);
80103ee5:	68 00 fb 12 80       	push   $0x8012fb00
80103eea:	e8 81 23 00 00       	call   80106270 <acquire>
  mnt->ref--;
80103eef:	8b 43 08             	mov    0x8(%ebx),%eax
80103ef2:	83 e8 01             	sub    $0x1,%eax
80103ef5:	89 43 08             	mov    %eax,0x8(%ebx)
  release(&mount_holder.mnt_list_lock);
80103ef8:	c7 04 24 00 fb 12 80 	movl   $0x8012fb00,(%esp)
80103eff:	e8 8c 24 00 00       	call   80106390 <release>
}
80103f04:	83 c4 10             	add    $0x10,%esp
80103f07:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103f0a:	c9                   	leave  
80103f0b:	c3                   	ret    

80103f0c <mount>:
}

// mountpoint and device must be locked.
int
mount(struct inode *mountpoint, struct inode *device, struct mount *parent)
{
80103f0c:	55                   	push   %ebp
80103f0d:	89 e5                	mov    %esp,%ebp
80103f0f:	57                   	push   %edi
80103f10:	56                   	push   %esi
80103f11:	53                   	push   %ebx
80103f12:	83 ec 1c             	sub    $0x1c,%esp
80103f15:	8b 75 08             	mov    0x8(%ebp),%esi
80103f18:	8b 5d 10             	mov    0x10(%ebp),%ebx
  struct mount_list *newmountentry = allocmntlist();
80103f1b:	e8 3e fd ff ff       	call   80103c5e <allocmntlist>
80103f20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  struct mount *newmount = &newmountentry->mnt;

  int dev = getorcreatedevice(device);
80103f23:	83 ec 0c             	sub    $0xc,%esp
80103f26:	ff 75 0c             	pushl  0xc(%ebp)
80103f29:	e8 f2 ce ff ff       	call   80100e20 <getorcreatedevice>
  if (dev < 0) {
80103f2e:	83 c4 10             	add    $0x10,%esp
80103f31:	85 c0                	test   %eax,%eax
80103f33:	79 24                	jns    80103f59 <mount+0x4d>
    newmount->ref = 0;
80103f35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103f38:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    cprintf("failed to create device.\n");
80103f3f:	83 ec 0c             	sub    $0xc,%esp
80103f42:	68 1a ed 10 80       	push   $0x8010ed1a
80103f47:	e8 14 c7 ff ff       	call   80100660 <cprintf>
    return -1;
80103f4c:	83 c4 10             	add    $0x10,%esp
80103f4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103f54:	e9 b1 00 00 00       	jmp    8010400a <mount+0xfe>
80103f59:	89 c7                	mov    %eax,%edi
  }

  acquire(&myproc()->nsproxy->mount_ns->lock);
80103f5b:	e8 03 13 00 00       	call   80105263 <myproc>
80103f60:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103f66:	8b 40 04             	mov    0x4(%eax),%eax
80103f69:	83 ec 0c             	sub    $0xc,%esp
80103f6c:	83 c0 04             	add    $0x4,%eax
80103f6f:	50                   	push   %eax
80103f70:	e8 fb 22 00 00       	call   80106270 <acquire>
  struct mount_list *current = getactivemounts();
80103f75:	e8 f7 fd ff ff       	call   80103d71 <getactivemounts>
  while (current != 0) {
80103f7a:	83 c4 10             	add    $0x10,%esp
80103f7d:	eb 4e                	jmp    80103fcd <mount+0xc1>
    if (current->mnt.parent == parent && current->mnt.mountpoint == mountpoint) {
80103f7f:	39 18                	cmp    %ebx,(%eax)
80103f81:	75 47                	jne    80103fca <mount+0xbe>
80103f83:	39 70 04             	cmp    %esi,0x4(%eax)
80103f86:	75 42                	jne    80103fca <mount+0xbe>
      // error - mount already exists.
      release(&myproc()->nsproxy->mount_ns->lock);
80103f88:	e8 d6 12 00 00       	call   80105263 <myproc>
80103f8d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103f93:	8b 40 04             	mov    0x4(%eax),%eax
80103f96:	83 ec 0c             	sub    $0xc,%esp
80103f99:	83 c0 04             	add    $0x4,%eax
80103f9c:	50                   	push   %eax
80103f9d:	e8 ee 23 00 00       	call   80106390 <release>
      deviceput(dev);
80103fa2:	89 3c 24             	mov    %edi,(%esp)
80103fa5:	e8 b6 cf ff ff       	call   80100f60 <deviceput>
      newmount->ref = 0;
80103faa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103fad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
      cprintf("mount already exists at that point.\n");
80103fb4:	c7 04 24 68 ed 10 80 	movl   $0x8010ed68,(%esp)
80103fbb:	e8 a0 c6 ff ff       	call   80100660 <cprintf>
      return -1;
80103fc0:	83 c4 10             	add    $0x10,%esp
80103fc3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103fc8:	eb 40                	jmp    8010400a <mount+0xfe>
    }
    current = current->next;
80103fca:	8b 40 10             	mov    0x10(%eax),%eax
    return -1;
  }

  acquire(&myproc()->nsproxy->mount_ns->lock);
  struct mount_list *current = getactivemounts();
  while (current != 0) {
80103fcd:	85 c0                	test   %eax,%eax
80103fcf:	75 ae                	jne    80103f7f <mount+0x73>
      return -1;
    }
    current = current->next;
  }

  mntdup(parent);
80103fd1:	83 ec 0c             	sub    $0xc,%esp
80103fd4:	53                   	push   %ebx
80103fd5:	e8 5f fe ff ff       	call   80103e39 <mntdup>

  addmountinternal(newmountentry, dev, mountpoint, parent);
80103fda:	89 1c 24             	mov    %ebx,(%esp)
80103fdd:	89 f1                	mov    %esi,%ecx
80103fdf:	89 fa                	mov    %edi,%edx
80103fe1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103fe4:	e8 a1 fd ff ff       	call   80103d8a <addmountinternal>
  release(&myproc()->nsproxy->mount_ns->lock);
80103fe9:	e8 75 12 00 00       	call   80105263 <myproc>
80103fee:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80103ff4:	8b 40 04             	mov    0x4(%eax),%eax
80103ff7:	83 c0 04             	add    $0x4,%eax
80103ffa:	89 04 24             	mov    %eax,(%esp)
80103ffd:	e8 8e 23 00 00       	call   80106390 <release>
  return 0;
80104002:	83 c4 10             	add    $0x10,%esp
80104005:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010400a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010400d:	5b                   	pop    %ebx
8010400e:	5e                   	pop    %esi
8010400f:	5f                   	pop    %edi
80104010:	5d                   	pop    %ebp
80104011:	c3                   	ret    

80104012 <umount>:

int
umount(struct mount *mnt)
{
80104012:	55                   	push   %ebp
80104013:	89 e5                	mov    %esp,%ebp
80104015:	57                   	push   %edi
80104016:	56                   	push   %esi
80104017:	53                   	push   %ebx
80104018:	83 ec 0c             	sub    $0xc,%esp
8010401b:	8b 7d 08             	mov    0x8(%ebp),%edi
  acquire(&myproc()->nsproxy->mount_ns->lock);
8010401e:	e8 40 12 00 00       	call   80105263 <myproc>
80104023:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104029:	8b 40 04             	mov    0x4(%eax),%eax
8010402c:	83 ec 0c             	sub    $0xc,%esp
8010402f:	83 c0 04             	add    $0x4,%eax
80104032:	50                   	push   %eax
80104033:	e8 38 22 00 00       	call   80106270 <acquire>
  struct mount_list *current = getactivemounts();
80104038:	e8 34 fd ff ff       	call   80103d71 <getactivemounts>
8010403d:	89 c3                	mov    %eax,%ebx
  struct mount_list **previous = &(myproc()->nsproxy->mount_ns->list_mounts);
8010403f:	e8 1f 12 00 00       	call   80105263 <myproc>
80104044:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
8010404a:	8b 70 04             	mov    0x4(%eax),%esi
8010404d:	83 c6 3c             	add    $0x3c,%esi
  while (current != 0) {
80104050:	83 c4 10             	add    $0x10,%esp
80104053:	eb 0a                	jmp    8010405f <umount+0x4d>
    if (&current->mnt == mnt) {
80104055:	39 fb                	cmp    %edi,%ebx
80104057:	74 0a                	je     80104063 <umount+0x51>
      break;
    }
    previous = &current->next;
80104059:	8d 73 10             	lea    0x10(%ebx),%esi
    current = current->next;
8010405c:	8b 5b 10             	mov    0x10(%ebx),%ebx
umount(struct mount *mnt)
{
  acquire(&myproc()->nsproxy->mount_ns->lock);
  struct mount_list *current = getactivemounts();
  struct mount_list **previous = &(myproc()->nsproxy->mount_ns->list_mounts);
  while (current != 0) {
8010405f:	85 db                	test   %ebx,%ebx
80104061:	75 f2                	jne    80104055 <umount+0x43>
    }
    previous = &current->next;
    current = current->next;
  }

  if (current == 0) {
80104063:	85 db                	test   %ebx,%ebx
80104065:	75 33                	jne    8010409a <umount+0x88>
    // error - not actually mounted.
    release(&myproc()->nsproxy->mount_ns->lock);
80104067:	e8 f7 11 00 00       	call   80105263 <myproc>
8010406c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104072:	8b 40 04             	mov    0x4(%eax),%eax
80104075:	83 ec 0c             	sub    $0xc,%esp
80104078:	83 c0 04             	add    $0x4,%eax
8010407b:	50                   	push   %eax
8010407c:	e8 0f 23 00 00       	call   80106390 <release>
    cprintf("current=0\n");
80104081:	c7 04 24 34 ed 10 80 	movl   $0x8010ed34,(%esp)
80104088:	e8 d3 c5 ff ff       	call   80100660 <cprintf>
    return -1;
8010408d:	83 c4 10             	add    $0x10,%esp
80104090:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104095:	e9 ee 00 00 00       	jmp    80104188 <umount+0x176>
  }

  if (current->mnt.parent == 0) {
8010409a:	83 3b 00             	cmpl   $0x0,(%ebx)
8010409d:	75 33                	jne    801040d2 <umount+0xc0>
    // error - can't unmount root filesystem
    release(&myproc()->nsproxy->mount_ns->lock);
8010409f:	e8 bf 11 00 00       	call   80105263 <myproc>
801040a4:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
801040aa:	8b 40 04             	mov    0x4(%eax),%eax
801040ad:	83 ec 0c             	sub    $0xc,%esp
801040b0:	83 c0 04             	add    $0x4,%eax
801040b3:	50                   	push   %eax
801040b4:	e8 d7 22 00 00       	call   80106390 <release>
    cprintf("current->mnt.parent == 0\n");
801040b9:	c7 04 24 3f ed 10 80 	movl   $0x8010ed3f,(%esp)
801040c0:	e8 9b c5 ff ff       	call   80100660 <cprintf>
    return -1;
801040c5:	83 c4 10             	add    $0x10,%esp
801040c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801040cd:	e9 b6 00 00 00       	jmp    80104188 <umount+0x176>
  }

  acquire(&mount_holder.mnt_list_lock);
801040d2:	83 ec 0c             	sub    $0xc,%esp
801040d5:	68 00 fb 12 80       	push   $0x8012fb00
801040da:	e8 91 21 00 00       	call   80106270 <acquire>
  
  // Base ref is 1, +1 for the mount being acquired before entering this method.
  if (current->mnt.ref > 2) {
801040df:	83 c4 10             	add    $0x10,%esp
801040e2:	83 7b 08 02          	cmpl   $0x2,0x8(%ebx)
801040e6:	7e 30                	jle    80104118 <umount+0x106>
    // error - can't unmount as there are references.
    release(&mount_holder.mnt_list_lock);
801040e8:	83 ec 0c             	sub    $0xc,%esp
801040eb:	68 00 fb 12 80       	push   $0x8012fb00
801040f0:	e8 9b 22 00 00       	call   80106390 <release>
    release(&myproc()->nsproxy->mount_ns->lock);
801040f5:	e8 69 11 00 00       	call   80105263 <myproc>
801040fa:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104100:	8b 40 04             	mov    0x4(%eax),%eax
80104103:	83 c0 04             	add    $0x4,%eax
80104106:	89 04 24             	mov    %eax,(%esp)
80104109:	e8 82 22 00 00       	call   80106390 <release>
    return -1;
8010410e:	83 c4 10             	add    $0x10,%esp
80104111:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104116:	eb 70                	jmp    80104188 <umount+0x176>
  }

  // remove from linked list
  *previous = current->next;
80104118:	8b 43 10             	mov    0x10(%ebx),%eax
8010411b:	89 06                	mov    %eax,(%esi)
  release(&myproc()->nsproxy->mount_ns->lock);
8010411d:	e8 41 11 00 00       	call   80105263 <myproc>
80104122:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104128:	8b 40 04             	mov    0x4(%eax),%eax
8010412b:	83 ec 0c             	sub    $0xc,%esp
8010412e:	83 c0 04             	add    $0x4,%eax
80104131:	50                   	push   %eax
80104132:	e8 59 22 00 00       	call   80106390 <release>

  struct inode *oldmountpoint = current->mnt.mountpoint;
80104137:	8b 7b 04             	mov    0x4(%ebx),%edi
  int olddev = current->mnt.dev;
8010413a:	8b 73 0c             	mov    0xc(%ebx),%esi
  current->mnt.mountpoint = 0;
8010413d:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  current->mnt.parent->ref--;
80104144:	8b 13                	mov    (%ebx),%edx
80104146:	8b 42 08             	mov    0x8(%edx),%eax
80104149:	83 e8 01             	sub    $0x1,%eax
8010414c:	89 42 08             	mov    %eax,0x8(%edx)
  current->mnt.ref = 0;
8010414f:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  current->mnt.dev = 0;
80104156:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  current->next = 0;
8010415d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  
  release(&mount_holder.mnt_list_lock);
80104164:	c7 04 24 00 fb 12 80 	movl   $0x8012fb00,(%esp)
8010416b:	e8 20 22 00 00       	call   80106390 <release>

  iput(oldmountpoint);
80104170:	89 3c 24             	mov    %edi,(%esp)
80104173:	e8 88 de ff ff       	call   80102000 <iput>
  deviceput(olddev);
80104178:	89 34 24             	mov    %esi,(%esp)
8010417b:	e8 e0 cd ff ff       	call   80100f60 <deviceput>
  return 0;
80104180:	83 c4 10             	add    $0x10,%esp
80104183:	b8 00 00 00 00       	mov    $0x0,%eax
}
80104188:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010418b:	5b                   	pop    %ebx
8010418c:	5e                   	pop    %esi
8010418d:	5f                   	pop    %edi
8010418e:	5d                   	pop    %ebp
8010418f:	c3                   	ret    

80104190 <mntlookup>:

struct mount*
mntlookup(struct inode *mountpoint, struct mount *parent)
{
80104190:	55                   	push   %ebp
80104191:	89 e5                	mov    %esp,%ebp
80104193:	57                   	push   %edi
80104194:	56                   	push   %esi
80104195:	53                   	push   %ebx
80104196:	83 ec 0c             	sub    $0xc,%esp
80104199:	8b 75 08             	mov    0x8(%ebp),%esi
8010419c:	8b 7d 0c             	mov    0xc(%ebp),%edi
  acquire(&myproc()->nsproxy->mount_ns->lock);
8010419f:	e8 bf 10 00 00       	call   80105263 <myproc>
801041a4:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
801041aa:	8b 40 04             	mov    0x4(%eax),%eax
801041ad:	83 ec 0c             	sub    $0xc,%esp
801041b0:	83 c0 04             	add    $0x4,%eax
801041b3:	50                   	push   %eax
801041b4:	e8 b7 20 00 00       	call   80106270 <acquire>

  struct mount_list *entry = getactivemounts();
801041b9:	e8 b3 fb ff ff       	call   80103d71 <getactivemounts>
801041be:	89 c3                	mov    %eax,%ebx
  while (entry != 0) {
801041c0:	83 c4 10             	add    $0x10,%esp
801041c3:	eb 33                	jmp    801041f8 <mntlookup+0x68>
    if (entry->mnt.mountpoint == mountpoint && entry->mnt.parent == parent) {
801041c5:	39 73 04             	cmp    %esi,0x4(%ebx)
801041c8:	75 2b                	jne    801041f5 <mntlookup+0x65>
801041ca:	39 3b                	cmp    %edi,(%ebx)
801041cc:	75 27                	jne    801041f5 <mntlookup+0x65>
      release(&myproc()->nsproxy->mount_ns->lock);
801041ce:	e8 90 10 00 00       	call   80105263 <myproc>
801041d3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
801041d9:	8b 40 04             	mov    0x4(%eax),%eax
801041dc:	83 ec 0c             	sub    $0xc,%esp
801041df:	83 c0 04             	add    $0x4,%eax
801041e2:	50                   	push   %eax
801041e3:	e8 a8 21 00 00       	call   80106390 <release>
      return mntdup(&entry->mnt);
801041e8:	89 1c 24             	mov    %ebx,(%esp)
801041eb:	e8 49 fc ff ff       	call   80103e39 <mntdup>
801041f0:	83 c4 10             	add    $0x10,%esp
801041f3:	eb 29                	jmp    8010421e <mntlookup+0x8e>
    }
    entry = entry->next;
801041f5:	8b 5b 10             	mov    0x10(%ebx),%ebx
mntlookup(struct inode *mountpoint, struct mount *parent)
{
  acquire(&myproc()->nsproxy->mount_ns->lock);

  struct mount_list *entry = getactivemounts();
  while (entry != 0) {
801041f8:	85 db                	test   %ebx,%ebx
801041fa:	75 c9                	jne    801041c5 <mntlookup+0x35>
      return mntdup(&entry->mnt);
    }
    entry = entry->next;
  }

  release(&myproc()->nsproxy->mount_ns->lock);
801041fc:	e8 62 10 00 00       	call   80105263 <myproc>
80104201:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104207:	8b 40 04             	mov    0x4(%eax),%eax
8010420a:	83 ec 0c             	sub    $0xc,%esp
8010420d:	83 c0 04             	add    $0x4,%eax
80104210:	50                   	push   %eax
80104211:	e8 7a 21 00 00       	call   80106390 <release>
  return 0;
80104216:	83 c4 10             	add    $0x10,%esp
80104219:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010421e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104221:	5b                   	pop    %ebx
80104222:	5e                   	pop    %esi
80104223:	5f                   	pop    %edi
80104224:	5d                   	pop    %ebp
80104225:	c3                   	ret    

80104226 <printmounts>:

void
printmounts(void)
{
80104226:	55                   	push   %ebp
80104227:	89 e5                	mov    %esp,%ebp
80104229:	56                   	push   %esi
8010422a:	53                   	push   %ebx
  acquire(&myproc()->nsproxy->mount_ns->lock);
8010422b:	e8 33 10 00 00       	call   80105263 <myproc>
80104230:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104236:	8b 40 04             	mov    0x4(%eax),%eax
80104239:	83 ec 0c             	sub    $0xc,%esp
8010423c:	83 c0 04             	add    $0x4,%eax
8010423f:	50                   	push   %eax
80104240:	e8 2b 20 00 00       	call   80106270 <acquire>

  struct mount_list *entry = getactivemounts();
80104245:	e8 27 fb ff ff       	call   80103d71 <getactivemounts>
8010424a:	89 c3                	mov    %eax,%ebx
  int i = 0;
  if (entry == 0) cprintf("Mounts empty\n");
8010424c:	83 c4 10             	add    $0x10,%esp
8010424f:	85 c0                	test   %eax,%eax
80104251:	75 10                	jne    80104263 <printmounts+0x3d>
80104253:	83 ec 0c             	sub    $0xc,%esp
80104256:	68 59 ed 10 80       	push   $0x8010ed59
8010425b:	e8 00 c4 ff ff       	call   80100660 <cprintf>
80104260:	83 c4 10             	add    $0x10,%esp
  return 0;
}

void
printmounts(void)
{
80104263:	be 00 00 00 00       	mov    $0x0,%esi
80104268:	eb 20                	jmp    8010428a <printmounts+0x64>

  struct mount_list *entry = getactivemounts();
  int i = 0;
  if (entry == 0) cprintf("Mounts empty\n");
  while (entry != 0) {
    i++;
8010426a:	83 c6 01             	add    $0x1,%esi
    cprintf("%d: Mount %x attached to %x, child of %x, with ref %d\n", i, &entry->mnt, entry->mnt.mountpoint, entry->mnt.parent, entry->mnt.ref);
8010426d:	83 ec 08             	sub    $0x8,%esp
80104270:	ff 73 08             	pushl  0x8(%ebx)
80104273:	ff 33                	pushl  (%ebx)
80104275:	ff 73 04             	pushl  0x4(%ebx)
80104278:	53                   	push   %ebx
80104279:	56                   	push   %esi
8010427a:	68 90 ed 10 80       	push   $0x8010ed90
8010427f:	e8 dc c3 ff ff       	call   80100660 <cprintf>
    entry = entry->next;
80104284:	8b 5b 10             	mov    0x10(%ebx),%ebx
80104287:	83 c4 20             	add    $0x20,%esp
  acquire(&myproc()->nsproxy->mount_ns->lock);

  struct mount_list *entry = getactivemounts();
  int i = 0;
  if (entry == 0) cprintf("Mounts empty\n");
  while (entry != 0) {
8010428a:	85 db                	test   %ebx,%ebx
8010428c:	75 dc                	jne    8010426a <printmounts+0x44>
    i++;
    cprintf("%d: Mount %x attached to %x, child of %x, with ref %d\n", i, &entry->mnt, entry->mnt.mountpoint, entry->mnt.parent, entry->mnt.ref);
    entry = entry->next;
  }

  release(&myproc()->nsproxy->mount_ns->lock);
8010428e:	e8 d0 0f 00 00       	call   80105263 <myproc>
80104293:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104299:	8b 40 04             	mov    0x4(%eax),%eax
8010429c:	83 ec 0c             	sub    $0xc,%esp
8010429f:	83 c0 04             	add    $0x4,%eax
801042a2:	50                   	push   %eax
801042a3:	e8 e8 20 00 00       	call   80106390 <release>
}
801042a8:	83 c4 10             	add    $0x10,%esp
801042ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
801042ae:	5b                   	pop    %ebx
801042af:	5e                   	pop    %esi
801042b0:	5d                   	pop    %ebp
801042b1:	c3                   	ret    

801042b2 <copyactivemounts>:
  }
}

struct mount_list*
copyactivemounts(void)
{
801042b2:	55                   	push   %ebp
801042b3:	89 e5                	mov    %esp,%ebp
801042b5:	57                   	push   %edi
801042b6:	56                   	push   %esi
801042b7:	53                   	push   %ebx
801042b8:	83 ec 1c             	sub    $0x1c,%esp
  acquire(&myproc()->nsproxy->mount_ns->lock);
801042bb:	e8 a3 0f 00 00       	call   80105263 <myproc>
801042c0:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
801042c6:	8b 40 04             	mov    0x4(%eax),%eax
801042c9:	83 ec 0c             	sub    $0xc,%esp
801042cc:	83 c0 04             	add    $0x4,%eax
801042cf:	50                   	push   %eax
801042d0:	e8 9b 1f 00 00       	call   80106270 <acquire>
  struct mount *oldcwdmount = myproc()->cwdmount;
801042d5:	e8 89 0f 00 00       	call   80105263 <myproc>
801042da:	8b b0 8c 00 00 00    	mov    0x8c(%eax),%esi
  struct mount *newcwdmount = 0;
801042e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  struct mount_list *newentry = shallowcopyactivemounts(&newcwdmount);
801042e7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
801042ea:	e8 ee f9 ff ff       	call   80103cdd <shallowcopyactivemounts>
801042ef:	89 c3                	mov    %eax,%ebx
  fixparents(newentry);
801042f1:	e8 73 fb ff ff       	call   80103e69 <fixparents>
  release(&myproc()->nsproxy->mount_ns->lock);
801042f6:	e8 68 0f 00 00       	call   80105263 <myproc>
801042fb:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104301:	8b 40 04             	mov    0x4(%eax),%eax
80104304:	83 c0 04             	add    $0x4,%eax
80104307:	89 04 24             	mov    %eax,(%esp)
8010430a:	e8 81 20 00 00       	call   80106390 <release>

  myproc()->cwdmount = mntdup(newcwdmount);
8010430f:	e8 4f 0f 00 00       	call   80105263 <myproc>
80104314:	89 c7                	mov    %eax,%edi
80104316:	83 c4 04             	add    $0x4,%esp
80104319:	ff 75 e4             	pushl  -0x1c(%ebp)
8010431c:	e8 18 fb ff ff       	call   80103e39 <mntdup>
80104321:	89 87 8c 00 00 00    	mov    %eax,0x8c(%edi)
  mntput(oldcwdmount);
80104327:	89 34 24             	mov    %esi,(%esp)
8010432a:	e8 ac fb ff ff       	call   80103edb <mntput>
  return newentry;
}
8010432f:	89 d8                	mov    %ebx,%eax
80104331:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104334:	5b                   	pop    %ebx
80104335:	5e                   	pop    %esi
80104336:	5f                   	pop    %edi
80104337:	5d                   	pop    %ebp
80104338:	c3                   	ret    

80104339 <getroot>:

struct mount*
getroot(struct mount_list* newentry)
{
80104339:	55                   	push   %ebp
8010433a:	89 e5                	mov    %esp,%ebp
8010433c:	83 ec 08             	sub    $0x8,%esp
8010433f:	8b 45 08             	mov    0x8(%ebp),%eax
  if (newentry != 0) {
80104342:	85 c0                	test   %eax,%eax
80104344:	74 1f                	je     80104365 <getroot+0x2c>
    struct mount* current = &newentry->mnt;
    while (current != 0 && current->parent != 0) {
80104346:	eb 02                	jmp    8010434a <getroot+0x11>
      current = current->parent;
80104348:	89 d0                	mov    %edx,%eax
struct mount*
getroot(struct mount_list* newentry)
{
  if (newentry != 0) {
    struct mount* current = &newentry->mnt;
    while (current != 0 && current->parent != 0) {
8010434a:	85 c0                	test   %eax,%eax
8010434c:	74 06                	je     80104354 <getroot+0x1b>
8010434e:	8b 10                	mov    (%eax),%edx
80104350:	85 d2                	test   %edx,%edx
80104352:	75 f4                	jne    80104348 <getroot+0xf>
      current = current->parent;
    }

    if (current == 0) {
80104354:	85 c0                	test   %eax,%eax
80104356:	75 12                	jne    8010436a <getroot+0x31>
      panic("malformed mount structure - no root");
80104358:	83 ec 0c             	sub    $0xc,%esp
8010435b:	68 c8 ed 10 80       	push   $0x8010edc8
80104360:	e8 6b c0 ff ff       	call   801003d0 <panic>
    }

    return current;
  }

  return 0;
80104365:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010436a:	c9                   	leave  
8010436b:	c3                   	ret    
8010436c:	66 90                	xchg   %ax,%ax
8010436e:	66 90                	xchg   %ax,%ax

80104370 <allocmount_ns>:
80104370:	55                   	push   %ebp
80104371:	89 e5                	mov    %esp,%ebp
80104373:	53                   	push   %ebx
80104374:	83 ec 10             	sub    $0x10,%esp
80104377:	68 00 fc 12 80       	push   $0x8012fc00
8010437c:	e8 ef 1e 00 00       	call   80106270 <acquire>
80104381:	ba 34 fc 12 80       	mov    $0x8012fc34,%edx
80104386:	83 c4 10             	add    $0x10,%esp
80104389:	31 c0                	xor    %eax,%eax
8010438b:	90                   	nop
8010438c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104390:	8b 1a                	mov    (%edx),%ebx
80104392:	85 db                	test   %ebx,%ebx
80104394:	75 07                	jne    8010439d <allocmount_ns+0x2d>
80104396:	8b 4a 3c             	mov    0x3c(%edx),%ecx
80104399:	85 c9                	test   %ecx,%ecx
8010439b:	74 2b                	je     801043c8 <allocmount_ns+0x58>
8010439d:	83 c0 01             	add    $0x1,%eax
801043a0:	83 c2 40             	add    $0x40,%edx
801043a3:	83 f8 0c             	cmp    $0xc,%eax
801043a6:	75 e8                	jne    80104390 <allocmount_ns+0x20>
801043a8:	83 ec 0c             	sub    $0xc,%esp
801043ab:	68 00 fc 12 80       	push   $0x8012fc00
801043b0:	e8 db 1f 00 00       	call   80106390 <release>
801043b5:	c7 04 24 ec ed 10 80 	movl   $0x8010edec,(%esp)
801043bc:	e8 0f c0 ff ff       	call   801003d0 <panic>
801043c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801043c8:	83 ec 0c             	sub    $0xc,%esp
801043cb:	c1 e0 06             	shl    $0x6,%eax
801043ce:	68 00 fc 12 80       	push   $0x8012fc00
801043d3:	89 c3                	mov    %eax,%ebx
801043d5:	c7 80 34 fc 12 80 01 	movl   $0x1,-0x7fed03cc(%eax)
801043dc:	00 00 00 
801043df:	e8 ac 1f 00 00       	call   80106390 <release>
801043e4:	8d 83 34 fc 12 80    	lea    -0x7fed03cc(%ebx),%eax
801043ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801043ed:	c9                   	leave  
801043ee:	c3                   	ret    
801043ef:	90                   	nop

801043f0 <mount_nsinit>:
801043f0:	55                   	push   %ebp
801043f1:	89 e5                	mov    %esp,%ebp
801043f3:	53                   	push   %ebx
801043f4:	bb 38 fc 12 80       	mov    $0x8012fc38,%ebx
801043f9:	83 ec 0c             	sub    $0xc,%esp
801043fc:	68 04 ee 10 80       	push   $0x8010ee04
80104401:	68 00 fc 12 80       	push   $0x8012fc00
80104406:	e8 65 1d 00 00       	call   80106170 <initlock>
8010440b:	83 c4 10             	add    $0x10,%esp
8010440e:	66 90                	xchg   %ax,%ax
80104410:	83 ec 08             	sub    $0x8,%esp
80104413:	68 0c ee 10 80       	push   $0x8010ee0c
80104418:	53                   	push   %ebx
80104419:	83 c3 40             	add    $0x40,%ebx
8010441c:	e8 4f 1d 00 00       	call   80106170 <initlock>
80104421:	83 c4 10             	add    $0x10,%esp
80104424:	81 fb 38 ff 12 80    	cmp    $0x8012ff38,%ebx
8010442a:	75 e4                	jne    80104410 <mount_nsinit+0x20>
8010442c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010442f:	c9                   	leave  
80104430:	c3                   	ret    
80104431:	eb 0d                	jmp    80104440 <mount_nsdup>
80104433:	90                   	nop
80104434:	90                   	nop
80104435:	90                   	nop
80104436:	90                   	nop
80104437:	90                   	nop
80104438:	90                   	nop
80104439:	90                   	nop
8010443a:	90                   	nop
8010443b:	90                   	nop
8010443c:	90                   	nop
8010443d:	90                   	nop
8010443e:	90                   	nop
8010443f:	90                   	nop

80104440 <mount_nsdup>:
80104440:	55                   	push   %ebp
80104441:	89 e5                	mov    %esp,%ebp
80104443:	53                   	push   %ebx
80104444:	83 ec 10             	sub    $0x10,%esp
80104447:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010444a:	68 00 fc 12 80       	push   $0x8012fc00
8010444f:	e8 1c 1e 00 00       	call   80106270 <acquire>
80104454:	83 03 01             	addl   $0x1,(%ebx)
80104457:	c7 04 24 00 fc 12 80 	movl   $0x8012fc00,(%esp)
8010445e:	e8 2d 1f 00 00       	call   80106390 <release>
80104463:	89 d8                	mov    %ebx,%eax
80104465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104468:	c9                   	leave  
80104469:	c3                   	ret    
8010446a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104470 <umountlist>:
80104470:	55                   	push   %ebp
80104471:	89 e5                	mov    %esp,%ebp
80104473:	53                   	push   %ebx
80104474:	83 ec 04             	sub    $0x4,%esp
80104477:	8b 45 08             	mov    0x8(%ebp),%eax
8010447a:	85 c0                	test   %eax,%eax
8010447c:	75 18                	jne    80104496 <umountlist+0x26>
8010447e:	eb 2c                	jmp    801044ac <umountlist+0x3c>
80104480:	83 ec 0c             	sub    $0xc,%esp
80104483:	50                   	push   %eax
80104484:	e8 89 fb ff ff       	call   80104012 <umount>
80104489:	83 c4 10             	add    $0x10,%esp
8010448c:	85 c0                	test   %eax,%eax
8010448e:	75 21                	jne    801044b1 <umountlist+0x41>
80104490:	85 db                	test   %ebx,%ebx
80104492:	89 d8                	mov    %ebx,%eax
80104494:	74 16                	je     801044ac <umountlist+0x3c>
80104496:	8b 10                	mov    (%eax),%edx
80104498:	8b 58 10             	mov    0x10(%eax),%ebx
8010449b:	85 d2                	test   %edx,%edx
8010449d:	75 e1                	jne    80104480 <umountlist+0x10>
8010449f:	85 db                	test   %ebx,%ebx
801044a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
801044a8:	89 d8                	mov    %ebx,%eax
801044aa:	75 ea                	jne    80104496 <umountlist+0x26>
801044ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801044af:	c9                   	leave  
801044b0:	c3                   	ret    
801044b1:	83 ec 0c             	sub    $0xc,%esp
801044b4:	68 18 ee 10 80       	push   $0x8010ee18
801044b9:	e8 12 bf ff ff       	call   801003d0 <panic>
801044be:	66 90                	xchg   %ax,%ax

801044c0 <mount_nsleave>:
801044c0:	55                   	push   %ebp
801044c1:	89 e5                	mov    %esp,%ebp
801044c3:	5d                   	pop    %ebp
801044c4:	c3                   	ret    
801044c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801044c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801044d0 <copymount_ns>:
801044d0:	55                   	push   %ebp
801044d1:	89 e5                	mov    %esp,%ebp
801044d3:	53                   	push   %ebx
801044d4:	83 ec 04             	sub    $0x4,%esp
801044d7:	e8 94 fe ff ff       	call   80104370 <allocmount_ns>
801044dc:	89 c3                	mov    %eax,%ebx
801044de:	e8 cf fd ff ff       	call   801042b2 <copyactivemounts>
801044e3:	83 ec 0c             	sub    $0xc,%esp
801044e6:	89 43 3c             	mov    %eax,0x3c(%ebx)
801044e9:	50                   	push   %eax
801044ea:	e8 4a fe ff ff       	call   80104339 <getroot>
801044ef:	89 43 38             	mov    %eax,0x38(%ebx)
801044f2:	89 d8                	mov    %ebx,%eax
801044f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801044f7:	c9                   	leave  
801044f8:	c3                   	ret    
801044f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104500 <newmount_ns>:
80104500:	55                   	push   %ebp
80104501:	89 e5                	mov    %esp,%ebp
80104503:	5d                   	pop    %ebp
80104504:	e9 67 fe ff ff       	jmp    80104370 <allocmount_ns>
80104509:	66 90                	xchg   %ax,%ax
8010450b:	66 90                	xchg   %ax,%ax
8010450d:	66 90                	xchg   %ax,%ax
8010450f:	90                   	nop

80104510 <pid_ns_init>:
80104510:	55                   	push   %ebp
80104511:	89 e5                	mov    %esp,%ebp
80104513:	53                   	push   %ebx
80104514:	bb 7c ff 12 80       	mov    $0x8012ff7c,%ebx
80104519:	83 ec 0c             	sub    $0xc,%esp
8010451c:	68 3e ee 10 80       	push   $0x8010ee3e
80104521:	68 40 ff 12 80       	push   $0x8012ff40
80104526:	e8 45 1c 00 00       	call   80106170 <initlock>
8010452b:	83 c4 10             	add    $0x10,%esp
8010452e:	66 90                	xchg   %ax,%ax
80104530:	83 ec 08             	sub    $0x8,%esp
80104533:	68 3e ee 10 80       	push   $0x8010ee3e
80104538:	53                   	push   %ebx
80104539:	83 c3 44             	add    $0x44,%ebx
8010453c:	e8 2f 1c 00 00       	call   80106170 <initlock>
80104541:	c7 43 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebx)
80104548:	83 c4 10             	add    $0x10,%esp
8010454b:	81 fb cc 04 13 80    	cmp    $0x801304cc,%ebx
80104551:	75 dd                	jne    80104530 <pid_ns_init+0x20>
80104553:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104556:	c9                   	leave  
80104557:	c3                   	ret    
80104558:	90                   	nop
80104559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104560 <pid_ns_put>:
80104560:	55                   	push   %ebp
80104561:	89 e5                	mov    %esp,%ebp
80104563:	53                   	push   %ebx
80104564:	83 ec 10             	sub    $0x10,%esp
80104567:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010456a:	68 40 ff 12 80       	push   $0x8012ff40
8010456f:	e8 fc 1c 00 00       	call   80106270 <acquire>
80104574:	8b 03                	mov    (%ebx),%eax
80104576:	83 c4 10             	add    $0x10,%esp
80104579:	85 c0                	test   %eax,%eax
8010457b:	74 15                	je     80104592 <pid_ns_put+0x32>
8010457d:	83 e8 01             	sub    $0x1,%eax
80104580:	89 03                	mov    %eax,(%ebx)
80104582:	c7 45 08 40 ff 12 80 	movl   $0x8012ff40,0x8(%ebp)
80104589:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010458c:	c9                   	leave  
8010458d:	e9 fe 1d 00 00       	jmp    80106390 <release>
80104592:	83 ec 0c             	sub    $0xc,%esp
80104595:	68 44 ee 10 80       	push   $0x8010ee44
8010459a:	e8 31 be ff ff       	call   801003d0 <panic>
8010459f:	90                   	nop

801045a0 <pid_ns_get>:
801045a0:	55                   	push   %ebp
801045a1:	89 e5                	mov    %esp,%ebp
801045a3:	53                   	push   %ebx
801045a4:	83 ec 10             	sub    $0x10,%esp
801045a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801045aa:	68 40 ff 12 80       	push   $0x8012ff40
801045af:	e8 bc 1c 00 00       	call   80106270 <acquire>
801045b4:	83 03 01             	addl   $0x1,(%ebx)
801045b7:	83 c4 10             	add    $0x10,%esp
801045ba:	c7 45 08 40 ff 12 80 	movl   $0x8012ff40,0x8(%ebp)
801045c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801045c4:	c9                   	leave  
801045c5:	e9 c6 1d 00 00       	jmp    80106390 <release>
801045ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801045d0 <pid_ns_alloc>:
801045d0:	55                   	push   %ebp
801045d1:	89 e5                	mov    %esp,%ebp
801045d3:	53                   	push   %ebx
801045d4:	83 ec 10             	sub    $0x10,%esp
801045d7:	68 40 ff 12 80       	push   $0x8012ff40
801045dc:	e8 8f 1c 00 00       	call   80106270 <acquire>
801045e1:	ba 74 ff 12 80       	mov    $0x8012ff74,%edx
801045e6:	83 c4 10             	add    $0x10,%esp
801045e9:	31 c0                	xor    %eax,%eax
801045eb:	90                   	nop
801045ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801045f0:	8b 0a                	mov    (%edx),%ecx
801045f2:	85 c9                	test   %ecx,%ecx
801045f4:	74 2a                	je     80104620 <pid_ns_alloc+0x50>
801045f6:	83 c0 01             	add    $0x1,%eax
801045f9:	83 c2 44             	add    $0x44,%edx
801045fc:	83 f8 14             	cmp    $0x14,%eax
801045ff:	75 ef                	jne    801045f0 <pid_ns_alloc+0x20>
80104601:	83 ec 0c             	sub    $0xc,%esp
80104604:	68 40 ff 12 80       	push   $0x8012ff40
80104609:	e8 82 1d 00 00       	call   80106390 <release>
8010460e:	c7 04 24 59 ee 10 80 	movl   $0x8010ee59,(%esp)
80104615:	e8 b6 bd ff ff       	call   801003d0 <panic>
8010461a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80104620:	89 c2                	mov    %eax,%edx
80104622:	83 ec 0c             	sub    $0xc,%esp
80104625:	c1 e2 06             	shl    $0x6,%edx
80104628:	68 40 ff 12 80       	push   $0x8012ff40
8010462d:	8d 1c 82             	lea    (%edx,%eax,4),%ebx
80104630:	c7 83 74 ff 12 80 01 	movl   $0x1,-0x7fed008c(%ebx)
80104637:	00 00 00 
8010463a:	e8 51 1d 00 00       	call   80106390 <release>
8010463f:	8d 83 74 ff 12 80    	lea    -0x7fed008c(%ebx),%eax
80104645:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104648:	c9                   	leave  
80104649:	c3                   	ret    
8010464a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104650 <pid_ns_init_ns>:
80104650:	55                   	push   %ebp
80104651:	89 e5                	mov    %esp,%ebp
80104653:	8b 45 08             	mov    0x8(%ebp),%eax
80104656:	8b 55 0c             	mov    0xc(%ebp),%edx
80104659:	c7 40 3c 01 00 00 00 	movl   $0x1,0x3c(%eax)
80104660:	89 50 04             	mov    %edx,0x4(%eax)
80104663:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
8010466a:	5d                   	pop    %ebp
8010466b:	c3                   	ret    
8010466c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80104670 <pid_ns_dup>:
80104670:	55                   	push   %ebp
80104671:	89 e5                	mov    %esp,%ebp
80104673:	53                   	push   %ebx
80104674:	83 ec 10             	sub    $0x10,%esp
80104677:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010467a:	68 40 ff 12 80       	push   $0x8012ff40
8010467f:	e8 ec 1b 00 00       	call   80106270 <acquire>
80104684:	83 03 01             	addl   $0x1,(%ebx)
80104687:	c7 04 24 40 ff 12 80 	movl   $0x8012ff40,(%esp)
8010468e:	e8 fd 1c 00 00       	call   80106390 <release>
80104693:	89 d8                	mov    %ebx,%eax
80104695:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104698:	c9                   	leave  
80104699:	c3                   	ret    
8010469a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801046a0 <pid_ns_new>:
801046a0:	55                   	push   %ebp
801046a1:	89 e5                	mov    %esp,%ebp
801046a3:	83 ec 08             	sub    $0x8,%esp
801046a6:	e8 25 ff ff ff       	call   801045d0 <pid_ns_alloc>
801046ab:	8b 55 08             	mov    0x8(%ebp),%edx
801046ae:	c7 40 3c 01 00 00 00 	movl   $0x1,0x3c(%eax)
801046b5:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
801046bc:	89 50 04             	mov    %edx,0x4(%eax)
801046bf:	c9                   	leave  
801046c0:	c3                   	ret    
801046c1:	eb 0d                	jmp    801046d0 <pid_ns_next_pid>
801046c3:	90                   	nop
801046c4:	90                   	nop
801046c5:	90                   	nop
801046c6:	90                   	nop
801046c7:	90                   	nop
801046c8:	90                   	nop
801046c9:	90                   	nop
801046ca:	90                   	nop
801046cb:	90                   	nop
801046cc:	90                   	nop
801046cd:	90                   	nop
801046ce:	90                   	nop
801046cf:	90                   	nop

801046d0 <pid_ns_next_pid>:
801046d0:	55                   	push   %ebp
801046d1:	89 e5                	mov    %esp,%ebp
801046d3:	57                   	push   %edi
801046d4:	56                   	push   %esi
801046d5:	53                   	push   %ebx
801046d6:	83 ec 18             	sub    $0x18,%esp
801046d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
801046dc:	8d 7b 08             	lea    0x8(%ebx),%edi
801046df:	57                   	push   %edi
801046e0:	e8 8b 1b 00 00       	call   80106270 <acquire>
801046e5:	8b 73 3c             	mov    0x3c(%ebx),%esi
801046e8:	8d 46 01             	lea    0x1(%esi),%eax
801046eb:	89 43 3c             	mov    %eax,0x3c(%ebx)
801046ee:	89 3c 24             	mov    %edi,(%esp)
801046f1:	e8 9a 1c 00 00       	call   80106390 <release>
801046f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801046f9:	89 f0                	mov    %esi,%eax
801046fb:	5b                   	pop    %ebx
801046fc:	5e                   	pop    %esi
801046fd:	5f                   	pop    %edi
801046fe:	5d                   	pop    %ebp
801046ff:	c3                   	ret    

80104700 <pid_ns_is_max_depth>:
80104700:	55                   	push   %ebp
80104701:	89 e5                	mov    %esp,%ebp
80104703:	8b 45 08             	mov    0x8(%ebp),%eax
80104706:	85 c0                	test   %eax,%eax
80104708:	74 1a                	je     80104724 <pid_ns_is_max_depth+0x24>
8010470a:	31 d2                	xor    %edx,%edx
8010470c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104710:	8b 40 04             	mov    0x4(%eax),%eax
80104713:	83 c2 01             	add    $0x1,%edx
80104716:	85 c0                	test   %eax,%eax
80104718:	75 f6                	jne    80104710 <pid_ns_is_max_depth+0x10>
8010471a:	31 c0                	xor    %eax,%eax
8010471c:	83 fa 03             	cmp    $0x3,%edx
8010471f:	0f 9f c0             	setg   %al
80104722:	5d                   	pop    %ebp
80104723:	c3                   	ret    
80104724:	31 c0                	xor    %eax,%eax
80104726:	5d                   	pop    %ebp
80104727:	c3                   	ret    
80104728:	66 90                	xchg   %ax,%ax
8010472a:	66 90                	xchg   %ax,%ax
8010472c:	66 90                	xchg   %ax,%ax
8010472e:	66 90                	xchg   %ax,%ax

80104730 <mpsearch1>:
80104730:	55                   	push   %ebp
80104731:	89 e5                	mov    %esp,%ebp
80104733:	57                   	push   %edi
80104734:	56                   	push   %esi
80104735:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
8010473b:	53                   	push   %ebx
8010473c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
8010473f:	83 ec 0c             	sub    $0xc,%esp
80104742:	39 de                	cmp    %ebx,%esi
80104744:	73 48                	jae    8010478e <mpsearch1+0x5e>
80104746:	8d 76 00             	lea    0x0(%esi),%esi
80104749:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80104750:	83 ec 04             	sub    $0x4,%esp
80104753:	8d 7e 10             	lea    0x10(%esi),%edi
80104756:	6a 04                	push   $0x4
80104758:	68 6f ee 10 80       	push   $0x8010ee6f
8010475d:	56                   	push   %esi
8010475e:	e8 cd 1c 00 00       	call   80106430 <memcmp>
80104763:	83 c4 10             	add    $0x10,%esp
80104766:	85 c0                	test   %eax,%eax
80104768:	75 1e                	jne    80104788 <mpsearch1+0x58>
8010476a:	8d 7e 10             	lea    0x10(%esi),%edi
8010476d:	89 f2                	mov    %esi,%edx
8010476f:	31 c9                	xor    %ecx,%ecx
80104771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104778:	0f b6 02             	movzbl (%edx),%eax
8010477b:	83 c2 01             	add    $0x1,%edx
8010477e:	01 c1                	add    %eax,%ecx
80104780:	39 fa                	cmp    %edi,%edx
80104782:	75 f4                	jne    80104778 <mpsearch1+0x48>
80104784:	84 c9                	test   %cl,%cl
80104786:	74 10                	je     80104798 <mpsearch1+0x68>
80104788:	39 fb                	cmp    %edi,%ebx
8010478a:	89 fe                	mov    %edi,%esi
8010478c:	77 c2                	ja     80104750 <mpsearch1+0x20>
8010478e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104791:	31 c0                	xor    %eax,%eax
80104793:	5b                   	pop    %ebx
80104794:	5e                   	pop    %esi
80104795:	5f                   	pop    %edi
80104796:	5d                   	pop    %ebp
80104797:	c3                   	ret    
80104798:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010479b:	89 f0                	mov    %esi,%eax
8010479d:	5b                   	pop    %ebx
8010479e:	5e                   	pop    %esi
8010479f:	5f                   	pop    %edi
801047a0:	5d                   	pop    %ebp
801047a1:	c3                   	ret    
801047a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801047a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801047b0 <mpinit>:
801047b0:	55                   	push   %ebp
801047b1:	89 e5                	mov    %esp,%ebp
801047b3:	57                   	push   %edi
801047b4:	56                   	push   %esi
801047b5:	53                   	push   %ebx
801047b6:	83 ec 1c             	sub    $0x1c,%esp
801047b9:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
801047c0:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
801047c7:	c1 e0 08             	shl    $0x8,%eax
801047ca:	09 d0                	or     %edx,%eax
801047cc:	c1 e0 04             	shl    $0x4,%eax
801047cf:	85 c0                	test   %eax,%eax
801047d1:	75 1b                	jne    801047ee <mpinit+0x3e>
801047d3:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
801047da:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
801047e1:	c1 e0 08             	shl    $0x8,%eax
801047e4:	09 d0                	or     %edx,%eax
801047e6:	c1 e0 0a             	shl    $0xa,%eax
801047e9:	2d 00 04 00 00       	sub    $0x400,%eax
801047ee:	ba 00 04 00 00       	mov    $0x400,%edx
801047f3:	e8 38 ff ff ff       	call   80104730 <mpsearch1>
801047f8:	85 c0                	test   %eax,%eax
801047fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801047fd:	0f 84 37 01 00 00    	je     8010493a <mpinit+0x18a>
80104803:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104806:	8b 58 04             	mov    0x4(%eax),%ebx
80104809:	85 db                	test   %ebx,%ebx
8010480b:	0f 84 43 01 00 00    	je     80104954 <mpinit+0x1a4>
80104811:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
80104817:	83 ec 04             	sub    $0x4,%esp
8010481a:	6a 04                	push   $0x4
8010481c:	68 74 ee 10 80       	push   $0x8010ee74
80104821:	56                   	push   %esi
80104822:	e8 09 1c 00 00       	call   80106430 <memcmp>
80104827:	83 c4 10             	add    $0x10,%esp
8010482a:	85 c0                	test   %eax,%eax
8010482c:	0f 85 22 01 00 00    	jne    80104954 <mpinit+0x1a4>
80104832:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
80104839:	3c 01                	cmp    $0x1,%al
8010483b:	74 08                	je     80104845 <mpinit+0x95>
8010483d:	3c 04                	cmp    $0x4,%al
8010483f:	0f 85 0f 01 00 00    	jne    80104954 <mpinit+0x1a4>
80104845:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
8010484c:	85 ff                	test   %edi,%edi
8010484e:	74 21                	je     80104871 <mpinit+0xc1>
80104850:	31 d2                	xor    %edx,%edx
80104852:	31 c0                	xor    %eax,%eax
80104854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104858:	0f b6 8c 03 00 00 00 	movzbl -0x80000000(%ebx,%eax,1),%ecx
8010485f:	80 
80104860:	83 c0 01             	add    $0x1,%eax
80104863:	01 ca                	add    %ecx,%edx
80104865:	39 c7                	cmp    %eax,%edi
80104867:	75 ef                	jne    80104858 <mpinit+0xa8>
80104869:	84 d2                	test   %dl,%dl
8010486b:	0f 85 e3 00 00 00    	jne    80104954 <mpinit+0x1a4>
80104871:	85 f6                	test   %esi,%esi
80104873:	0f 84 db 00 00 00    	je     80104954 <mpinit+0x1a4>
80104879:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
8010487f:	a3 04 fa 12 80       	mov    %eax,0x8012fa04
80104884:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
8010488b:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
80104891:	bb 01 00 00 00       	mov    $0x1,%ebx
80104896:	01 d6                	add    %edx,%esi
80104898:	90                   	nop
80104899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801048a0:	39 c6                	cmp    %eax,%esi
801048a2:	76 23                	jbe    801048c7 <mpinit+0x117>
801048a4:	0f b6 10             	movzbl (%eax),%edx
801048a7:	80 fa 04             	cmp    $0x4,%dl
801048aa:	0f 87 c0 00 00 00    	ja     80104970 <mpinit+0x1c0>
801048b0:	ff 24 95 b4 ee 10 80 	jmp    *-0x7fef114c(,%edx,4)
801048b7:	89 f6                	mov    %esi,%esi
801048b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801048c0:	83 c0 08             	add    $0x8,%eax
801048c3:	39 c6                	cmp    %eax,%esi
801048c5:	77 dd                	ja     801048a4 <mpinit+0xf4>
801048c7:	85 db                	test   %ebx,%ebx
801048c9:	0f 84 92 00 00 00    	je     80104961 <mpinit+0x1b1>
801048cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801048d2:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
801048d6:	74 15                	je     801048ed <mpinit+0x13d>
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801048d8:	ba 22 00 00 00       	mov    $0x22,%edx
801048dd:	b8 70 00 00 00       	mov    $0x70,%eax
801048e2:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801048e3:	ba 23 00 00 00       	mov    $0x23,%edx
801048e8:	ec                   	in     (%dx),%al
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801048e9:	83 c8 01             	or     $0x1,%eax
801048ec:	ee                   	out    %al,(%dx)
801048ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
801048f0:	5b                   	pop    %ebx
801048f1:	5e                   	pop    %esi
801048f2:	5f                   	pop    %edi
801048f3:	5d                   	pop    %ebp
801048f4:	c3                   	ret    
801048f5:	8d 76 00             	lea    0x0(%esi),%esi
801048f8:	8b 0d 80 0a 13 80    	mov    0x80130a80,%ecx
801048fe:	83 f9 07             	cmp    $0x7,%ecx
80104901:	7f 19                	jg     8010491c <mpinit+0x16c>
80104903:	0f b6 50 01          	movzbl 0x1(%eax),%edx
80104907:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
8010490d:	83 c1 01             	add    $0x1,%ecx
80104910:	89 0d 80 0a 13 80    	mov    %ecx,0x80130a80
80104916:	88 97 00 05 13 80    	mov    %dl,-0x7fecfb00(%edi)
8010491c:	83 c0 14             	add    $0x14,%eax
8010491f:	e9 7c ff ff ff       	jmp    801048a0 <mpinit+0xf0>
80104924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104928:	0f b6 50 01          	movzbl 0x1(%eax),%edx
8010492c:	83 c0 08             	add    $0x8,%eax
8010492f:	88 15 e0 04 13 80    	mov    %dl,0x801304e0
80104935:	e9 66 ff ff ff       	jmp    801048a0 <mpinit+0xf0>
8010493a:	ba 00 00 01 00       	mov    $0x10000,%edx
8010493f:	b8 00 00 0f 00       	mov    $0xf0000,%eax
80104944:	e8 e7 fd ff ff       	call   80104730 <mpsearch1>
80104949:	85 c0                	test   %eax,%eax
8010494b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010494e:	0f 85 af fe ff ff    	jne    80104803 <mpinit+0x53>
80104954:	83 ec 0c             	sub    $0xc,%esp
80104957:	68 79 ee 10 80       	push   $0x8010ee79
8010495c:	e8 6f ba ff ff       	call   801003d0 <panic>
80104961:	83 ec 0c             	sub    $0xc,%esp
80104964:	68 94 ee 10 80       	push   $0x8010ee94
80104969:	e8 62 ba ff ff       	call   801003d0 <panic>
8010496e:	66 90                	xchg   %ax,%ax
80104970:	31 db                	xor    %ebx,%ebx
80104972:	e9 30 ff ff ff       	jmp    801048a7 <mpinit+0xf7>

80104977 <allocnsproxyinternal>:
    return nsproxy;
}

static struct nsproxy*
allocnsproxyinternal(void)
{
80104977:	55                   	push   %ebp
80104978:	89 e5                	mov    %esp,%ebp
8010497a:	56                   	push   %esi
8010497b:	53                   	push   %ebx
    for (int i = 0; i < NNAMESPACE; i++) {
8010497c:	b8 00 00 00 00       	mov    $0x0,%eax
80104981:	eb 17                	jmp    8010499a <allocnsproxyinternal+0x23>
        if (namespacetable.nsproxy[i].ref == 0) {
80104983:	8d 0c 40             	lea    (%eax,%eax,2),%ecx
80104986:	8d 14 8d 00 00 00 00 	lea    0x0(,%ecx,4),%edx
8010498d:	8b 92 d4 0a 13 80    	mov    -0x7fecf52c(%edx),%edx
80104993:	85 d2                	test   %edx,%edx
80104995:	74 15                	je     801049ac <allocnsproxyinternal+0x35>
}

static struct nsproxy*
allocnsproxyinternal(void)
{
    for (int i = 0; i < NNAMESPACE; i++) {
80104997:	83 c0 01             	add    $0x1,%eax
8010499a:	83 f8 0b             	cmp    $0xb,%eax
8010499d:	7e e4                	jle    80104983 <allocnsproxyinternal+0xc>
            namespacetable.nsproxy[i].ref++;
            return &namespacetable.nsproxy[i];
        }
    }

    panic("out of nsproxy objects");
8010499f:	83 ec 0c             	sub    $0xc,%esp
801049a2:	68 c8 ee 10 80       	push   $0x8010eec8
801049a7:	e8 24 ba ff ff       	call   801003d0 <panic>
static struct nsproxy*
allocnsproxyinternal(void)
{
    for (int i = 0; i < NNAMESPACE; i++) {
        if (namespacetable.nsproxy[i].ref == 0) {
            namespacetable.nsproxy[i].ref++;
801049ac:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
801049af:	8d 34 01             	lea    (%ecx,%eax,1),%esi
801049b2:	8d 1c b5 00 00 00 00 	lea    0x0(,%esi,4),%ebx
801049b9:	83 c2 01             	add    $0x1,%edx
801049bc:	89 93 d4 0a 13 80    	mov    %edx,-0x7fecf52c(%ebx)
            return &namespacetable.nsproxy[i];
801049c2:	8d 83 d4 0a 13 80    	lea    -0x7fecf52c(%ebx),%eax
        }
    }

    panic("out of nsproxy objects");
}
801049c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
801049cb:	5b                   	pop    %ebx
801049cc:	5e                   	pop    %esi
801049cd:	5d                   	pop    %ebp
801049ce:	c3                   	ret    

801049cf <namespaceinit>:
  struct nsproxy nsproxy[NNAMESPACE];
} namespacetable;

void
namespaceinit(void)
{
801049cf:	55                   	push   %ebp
801049d0:	89 e5                	mov    %esp,%ebp
801049d2:	83 ec 10             	sub    $0x10,%esp
    initlock(&namespacetable.lock, "namespace");
801049d5:	68 df ee 10 80       	push   $0x8010eedf
801049da:	68 a0 0a 13 80       	push   $0x80130aa0
801049df:	e8 8c 17 00 00       	call   80106170 <initlock>
    mount_nsinit();
801049e4:	e8 07 fa ff ff       	call   801043f0 <mount_nsinit>
    pid_ns_init();
801049e9:	e8 22 fb ff ff       	call   80104510 <pid_ns_init>
}
801049ee:	83 c4 10             	add    $0x10,%esp
801049f1:	c9                   	leave  
801049f2:	c3                   	ret    

801049f3 <namespaceleave>:

void
namespaceleave(struct nsproxy* nsproxy)
{
801049f3:	55                   	push   %ebp
801049f4:	89 e5                	mov    %esp,%ebp
801049f6:	53                   	push   %ebx
801049f7:	83 ec 10             	sub    $0x10,%esp
801049fa:	8b 5d 08             	mov    0x8(%ebp),%ebx
    acquire(&namespacetable.lock);
801049fd:	68 a0 0a 13 80       	push   $0x80130aa0
80104a02:	e8 69 18 00 00       	call   80106270 <acquire>
    if (nsproxy->ref == 1) {
80104a07:	83 c4 10             	add    $0x10,%esp
80104a0a:	83 3b 01             	cmpl   $0x1,(%ebx)
80104a0d:	75 50                	jne    80104a5f <namespaceleave+0x6c>
        release(&namespacetable.lock);
80104a0f:	83 ec 0c             	sub    $0xc,%esp
80104a12:	68 a0 0a 13 80       	push   $0x80130aa0
80104a17:	e8 74 19 00 00       	call   80106390 <release>
        mount_nsleave(nsproxy->mount_ns);
80104a1c:	83 c4 04             	add    $0x4,%esp
80104a1f:	ff 73 04             	pushl  0x4(%ebx)
80104a22:	e8 99 fa ff ff       	call   801044c0 <mount_nsleave>
        if (nsproxy->mount_ns->ref == 0) printmounts();
80104a27:	8b 43 04             	mov    0x4(%ebx),%eax
80104a2a:	83 c4 10             	add    $0x10,%esp
80104a2d:	83 38 00             	cmpl   $0x0,(%eax)
80104a30:	75 05                	jne    80104a37 <namespaceleave+0x44>
80104a32:	e8 ef f7 ff ff       	call   80104226 <printmounts>
        nsproxy->mount_ns = 0;
80104a37:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
        pid_ns_put(nsproxy->pid_ns);
80104a3e:	83 ec 0c             	sub    $0xc,%esp
80104a41:	ff 73 08             	pushl  0x8(%ebx)
80104a44:	e8 17 fb ff ff       	call   80104560 <pid_ns_put>
        nsproxy->pid_ns = 0;
80104a49:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
        acquire(&namespacetable.lock);
80104a50:	c7 04 24 a0 0a 13 80 	movl   $0x80130aa0,(%esp)
80104a57:	e8 14 18 00 00       	call   80106270 <acquire>
80104a5c:	83 c4 10             	add    $0x10,%esp
    }
    nsproxy->ref -= 1;
80104a5f:	83 2b 01             	subl   $0x1,(%ebx)
    release(&namespacetable.lock);
80104a62:	83 ec 0c             	sub    $0xc,%esp
80104a65:	68 a0 0a 13 80       	push   $0x80130aa0
80104a6a:	e8 21 19 00 00       	call   80106390 <release>
}
80104a6f:	83 c4 10             	add    $0x10,%esp
80104a72:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104a75:	c9                   	leave  
80104a76:	c3                   	ret    

80104a77 <namespacedup>:

struct nsproxy*
namespacedup(struct nsproxy* nsproxy)
{
80104a77:	55                   	push   %ebp
80104a78:	89 e5                	mov    %esp,%ebp
80104a7a:	53                   	push   %ebx
80104a7b:	83 ec 10             	sub    $0x10,%esp
80104a7e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    acquire(&namespacetable.lock);
80104a81:	68 a0 0a 13 80       	push   $0x80130aa0
80104a86:	e8 e5 17 00 00       	call   80106270 <acquire>
    nsproxy->ref++;
80104a8b:	8b 03                	mov    (%ebx),%eax
80104a8d:	83 c0 01             	add    $0x1,%eax
80104a90:	89 03                	mov    %eax,(%ebx)
    release(&namespacetable.lock);
80104a92:	c7 04 24 a0 0a 13 80 	movl   $0x80130aa0,(%esp)
80104a99:	e8 f2 18 00 00       	call   80106390 <release>
    return nsproxy;
}
80104a9e:	89 d8                	mov    %ebx,%eax
80104aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104aa3:	c9                   	leave  
80104aa4:	c3                   	ret    

80104aa5 <emptynsproxy>:
    panic("out of nsproxy objects");
}

struct nsproxy*
emptynsproxy(void)
{
80104aa5:	55                   	push   %ebp
80104aa6:	89 e5                	mov    %esp,%ebp
80104aa8:	53                   	push   %ebx
80104aa9:	83 ec 10             	sub    $0x10,%esp
    acquire(&namespacetable.lock);
80104aac:	68 a0 0a 13 80       	push   $0x80130aa0
80104ab1:	e8 ba 17 00 00       	call   80106270 <acquire>
    struct nsproxy* result = allocnsproxyinternal();
80104ab6:	e8 bc fe ff ff       	call   80104977 <allocnsproxyinternal>
80104abb:	89 c3                	mov    %eax,%ebx
    result->mount_ns = newmount_ns();
80104abd:	e8 3e fa ff ff       	call   80104500 <newmount_ns>
80104ac2:	89 43 04             	mov    %eax,0x4(%ebx)
    result->pid_ns = pid_ns_new(0);
80104ac5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
80104acc:	e8 cf fb ff ff       	call   801046a0 <pid_ns_new>
80104ad1:	89 43 08             	mov    %eax,0x8(%ebx)
    release(&namespacetable.lock);
80104ad4:	c7 04 24 a0 0a 13 80 	movl   $0x80130aa0,(%esp)
80104adb:	e8 b0 18 00 00       	call   80106390 <release>

    return result;
}
80104ae0:	89 d8                	mov    %ebx,%eax
80104ae2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104ae5:	c9                   	leave  
80104ae6:	c3                   	ret    

80104ae7 <namespace_replace_pid_ns>:

struct nsproxy*
namespace_replace_pid_ns(struct nsproxy* oldns, struct pid_ns* pid_ns)
{
80104ae7:	55                   	push   %ebp
80104ae8:	89 e5                	mov    %esp,%ebp
80104aea:	53                   	push   %ebx
80104aeb:	83 ec 04             	sub    $0x4,%esp
    struct nsproxy* nsproxy = allocnsproxyinternal();
80104aee:	e8 84 fe ff ff       	call   80104977 <allocnsproxyinternal>
80104af3:	89 c3                	mov    %eax,%ebx
    nsproxy->mount_ns = mount_nsdup(oldns->mount_ns);
80104af5:	83 ec 0c             	sub    $0xc,%esp
80104af8:	8b 45 08             	mov    0x8(%ebp),%eax
80104afb:	ff 70 04             	pushl  0x4(%eax)
80104afe:	e8 3d f9 ff ff       	call   80104440 <mount_nsdup>
80104b03:	89 43 04             	mov    %eax,0x4(%ebx)
    nsproxy->pid_ns = pid_ns_dup(pid_ns);
80104b06:	83 c4 04             	add    $0x4,%esp
80104b09:	ff 75 0c             	pushl  0xc(%ebp)
80104b0c:	e8 5f fb ff ff       	call   80104670 <pid_ns_dup>
80104b11:	89 43 08             	mov    %eax,0x8(%ebx)
    return nsproxy;
}
80104b14:	89 d8                	mov    %ebx,%eax
80104b16:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104b19:	c9                   	leave  
80104b1a:	c3                   	ret    

80104b1b <unshare>:

int
unshare(int nstype)
{
80104b1b:	55                   	push   %ebp
80104b1c:	89 e5                	mov    %esp,%ebp
80104b1e:	57                   	push   %edi
80104b1f:	56                   	push   %esi
80104b20:	53                   	push   %ebx
80104b21:	83 ec 18             	sub    $0x18,%esp
80104b24:	8b 5d 08             	mov    0x8(%ebp),%ebx
    acquire(&namespacetable.lock);
80104b27:	68 a0 0a 13 80       	push   $0x80130aa0
80104b2c:	e8 3f 17 00 00       	call   80106270 <acquire>
    if (myproc()->nsproxy->ref > 1) {
80104b31:	e8 2d 07 00 00       	call   80105263 <myproc>
80104b36:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104b3c:	83 c4 10             	add    $0x10,%esp
80104b3f:	83 38 01             	cmpl   $0x1,(%eax)
80104b42:	7e 59                	jle    80104b9d <unshare+0x82>
        struct nsproxy *oldns = myproc()->nsproxy;
80104b44:	e8 1a 07 00 00       	call   80105263 <myproc>
80104b49:	8b b0 a0 00 00 00    	mov    0xa0(%eax),%esi
        myproc()->nsproxy = allocnsproxyinternal();
80104b4f:	e8 0f 07 00 00       	call   80105263 <myproc>
80104b54:	89 c7                	mov    %eax,%edi
80104b56:	e8 1c fe ff ff       	call   80104977 <allocnsproxyinternal>
80104b5b:	89 87 a0 00 00 00    	mov    %eax,0xa0(%edi)
        myproc()->nsproxy->mount_ns = mount_nsdup(oldns->mount_ns);
80104b61:	e8 fd 06 00 00       	call   80105263 <myproc>
80104b66:	8b b8 a0 00 00 00    	mov    0xa0(%eax),%edi
80104b6c:	83 ec 0c             	sub    $0xc,%esp
80104b6f:	ff 76 04             	pushl  0x4(%esi)
80104b72:	e8 c9 f8 ff ff       	call   80104440 <mount_nsdup>
80104b77:	89 47 04             	mov    %eax,0x4(%edi)
        myproc()->nsproxy->pid_ns = pid_ns_dup(oldns->pid_ns);
80104b7a:	e8 e4 06 00 00       	call   80105263 <myproc>
80104b7f:	8b b8 a0 00 00 00    	mov    0xa0(%eax),%edi
80104b85:	83 c4 04             	add    $0x4,%esp
80104b88:	ff 76 08             	pushl  0x8(%esi)
80104b8b:	e8 e0 fa ff ff       	call   80104670 <pid_ns_dup>
80104b90:	89 47 08             	mov    %eax,0x8(%edi)
        oldns->ref--;
80104b93:	8b 06                	mov    (%esi),%eax
80104b95:	83 e8 01             	sub    $0x1,%eax
80104b98:	89 06                	mov    %eax,(%esi)
80104b9a:	83 c4 10             	add    $0x10,%esp
    }
    release(&namespacetable.lock);
80104b9d:	83 ec 0c             	sub    $0xc,%esp
80104ba0:	68 a0 0a 13 80       	push   $0x80130aa0
80104ba5:	e8 e6 17 00 00       	call   80106390 <release>
    switch(nstype) {
80104baa:	83 c4 10             	add    $0x10,%esp
80104bad:	83 fb 01             	cmp    $0x1,%ebx
80104bb0:	74 0a                	je     80104bbc <unshare+0xa1>
80104bb2:	83 fb 02             	cmp    $0x2,%ebx
80104bb5:	74 39                	je     80104bf0 <unshare+0xd5>
80104bb7:	e9 89 00 00 00       	jmp    80104c45 <unshare+0x12a>
        case MOUNT_NS:
            {
                struct mount_ns* previous = myproc()->nsproxy->mount_ns;
80104bbc:	e8 a2 06 00 00       	call   80105263 <myproc>
80104bc1:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104bc7:	8b 58 04             	mov    0x4(%eax),%ebx
                myproc()->nsproxy->mount_ns = copymount_ns();
80104bca:	e8 94 06 00 00       	call   80105263 <myproc>
80104bcf:	8b b0 a0 00 00 00    	mov    0xa0(%eax),%esi
80104bd5:	e8 f6 f8 ff ff       	call   801044d0 <copymount_ns>
80104bda:	89 46 04             	mov    %eax,0x4(%esi)
                mount_nsleave(previous);
80104bdd:	83 ec 0c             	sub    $0xc,%esp
80104be0:	53                   	push   %ebx
80104be1:	e8 da f8 ff ff       	call   801044c0 <mount_nsleave>
                return 0;
80104be6:	83 c4 10             	add    $0x10,%esp
80104be9:	bb 00 00 00 00       	mov    $0x0,%ebx
80104bee:	eb 68                	jmp    80104c58 <unshare+0x13d>
            }
        case PID_NS:
            {
              if (myproc()->child_pid_ns || pid_ns_is_max_depth(myproc()->nsproxy->pid_ns)) {
80104bf0:	e8 6e 06 00 00       	call   80105263 <myproc>
80104bf5:	83 b8 a4 00 00 00 00 	cmpl   $0x0,0xa4(%eax)
80104bfc:	75 4e                	jne    80104c4c <unshare+0x131>
80104bfe:	e8 60 06 00 00       	call   80105263 <myproc>
80104c03:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104c09:	83 ec 0c             	sub    $0xc,%esp
80104c0c:	ff 70 08             	pushl  0x8(%eax)
80104c0f:	e8 ec fa ff ff       	call   80104700 <pid_ns_is_max_depth>
80104c14:	89 c3                	mov    %eax,%ebx
80104c16:	83 c4 10             	add    $0x10,%esp
80104c19:	85 c0                	test   %eax,%eax
80104c1b:	75 36                	jne    80104c53 <unshare+0x138>
                return -1;
              }

              myproc()->child_pid_ns = pid_ns_new(myproc()->nsproxy->pid_ns);
80104c1d:	e8 41 06 00 00       	call   80105263 <myproc>
80104c22:	89 c6                	mov    %eax,%esi
80104c24:	e8 3a 06 00 00       	call   80105263 <myproc>
80104c29:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80104c2f:	83 ec 0c             	sub    $0xc,%esp
80104c32:	ff 70 08             	pushl  0x8(%eax)
80104c35:	e8 66 fa ff ff       	call   801046a0 <pid_ns_new>
80104c3a:	89 86 a4 00 00 00    	mov    %eax,0xa4(%esi)
              return 0;
80104c40:	83 c4 10             	add    $0x10,%esp
80104c43:	eb 13                	jmp    80104c58 <unshare+0x13d>
            }
        default:
            return -1;
80104c45:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80104c4a:	eb 0c                	jmp    80104c58 <unshare+0x13d>
                return 0;
            }
        case PID_NS:
            {
              if (myproc()->child_pid_ns || pid_ns_is_max_depth(myproc()->nsproxy->pid_ns)) {
                return -1;
80104c4c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80104c51:	eb 05                	jmp    80104c58 <unshare+0x13d>
80104c53:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
              return 0;
            }
        default:
            return -1;
    }
}
80104c58:	89 d8                	mov    %ebx,%eax
80104c5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104c5d:	5b                   	pop    %ebx
80104c5e:	5e                   	pop    %esi
80104c5f:	5f                   	pop    %edi
80104c60:	5d                   	pop    %ebp
80104c61:	c3                   	ret    
80104c62:	66 90                	xchg   %ax,%ax
80104c64:	66 90                	xchg   %ax,%ax
80104c66:	66 90                	xchg   %ax,%ax
80104c68:	66 90                	xchg   %ax,%ax
80104c6a:	66 90                	xchg   %ax,%ax
80104c6c:	66 90                	xchg   %ax,%ax
80104c6e:	66 90                	xchg   %ax,%ax

80104c70 <picinit>:
80104c70:	55                   	push   %ebp
80104c71:	ba 21 00 00 00       	mov    $0x21,%edx
80104c76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104c7b:	89 e5                	mov    %esp,%ebp
80104c7d:	ee                   	out    %al,(%dx)
80104c7e:	ba a1 00 00 00       	mov    $0xa1,%edx
80104c83:	ee                   	out    %al,(%dx)
80104c84:	5d                   	pop    %ebp
80104c85:	c3                   	ret    
80104c86:	66 90                	xchg   %ax,%ax
80104c88:	66 90                	xchg   %ax,%ax
80104c8a:	66 90                	xchg   %ax,%ax
80104c8c:	66 90                	xchg   %ax,%ax
80104c8e:	66 90                	xchg   %ax,%ax

80104c90 <pipealloc>:
80104c90:	55                   	push   %ebp
80104c91:	89 e5                	mov    %esp,%ebp
80104c93:	57                   	push   %edi
80104c94:	56                   	push   %esi
80104c95:	53                   	push   %ebx
80104c96:	83 ec 0c             	sub    $0xc,%esp
80104c99:	8b 75 08             	mov    0x8(%ebp),%esi
80104c9c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80104c9f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
80104ca5:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
80104cab:	e8 b0 c8 ff ff       	call   80101560 <filealloc>
80104cb0:	85 c0                	test   %eax,%eax
80104cb2:	89 06                	mov    %eax,(%esi)
80104cb4:	0f 84 a8 00 00 00    	je     80104d62 <pipealloc+0xd2>
80104cba:	e8 a1 c8 ff ff       	call   80101560 <filealloc>
80104cbf:	85 c0                	test   %eax,%eax
80104cc1:	89 03                	mov    %eax,(%ebx)
80104cc3:	0f 84 87 00 00 00    	je     80104d50 <pipealloc+0xc0>
80104cc9:	e8 02 e3 ff ff       	call   80102fd0 <kalloc>
80104cce:	85 c0                	test   %eax,%eax
80104cd0:	89 c7                	mov    %eax,%edi
80104cd2:	0f 84 b0 00 00 00    	je     80104d88 <pipealloc+0xf8>
80104cd8:	83 ec 08             	sub    $0x8,%esp
80104cdb:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
80104ce2:	00 00 00 
80104ce5:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
80104cec:	00 00 00 
80104cef:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
80104cf6:	00 00 00 
80104cf9:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
80104d00:	00 00 00 
80104d03:	68 e9 ee 10 80       	push   $0x8010eee9
80104d08:	50                   	push   %eax
80104d09:	e8 62 14 00 00       	call   80106170 <initlock>
80104d0e:	8b 06                	mov    (%esi),%eax
80104d10:	83 c4 10             	add    $0x10,%esp
80104d13:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
80104d19:	8b 06                	mov    (%esi),%eax
80104d1b:	c6 40 08 01          	movb   $0x1,0x8(%eax)
80104d1f:	8b 06                	mov    (%esi),%eax
80104d21:	c6 40 09 00          	movb   $0x0,0x9(%eax)
80104d25:	8b 06                	mov    (%esi),%eax
80104d27:	89 78 10             	mov    %edi,0x10(%eax)
80104d2a:	8b 03                	mov    (%ebx),%eax
80104d2c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
80104d32:	8b 03                	mov    (%ebx),%eax
80104d34:	c6 40 08 00          	movb   $0x0,0x8(%eax)
80104d38:	8b 03                	mov    (%ebx),%eax
80104d3a:	c6 40 09 01          	movb   $0x1,0x9(%eax)
80104d3e:	8b 03                	mov    (%ebx),%eax
80104d40:	89 78 10             	mov    %edi,0x10(%eax)
80104d43:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104d46:	31 c0                	xor    %eax,%eax
80104d48:	5b                   	pop    %ebx
80104d49:	5e                   	pop    %esi
80104d4a:	5f                   	pop    %edi
80104d4b:	5d                   	pop    %ebp
80104d4c:	c3                   	ret    
80104d4d:	8d 76 00             	lea    0x0(%esi),%esi
80104d50:	8b 06                	mov    (%esi),%eax
80104d52:	85 c0                	test   %eax,%eax
80104d54:	74 1e                	je     80104d74 <pipealloc+0xe4>
80104d56:	83 ec 0c             	sub    $0xc,%esp
80104d59:	50                   	push   %eax
80104d5a:	e8 c1 c8 ff ff       	call   80101620 <fileclose>
80104d5f:	83 c4 10             	add    $0x10,%esp
80104d62:	8b 03                	mov    (%ebx),%eax
80104d64:	85 c0                	test   %eax,%eax
80104d66:	74 0c                	je     80104d74 <pipealloc+0xe4>
80104d68:	83 ec 0c             	sub    $0xc,%esp
80104d6b:	50                   	push   %eax
80104d6c:	e8 af c8 ff ff       	call   80101620 <fileclose>
80104d71:	83 c4 10             	add    $0x10,%esp
80104d74:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104d77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104d7c:	5b                   	pop    %ebx
80104d7d:	5e                   	pop    %esi
80104d7e:	5f                   	pop    %edi
80104d7f:	5d                   	pop    %ebp
80104d80:	c3                   	ret    
80104d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104d88:	8b 06                	mov    (%esi),%eax
80104d8a:	85 c0                	test   %eax,%eax
80104d8c:	75 c8                	jne    80104d56 <pipealloc+0xc6>
80104d8e:	eb d2                	jmp    80104d62 <pipealloc+0xd2>

80104d90 <pipeclose>:
80104d90:	55                   	push   %ebp
80104d91:	89 e5                	mov    %esp,%ebp
80104d93:	56                   	push   %esi
80104d94:	53                   	push   %ebx
80104d95:	8b 5d 08             	mov    0x8(%ebp),%ebx
80104d98:	8b 75 0c             	mov    0xc(%ebp),%esi
80104d9b:	83 ec 0c             	sub    $0xc,%esp
80104d9e:	53                   	push   %ebx
80104d9f:	e8 cc 14 00 00       	call   80106270 <acquire>
80104da4:	83 c4 10             	add    $0x10,%esp
80104da7:	85 f6                	test   %esi,%esi
80104da9:	74 45                	je     80104df0 <pipeclose+0x60>
80104dab:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
80104db1:	83 ec 0c             	sub    $0xc,%esp
80104db4:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
80104dbb:	00 00 00 
80104dbe:	50                   	push   %eax
80104dbf:	e8 2a 10 00 00       	call   80105dee <wakeup>
80104dc4:	83 c4 10             	add    $0x10,%esp
80104dc7:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
80104dcd:	85 d2                	test   %edx,%edx
80104dcf:	75 0a                	jne    80104ddb <pipeclose+0x4b>
80104dd1:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
80104dd7:	85 c0                	test   %eax,%eax
80104dd9:	74 35                	je     80104e10 <pipeclose+0x80>
80104ddb:	89 5d 08             	mov    %ebx,0x8(%ebp)
80104dde:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104de1:	5b                   	pop    %ebx
80104de2:	5e                   	pop    %esi
80104de3:	5d                   	pop    %ebp
80104de4:	e9 a7 15 00 00       	jmp    80106390 <release>
80104de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104df0:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
80104df6:	83 ec 0c             	sub    $0xc,%esp
80104df9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
80104e00:	00 00 00 
80104e03:	50                   	push   %eax
80104e04:	e8 e5 0f 00 00       	call   80105dee <wakeup>
80104e09:	83 c4 10             	add    $0x10,%esp
80104e0c:	eb b9                	jmp    80104dc7 <pipeclose+0x37>
80104e0e:	66 90                	xchg   %ax,%ax
80104e10:	83 ec 0c             	sub    $0xc,%esp
80104e13:	53                   	push   %ebx
80104e14:	e8 77 15 00 00       	call   80106390 <release>
80104e19:	89 5d 08             	mov    %ebx,0x8(%ebp)
80104e1c:	83 c4 10             	add    $0x10,%esp
80104e1f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104e22:	5b                   	pop    %ebx
80104e23:	5e                   	pop    %esi
80104e24:	5d                   	pop    %ebp
80104e25:	e9 d6 de ff ff       	jmp    80102d00 <kfree>
80104e2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104e30 <pipewrite>:
80104e30:	55                   	push   %ebp
80104e31:	89 e5                	mov    %esp,%ebp
80104e33:	57                   	push   %edi
80104e34:	56                   	push   %esi
80104e35:	53                   	push   %ebx
80104e36:	83 ec 28             	sub    $0x28,%esp
80104e39:	8b 5d 08             	mov    0x8(%ebp),%ebx
80104e3c:	53                   	push   %ebx
80104e3d:	e8 2e 14 00 00       	call   80106270 <acquire>
80104e42:	8b 45 10             	mov    0x10(%ebp),%eax
80104e45:	83 c4 10             	add    $0x10,%esp
80104e48:	85 c0                	test   %eax,%eax
80104e4a:	0f 8e b9 00 00 00    	jle    80104f09 <pipewrite+0xd9>
80104e50:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80104e53:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
80104e59:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
80104e5f:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
80104e65:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80104e68:	03 4d 10             	add    0x10(%ebp),%ecx
80104e6b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80104e6e:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
80104e74:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
80104e7a:	39 d0                	cmp    %edx,%eax
80104e7c:	74 38                	je     80104eb6 <pipewrite+0x86>
80104e7e:	eb 59                	jmp    80104ed9 <pipewrite+0xa9>
80104e80:	e8 de 03 00 00       	call   80105263 <myproc>
80104e85:	8b 48 44             	mov    0x44(%eax),%ecx
80104e88:	85 c9                	test   %ecx,%ecx
80104e8a:	75 34                	jne    80104ec0 <pipewrite+0x90>
80104e8c:	83 ec 0c             	sub    $0xc,%esp
80104e8f:	57                   	push   %edi
80104e90:	e8 59 0f 00 00       	call   80105dee <wakeup>
80104e95:	58                   	pop    %eax
80104e96:	5a                   	pop    %edx
80104e97:	53                   	push   %ebx
80104e98:	56                   	push   %esi
80104e99:	e8 83 0d 00 00       	call   80105c21 <sleep>
80104e9e:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80104ea4:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
80104eaa:	83 c4 10             	add    $0x10,%esp
80104ead:	05 00 02 00 00       	add    $0x200,%eax
80104eb2:	39 c2                	cmp    %eax,%edx
80104eb4:	75 2a                	jne    80104ee0 <pipewrite+0xb0>
80104eb6:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
80104ebc:	85 c0                	test   %eax,%eax
80104ebe:	75 c0                	jne    80104e80 <pipewrite+0x50>
80104ec0:	83 ec 0c             	sub    $0xc,%esp
80104ec3:	53                   	push   %ebx
80104ec4:	e8 c7 14 00 00       	call   80106390 <release>
80104ec9:	83 c4 10             	add    $0x10,%esp
80104ecc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104ed1:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104ed4:	5b                   	pop    %ebx
80104ed5:	5e                   	pop    %esi
80104ed6:	5f                   	pop    %edi
80104ed7:	5d                   	pop    %ebp
80104ed8:	c3                   	ret    
80104ed9:	89 c2                	mov    %eax,%edx
80104edb:	90                   	nop
80104edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104ee0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80104ee3:	8d 42 01             	lea    0x1(%edx),%eax
80104ee6:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
80104eea:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
80104ef0:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
80104ef6:	0f b6 09             	movzbl (%ecx),%ecx
80104ef9:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
80104efd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80104f00:	3b 4d e0             	cmp    -0x20(%ebp),%ecx
80104f03:	0f 85 65 ff ff ff    	jne    80104e6e <pipewrite+0x3e>
80104f09:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
80104f0f:	83 ec 0c             	sub    $0xc,%esp
80104f12:	50                   	push   %eax
80104f13:	e8 d6 0e 00 00       	call   80105dee <wakeup>
80104f18:	89 1c 24             	mov    %ebx,(%esp)
80104f1b:	e8 70 14 00 00       	call   80106390 <release>
80104f20:	83 c4 10             	add    $0x10,%esp
80104f23:	8b 45 10             	mov    0x10(%ebp),%eax
80104f26:	eb a9                	jmp    80104ed1 <pipewrite+0xa1>
80104f28:	90                   	nop
80104f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104f30 <piperead>:
80104f30:	55                   	push   %ebp
80104f31:	89 e5                	mov    %esp,%ebp
80104f33:	57                   	push   %edi
80104f34:	56                   	push   %esi
80104f35:	53                   	push   %ebx
80104f36:	83 ec 18             	sub    $0x18,%esp
80104f39:	8b 5d 08             	mov    0x8(%ebp),%ebx
80104f3c:	8b 7d 0c             	mov    0xc(%ebp),%edi
80104f3f:	53                   	push   %ebx
80104f40:	e8 2b 13 00 00       	call   80106270 <acquire>
80104f45:	83 c4 10             	add    $0x10,%esp
80104f48:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80104f4e:	39 83 38 02 00 00    	cmp    %eax,0x238(%ebx)
80104f54:	75 6a                	jne    80104fc0 <piperead+0x90>
80104f56:	8b b3 40 02 00 00    	mov    0x240(%ebx),%esi
80104f5c:	85 f6                	test   %esi,%esi
80104f5e:	0f 84 cc 00 00 00    	je     80105030 <piperead+0x100>
80104f64:	8d b3 34 02 00 00    	lea    0x234(%ebx),%esi
80104f6a:	eb 2d                	jmp    80104f99 <piperead+0x69>
80104f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104f70:	83 ec 08             	sub    $0x8,%esp
80104f73:	53                   	push   %ebx
80104f74:	56                   	push   %esi
80104f75:	e8 a7 0c 00 00       	call   80105c21 <sleep>
80104f7a:	83 c4 10             	add    $0x10,%esp
80104f7d:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
80104f83:	39 83 34 02 00 00    	cmp    %eax,0x234(%ebx)
80104f89:	75 35                	jne    80104fc0 <piperead+0x90>
80104f8b:	8b 93 40 02 00 00    	mov    0x240(%ebx),%edx
80104f91:	85 d2                	test   %edx,%edx
80104f93:	0f 84 97 00 00 00    	je     80105030 <piperead+0x100>
80104f99:	e8 c5 02 00 00       	call   80105263 <myproc>
80104f9e:	8b 48 44             	mov    0x44(%eax),%ecx
80104fa1:	85 c9                	test   %ecx,%ecx
80104fa3:	74 cb                	je     80104f70 <piperead+0x40>
80104fa5:	83 ec 0c             	sub    $0xc,%esp
80104fa8:	53                   	push   %ebx
80104fa9:	e8 e2 13 00 00       	call   80106390 <release>
80104fae:	83 c4 10             	add    $0x10,%esp
80104fb1:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104fb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104fb9:	5b                   	pop    %ebx
80104fba:	5e                   	pop    %esi
80104fbb:	5f                   	pop    %edi
80104fbc:	5d                   	pop    %ebp
80104fbd:	c3                   	ret    
80104fbe:	66 90                	xchg   %ax,%ax
80104fc0:	8b 45 10             	mov    0x10(%ebp),%eax
80104fc3:	85 c0                	test   %eax,%eax
80104fc5:	7e 69                	jle    80105030 <piperead+0x100>
80104fc7:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80104fcd:	31 c9                	xor    %ecx,%ecx
80104fcf:	eb 15                	jmp    80104fe6 <piperead+0xb6>
80104fd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80104fd8:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80104fde:	3b 83 38 02 00 00    	cmp    0x238(%ebx),%eax
80104fe4:	74 5a                	je     80105040 <piperead+0x110>
80104fe6:	8d 70 01             	lea    0x1(%eax),%esi
80104fe9:	25 ff 01 00 00       	and    $0x1ff,%eax
80104fee:	89 b3 34 02 00 00    	mov    %esi,0x234(%ebx)
80104ff4:	0f b6 44 03 34       	movzbl 0x34(%ebx,%eax,1),%eax
80104ff9:	88 04 0f             	mov    %al,(%edi,%ecx,1)
80104ffc:	83 c1 01             	add    $0x1,%ecx
80104fff:	39 4d 10             	cmp    %ecx,0x10(%ebp)
80105002:	75 d4                	jne    80104fd8 <piperead+0xa8>
80105004:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
8010500a:	83 ec 0c             	sub    $0xc,%esp
8010500d:	50                   	push   %eax
8010500e:	e8 db 0d 00 00       	call   80105dee <wakeup>
80105013:	89 1c 24             	mov    %ebx,(%esp)
80105016:	e8 75 13 00 00       	call   80106390 <release>
8010501b:	8b 45 10             	mov    0x10(%ebp),%eax
8010501e:	83 c4 10             	add    $0x10,%esp
80105021:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105024:	5b                   	pop    %ebx
80105025:	5e                   	pop    %esi
80105026:	5f                   	pop    %edi
80105027:	5d                   	pop    %ebp
80105028:	c3                   	ret    
80105029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105030:	c7 45 10 00 00 00 00 	movl   $0x0,0x10(%ebp)
80105037:	eb cb                	jmp    80105004 <piperead+0xd4>
80105039:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80105040:	89 4d 10             	mov    %ecx,0x10(%ebp)
80105043:	eb bf                	jmp    80105004 <piperead+0xd4>

80105045 <hlt>:
  return mycpu()-cpus;
}

// Halt the processor.
static void hlt()
{
80105045:	55                   	push   %ebp
80105046:	89 e5                	mov    %esp,%ebp
    asm("hlt");
80105048:	f4                   	hlt    
}
80105049:	5d                   	pop    %ebp
8010504a:	c3                   	ret    

8010504b <wakeup1>:
//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
8010504b:	55                   	push   %ebp
8010504c:	89 e5                	mov    %esp,%ebp
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
8010504e:	ba b4 0b 13 80       	mov    $0x80130bb4,%edx
80105053:	eb 18                	jmp    8010506d <wakeup1+0x22>
    if(p->state == SLEEPING && p->chan == chan)
80105055:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
80105059:	75 0c                	jne    80105067 <wakeup1+0x1c>
8010505b:	39 42 40             	cmp    %eax,0x40(%edx)
8010505e:	75 07                	jne    80105067 <wakeup1+0x1c>
      p->state = RUNNABLE;
80105060:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105067:	81 c2 c0 02 00 00    	add    $0x2c0,%edx
8010506d:	81 fa b4 bb 13 80    	cmp    $0x8013bbb4,%edx
80105073:	72 e0                	jb     80105055 <wakeup1+0xa>
    if(p->state == SLEEPING && p->chan == chan)
      p->state = RUNNABLE;
}
80105075:	5d                   	pop    %ebp
80105076:	c3                   	ret    

80105077 <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
80105077:	55                   	push   %ebp
80105078:	89 e5                	mov    %esp,%ebp
8010507a:	53                   	push   %ebx
8010507b:	83 ec 10             	sub    $0x10,%esp
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
8010507e:	68 80 0b 13 80       	push   $0x80130b80
80105083:	e8 e8 11 00 00       	call   80106270 <acquire>

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105088:	83 c4 10             	add    $0x10,%esp
8010508b:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105090:	eb 0c                	jmp    8010509e <allocproc+0x27>
    if(p->state == UNUSED)
80105092:	83 7b 0c 00          	cmpl   $0x0,0xc(%ebx)
80105096:	74 28                	je     801050c0 <allocproc+0x49>
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105098:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
8010509e:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
801050a4:	72 ec                	jb     80105092 <allocproc+0x1b>
    if(p->state == UNUSED)
      goto found;

  release(&ptable.lock);
801050a6:	83 ec 0c             	sub    $0xc,%esp
801050a9:	68 80 0b 13 80       	push   $0x80130b80
801050ae:	e8 dd 12 00 00       	call   80106390 <release>
  return 0;
801050b3:	83 c4 10             	add    $0x10,%esp
801050b6:	b8 00 00 00 00       	mov    $0x0,%eax
801050bb:	e9 9c 00 00 00       	jmp    8010515c <allocproc+0xe5>

found:
  p->state = EMBRYO;
801050c0:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
  p->killed = 0; // Prevents process allocating with killed=1 flag. This behavior was exhibited as a bug and this prevents it.
801050c7:	c7 43 44 00 00 00 00 	movl   $0x0,0x44(%ebx)
  release(&ptable.lock);
801050ce:	83 ec 0c             	sub    $0xc,%esp
801050d1:	68 80 0b 13 80       	push   $0x80130b80
801050d6:	e8 b5 12 00 00       	call   80106390 <release>

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
801050db:	e8 f0 de ff ff       	call   80102fd0 <kalloc>
801050e0:	89 43 08             	mov    %eax,0x8(%ebx)
801050e3:	83 c4 10             	add    $0x10,%esp
801050e6:	85 c0                	test   %eax,%eax
801050e8:	75 09                	jne    801050f3 <allocproc+0x7c>
    p->state = UNUSED;
801050ea:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    return 0;
801050f1:	eb 69                	jmp    8010515c <allocproc+0xe5>
  }
  sp = p->kstack + KSTACKSIZE;

  // Leave room for trap frame.
  sp -= sizeof *p->tf;
801050f3:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
  p->tf = (struct trapframe*)sp;
801050f9:	89 53 38             	mov    %edx,0x38(%ebx)

  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;
801050fc:	c7 80 b0 0f 00 00 51 	movl   $0x80108051,0xfb0(%eax)
80105103:	80 10 80 

  sp -= sizeof *p->context;
80105106:	05 9c 0f 00 00       	add    $0xf9c,%eax
  p->context = (struct context*)sp;
8010510b:	89 43 3c             	mov    %eax,0x3c(%ebx)
  memset(p->context, 0, sizeof *p->context);
8010510e:	83 ec 04             	sub    $0x4,%esp
80105111:	6a 14                	push   $0x14
80105113:	6a 00                	push   $0x0
80105115:	50                   	push   %eax
80105116:	e8 c5 12 00 00       	call   801063e0 <memset>
  p->context->eip = (uint)forkret;
8010511b:	8b 43 3c             	mov    0x3c(%ebx),%eax
8010511e:	c7 40 10 61 51 10 80 	movl   $0x80105161,0x10(%eax)

  // Set cgroup to none.
  p->cgroup = 0;
80105125:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%ebx)
8010512c:	00 00 00 

  // Set cpu information.
  p->cpu_account_frame = 0;
8010512f:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%ebx)
80105136:	00 00 00 
  p->cpu_time = 0;
80105139:	c7 83 b0 02 00 00 00 	movl   $0x0,0x2b0(%ebx)
80105140:	00 00 00 
  p->cpu_period_time = 0;
80105143:	c7 83 b4 02 00 00 00 	movl   $0x0,0x2b4(%ebx)
8010514a:	00 00 00 
  p->cpu_percent = 0;
8010514d:	c7 83 b8 02 00 00 00 	movl   $0x0,0x2b8(%ebx)
80105154:	00 00 00 

  return p;
80105157:	83 c4 10             	add    $0x10,%esp
8010515a:	89 d8                	mov    %ebx,%eax
}
8010515c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010515f:	c9                   	leave  
80105160:	c3                   	ret    

80105161 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
80105161:	55                   	push   %ebp
80105162:	89 e5                	mov    %esp,%ebp
80105164:	83 ec 14             	sub    $0x14,%esp
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
80105167:	68 80 0b 13 80       	push   $0x80130b80
8010516c:	e8 1f 12 00 00       	call   80106390 <release>

  if (first) {
80105171:	83 c4 10             	add    $0x10,%esp
80105174:	83 3d 00 00 12 80 00 	cmpl   $0x0,0x80120000
8010517b:	74 28                	je     801051a5 <forkret+0x44>
    // Some initialization functions must be run in the context
    // of a regular process (e.g., they call sleep), and thus cannot
    // be run from main().
    first = 0;
8010517d:	c7 05 00 00 12 80 00 	movl   $0x0,0x80120000
80105184:	00 00 00 
    iinit(ROOTDEV);
80105187:	83 ec 0c             	sub    $0xc,%esp
8010518a:	6a 01                	push   $0x1
8010518c:	e8 4f cb ff ff       	call   80101ce0 <iinit>
    initlog(ROOTDEV);
80105191:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
80105198:	e8 a3 e5 ff ff       	call   80103740 <initlog>
    mntinit(); // initialize mounts
8010519d:	e8 3e ec ff ff       	call   80103de0 <mntinit>
801051a2:	83 c4 10             	add    $0x10,%esp
  }

  // Return to "caller", actually trapret (see allocproc).
}
801051a5:	c9                   	leave  
801051a6:	c3                   	ret    

801051a7 <get_pid_for_ns>:
  struct spinlock lock;
  struct proc proc[NPROC];
} ptable;

/*Return the process id inside the given namespace, else returns zero*/
int get_pid_for_ns(struct proc* proc, struct pid_ns* pid_ns) {
801051a7:	55                   	push   %ebp
801051a8:	89 e5                	mov    %esp,%ebp
801051aa:	8b 55 08             	mov    0x8(%ebp),%edx
801051ad:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  for (int i = 0; i < MAX_PID_NS_DEPTH; i++) {
801051b0:	b8 00 00 00 00       	mov    $0x0,%eax
801051b5:	eb 0f                	jmp    801051c6 <get_pid_for_ns+0x1f>
    if (proc->pids[i].pid_ns == pid_ns) {
801051b7:	39 4c c2 14          	cmp    %ecx,0x14(%edx,%eax,8)
801051bb:	75 06                	jne    801051c3 <get_pid_for_ns+0x1c>
      return proc->pids[i].pid;
801051bd:	8b 44 c2 18          	mov    0x18(%edx,%eax,8),%eax
801051c1:	eb 0d                	jmp    801051d0 <get_pid_for_ns+0x29>
  struct proc proc[NPROC];
} ptable;

/*Return the process id inside the given namespace, else returns zero*/
int get_pid_for_ns(struct proc* proc, struct pid_ns* pid_ns) {
  for (int i = 0; i < MAX_PID_NS_DEPTH; i++) {
801051c3:	83 c0 01             	add    $0x1,%eax
801051c6:	83 f8 03             	cmp    $0x3,%eax
801051c9:	7e ec                	jle    801051b7 <get_pid_for_ns+0x10>
    if (proc->pids[i].pid_ns == pid_ns) {
      return proc->pids[i].pid;
    }
  }
  return 0;
801051cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
801051d0:	5d                   	pop    %ebp
801051d1:	c3                   	ret    

801051d2 <pinit>:
extern void trapret(void);
static void wakeup1(void *chan);

void
pinit(void)
{
801051d2:	55                   	push   %ebp
801051d3:	89 e5                	mov    %esp,%ebp
801051d5:	83 ec 10             	sub    $0x10,%esp
  initlock(&ptable.lock, "ptable");
801051d8:	68 ee ee 10 80       	push   $0x8010eeee
801051dd:	68 80 0b 13 80       	push   $0x80130b80
801051e2:	e8 89 0f 00 00       	call   80106170 <initlock>
}
801051e7:	83 c4 10             	add    $0x10,%esp
801051ea:	c9                   	leave  
801051eb:	c3                   	ret    

801051ec <mycpu>:

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu*
mycpu(void)
{
801051ec:	55                   	push   %ebp
801051ed:	89 e5                	mov    %esp,%ebp
801051ef:	83 ec 08             	sub    $0x8,%esp

static inline uint
readeflags(void)
{
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
801051f2:	9c                   	pushf  
801051f3:	58                   	pop    %eax
  int apicid, i;

  if(readeflags()&FL_IF)
801051f4:	f6 c4 02             	test   $0x2,%ah
801051f7:	74 0d                	je     80105206 <mycpu+0x1a>
    panic("mycpu called with interrupts enabled\n");
801051f9:	83 ec 0c             	sub    $0xc,%esp
801051fc:	68 f4 ef 10 80       	push   $0x8010eff4
80105201:	e8 ca b1 ff ff       	call   801003d0 <panic>

  apicid = lapicid();
80105206:	e8 65 e1 ff ff       	call   80103370 <lapicid>
  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
  // a reverse map, or reserve a register to store &cpus[i].
  for (i = 0; i < ncpu; ++i) {
8010520b:	ba 00 00 00 00       	mov    $0x0,%edx
80105210:	eb 14                	jmp    80105226 <mycpu+0x3a>
    if (cpus[i].apicid == apicid)
80105212:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
80105218:	0f b6 89 00 05 13 80 	movzbl -0x7fecfb00(%ecx),%ecx
8010521f:	39 c8                	cmp    %ecx,%eax
80105221:	74 18                	je     8010523b <mycpu+0x4f>
    panic("mycpu called with interrupts enabled\n");

  apicid = lapicid();
  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
  // a reverse map, or reserve a register to store &cpus[i].
  for (i = 0; i < ncpu; ++i) {
80105223:	83 c2 01             	add    $0x1,%edx
80105226:	3b 15 80 0a 13 80    	cmp    0x80130a80,%edx
8010522c:	7c e4                	jl     80105212 <mycpu+0x26>
    if (cpus[i].apicid == apicid)
      return &cpus[i];
  }
  panic("unknown apicid\n");
8010522e:	83 ec 0c             	sub    $0xc,%esp
80105231:	68 f5 ee 10 80       	push   $0x8010eef5
80105236:	e8 95 b1 ff ff       	call   801003d0 <panic>
  apicid = lapicid();
  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
  // a reverse map, or reserve a register to store &cpus[i].
  for (i = 0; i < ncpu; ++i) {
    if (cpus[i].apicid == apicid)
      return &cpus[i];
8010523b:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
80105241:	05 00 05 13 80       	add    $0x80130500,%eax
  }
  panic("unknown apicid\n");
}
80105246:	c9                   	leave  
80105247:	c3                   	ret    

80105248 <cpuid>:
  initlock(&ptable.lock, "ptable");
}

// Must be called with interrupts disabled
int
cpuid() {
80105248:	55                   	push   %ebp
80105249:	89 e5                	mov    %esp,%ebp
8010524b:	83 ec 08             	sub    $0x8,%esp
  return mycpu()-cpus;
8010524e:	e8 99 ff ff ff       	call   801051ec <mycpu>
80105253:	2d 00 05 13 80       	sub    $0x80130500,%eax
80105258:	c1 f8 04             	sar    $0x4,%eax
8010525b:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
}
80105261:	c9                   	leave  
80105262:	c3                   	ret    

80105263 <myproc>:
}

// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
struct proc*
myproc(void) {
80105263:	55                   	push   %ebp
80105264:	89 e5                	mov    %esp,%ebp
80105266:	53                   	push   %ebx
80105267:	83 ec 04             	sub    $0x4,%esp
  struct cpu *c;
  struct proc *p;
  pushcli();
8010526a:	e8 c1 0f 00 00       	call   80106230 <pushcli>
  c = mycpu();
8010526f:	e8 78 ff ff ff       	call   801051ec <mycpu>
  p = c->proc;
80105274:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
8010527a:	e8 a1 10 00 00       	call   80106320 <popcli>
  return p;
}
8010527f:	89 d8                	mov    %ebx,%eax
80105281:	83 c4 04             	add    $0x4,%esp
80105284:	5b                   	pop    %ebx
80105285:	5d                   	pop    %ebp
80105286:	c3                   	ret    

80105287 <proc_pid>:
    }
  }
  return 0;
}

int proc_pid(struct proc* proc) {
80105287:	55                   	push   %ebp
80105288:	89 e5                	mov    %esp,%ebp
8010528a:	83 ec 08             	sub    $0x8,%esp
    return get_pid_for_ns(proc, myproc()->nsproxy->pid_ns);
8010528d:	e8 d1 ff ff ff       	call   80105263 <myproc>
80105292:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80105298:	83 ec 08             	sub    $0x8,%esp
8010529b:	ff 70 08             	pushl  0x8(%eax)
8010529e:	ff 75 08             	pushl  0x8(%ebp)
801052a1:	e8 01 ff ff ff       	call   801051a7 <get_pid_for_ns>
801052a6:	83 c4 10             	add    $0x10,%esp
}
801052a9:	c9                   	leave  
801052aa:	c3                   	ret    

801052ab <userinit>:

//PAGEBREAK: 32
// Set up first user process.
void
userinit(void)
{
801052ab:	55                   	push   %ebp
801052ac:	89 e5                	mov    %esp,%ebp
801052ae:	53                   	push   %ebx
801052af:	83 ec 04             	sub    $0x4,%esp
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];

  // Initialize the root cgroup.
  cgroup_initialize(cgroup_root(), 0, 0);
801052b2:	e8 39 7c 00 00       	call   8010cef0 <cgroup_root>
801052b7:	83 ec 04             	sub    $0x4,%esp
801052ba:	6a 00                	push   $0x0
801052bc:	6a 00                	push   $0x0
801052be:	50                   	push   %eax
801052bf:	e8 ec 8a 00 00       	call   8010ddb0 <cgroup_initialize>

  p = allocproc();
801052c4:	e8 ae fd ff ff       	call   80105077 <allocproc>
801052c9:	89 c3                	mov    %eax,%ebx

  initproc = p;
801052cb:	a3 b8 05 12 80       	mov    %eax,0x801205b8
  if((p->pgdir = setupkvm()) == 0)
801052d0:	e8 9b 44 00 00       	call   80109770 <setupkvm>
801052d5:	89 43 04             	mov    %eax,0x4(%ebx)
801052d8:	83 c4 10             	add    $0x10,%esp
801052db:	85 c0                	test   %eax,%eax
801052dd:	75 0d                	jne    801052ec <userinit+0x41>
    panic("userinit: out of memory?");
801052df:	83 ec 0c             	sub    $0xc,%esp
801052e2:	68 05 ef 10 80       	push   $0x8010ef05
801052e7:	e8 e4 b0 ff ff       	call   801003d0 <panic>
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
801052ec:	83 ec 04             	sub    $0x4,%esp
801052ef:	68 2c 00 00 00       	push   $0x2c
801052f4:	68 60 04 12 80       	push   $0x80120460
801052f9:	50                   	push   %eax
801052fa:	e8 a1 40 00 00       	call   801093a0 <inituvm>
  p->sz = PGSIZE;
801052ff:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
  memset(p->tf, 0, sizeof(*p->tf));
80105305:	83 c4 0c             	add    $0xc,%esp
80105308:	6a 4c                	push   $0x4c
8010530a:	6a 00                	push   $0x0
8010530c:	ff 73 38             	pushl  0x38(%ebx)
8010530f:	e8 cc 10 00 00       	call   801063e0 <memset>
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
80105314:	8b 43 38             	mov    0x38(%ebx),%eax
80105317:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
8010531d:	8b 43 38             	mov    0x38(%ebx),%eax
80105320:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
  p->tf->es = p->tf->ds;
80105326:	8b 43 38             	mov    0x38(%ebx),%eax
80105329:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
8010532d:	66 89 50 28          	mov    %dx,0x28(%eax)
  p->tf->ss = p->tf->ds;
80105331:	8b 43 38             	mov    0x38(%ebx),%eax
80105334:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
80105338:	66 89 50 48          	mov    %dx,0x48(%eax)
  p->tf->eflags = FL_IF;
8010533c:	8b 43 38             	mov    0x38(%ebx),%eax
8010533f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
  p->tf->esp = PGSIZE;
80105346:	8b 43 38             	mov    0x38(%ebx),%eax
80105349:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
  p->tf->eip = 0;  // beginning of initcode.S
80105350:	8b 43 38             	mov    0x38(%ebx),%eax
80105353:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

  safestrcpy(p->name, "initcode", sizeof(p->name));
8010535a:	8d 83 90 00 00 00    	lea    0x90(%ebx),%eax
80105360:	83 c4 0c             	add    $0xc,%esp
80105363:	6a 10                	push   $0x10
80105365:	68 1e ef 10 80       	push   $0x8010ef1e
8010536a:	50                   	push   %eax
8010536b:	e8 c0 12 00 00       	call   80106630 <safestrcpy>
  p->cwd = initprocessroot(&p->cwdmount);
80105370:	8d 83 8c 00 00 00    	lea    0x8c(%ebx),%eax
80105376:	89 04 24             	mov    %eax,(%esp)
80105379:	e8 b2 d4 ff ff       	call   80102830 <initprocessroot>
8010537e:	89 83 88 00 00 00    	mov    %eax,0x88(%ebx)
  safestrcpy(p->cwdp, "/", sizeof(p->cwdp));
80105384:	8d 83 ac 00 00 00    	lea    0xac(%ebx),%eax
8010538a:	83 c4 0c             	add    $0xc,%esp
8010538d:	68 00 02 00 00       	push   $0x200
80105392:	68 27 ef 10 80       	push   $0x8010ef27
80105397:	50                   	push   %eax
80105398:	e8 93 12 00 00       	call   80106630 <safestrcpy>
  p->nsproxy = emptynsproxy();
8010539d:	e8 03 f7 ff ff       	call   80104aa5 <emptynsproxy>
801053a2:	89 83 a0 00 00 00    	mov    %eax,0xa0(%ebx)

  p->ns_pid = pid_ns_next_pid(p->nsproxy->pid_ns);
801053a8:	83 c4 04             	add    $0x4,%esp
801053ab:	ff 70 08             	pushl  0x8(%eax)
801053ae:	e8 1d f3 ff ff       	call   801046d0 <pid_ns_next_pid>
801053b3:	89 43 10             	mov    %eax,0x10(%ebx)

  p->pids[0].pid = p->ns_pid;
801053b6:	89 43 18             	mov    %eax,0x18(%ebx)
  p->pids[0].pid_ns = p->nsproxy->pid_ns;
801053b9:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
801053bf:	8b 40 08             	mov    0x8(%eax),%eax
801053c2:	89 43 14             	mov    %eax,0x14(%ebx)

  // this assignment to p->state lets other cores
  // run this process. the acquire forces the above
  // writes to be visible, and the lock is also needed
  // because the assignment might not be atomic.
  acquire(&ptable.lock);
801053c5:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
801053cc:	e8 9f 0e 00 00       	call   80106270 <acquire>

  // Associate with the root cgroup, can discard return value because
  // this fails only if there is no room.
  cgroup_insert(cgroup_root(), p);
801053d1:	e8 1a 7b 00 00       	call   8010cef0 <cgroup_root>
801053d6:	83 c4 08             	add    $0x8,%esp
801053d9:	53                   	push   %ebx
801053da:	50                   	push   %eax
801053db:	e8 60 7d 00 00       	call   8010d140 <cgroup_insert>

  // Set state to runnable.
  p->state = RUNNABLE;
801053e0:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)

  release(&ptable.lock);
801053e7:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
801053ee:	e8 9d 0f 00 00       	call   80106390 <release>
}
801053f3:	83 c4 10             	add    $0x10,%esp
801053f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801053f9:	c9                   	leave  
801053fa:	c3                   	ret    

801053fb <update_protect_mem>:
  return 0;
}

void
update_protect_mem(struct cgroup* cgroup, int oldsz, int newsz)
{
801053fb:	55                   	push   %ebp
801053fc:	89 e5                	mov    %esp,%ebp
801053fe:	56                   	push   %esi
801053ff:	53                   	push   %ebx
80105400:	8b 5d 08             	mov    0x8(%ebp),%ebx

    if (cgroup == cgroup_root())
80105403:	e8 e8 7a 00 00       	call   8010cef0 <cgroup_root>
80105408:	39 d8                	cmp    %ebx,%eax
8010540a:	74 5f                	je     8010546b <update_protect_mem+0x70>
        return;

    if (cgroup->mem_controller_enabled) {
8010540c:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
80105413:	74 56                	je     8010546b <update_protect_mem+0x70>
        int proc_page = PGROUNDUP(oldsz)/PGSIZE - PGROUNDUP(newsz)/PGSIZE;
80105415:	8b 45 0c             	mov    0xc(%ebp),%eax
80105418:	05 ff 0f 00 00       	add    $0xfff,%eax
8010541d:	c1 f8 0c             	sar    $0xc,%eax
80105420:	8b 4d 10             	mov    0x10(%ebp),%ecx
80105423:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
80105429:	c1 fa 0c             	sar    $0xc,%edx
8010542c:	29 d0                	sub    %edx,%eax
        cgroup->current_page -= proc_page;
8010542e:	8b 8b 3c 03 00 00    	mov    0x33c(%ebx),%ecx
80105434:	29 c1                	sub    %eax,%ecx
80105436:	89 8b 3c 03 00 00    	mov    %ecx,0x33c(%ebx)
        int min = PGROUNDUP(cgroup->min_mem)/PGSIZE;
8010543c:	8b 93 54 03 00 00    	mov    0x354(%ebx),%edx
80105442:	8d b2 ff 0f 00 00    	lea    0xfff(%edx),%esi
80105448:	c1 ee 0c             	shr    $0xc,%esi
        int protect = min - cgroup->current_page;
8010544b:	29 ce                	sub    %ecx,%esi
        if (protect > 0) {//we need to protect memory
8010544d:	85 f6                	test   %esi,%esi
8010544f:	7e 1a                	jle    8010546b <update_protect_mem+0x70>
            increse_protect_counter(protect - cgroup->protected_mem);
80105451:	89 f0                	mov    %esi,%eax
80105453:	2b 83 58 03 00 00    	sub    0x358(%ebx),%eax
80105459:	83 ec 0c             	sub    $0xc,%esp
8010545c:	50                   	push   %eax
8010545d:	e8 be da ff ff       	call   80102f20 <increse_protect_counter>
            cgroup->protected_mem = protect;
80105462:	89 b3 58 03 00 00    	mov    %esi,0x358(%ebx)
80105468:	83 c4 10             	add    $0x10,%esp
        }
    }
}
8010546b:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010546e:	5b                   	pop    %ebx
8010546f:	5e                   	pop    %esi
80105470:	5d                   	pop    %ebp
80105471:	c3                   	ret    

80105472 <growproc>:

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
80105472:	55                   	push   %ebp
80105473:	89 e5                	mov    %esp,%ebp
80105475:	57                   	push   %edi
80105476:	56                   	push   %esi
80105477:	53                   	push   %ebx
80105478:	83 ec 1c             	sub    $0x1c,%esp
8010547b:	8b 75 08             	mov    0x8(%ebp),%esi
  uint sz;
  struct proc* curproc = myproc();
8010547e:	e8 e0 fd ff ff       	call   80105263 <myproc>
80105483:	89 c7                	mov    %eax,%edi
  struct cgroup* cgroup = curproc->cgroup;
80105485:	8b 98 ac 02 00 00    	mov    0x2ac(%eax),%ebx

  // In case trying to grow process's memory over memory limit, and
  // given memory controller is enabled, return failure
  if (n > 0) {
8010548b:	85 f6                	test   %esi,%esi
8010548d:	7e 1d                	jle    801054ac <growproc+0x3a>
    if (curproc->cgroup->mem_controller_enabled &&
8010548f:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
80105496:	74 14                	je     801054ac <growproc+0x3a>
      (curproc->cgroup->current_mem + n) > curproc->cgroup->max_mem)
80105498:	89 f0                	mov    %esi,%eax
8010549a:	03 83 38 03 00 00    	add    0x338(%ebx),%eax
  struct cgroup* cgroup = curproc->cgroup;

  // In case trying to grow process's memory over memory limit, and
  // given memory controller is enabled, return failure
  if (n > 0) {
    if (curproc->cgroup->mem_controller_enabled &&
801054a0:	3b 83 50 03 00 00    	cmp    0x350(%ebx),%eax
801054a6:	0f 87 82 00 00 00    	ja     8010552e <growproc+0xbc>
      (curproc->cgroup->current_mem + n) > curproc->cgroup->max_mem)
      return -1;
  }

  sz = curproc->sz;
801054ac:	8b 07                	mov    (%edi),%eax
801054ae:	89 c2                	mov    %eax,%edx
801054b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if (n > 0) {// In this case we update protected memory inside of allocuvm function  
801054b3:	85 f6                	test   %esi,%esi
801054b5:	7e 19                	jle    801054d0 <growproc+0x5e>
    if ((sz = allocuvm(curproc->pgdir, sz, sz + n, cgroup)) == 0)
801054b7:	53                   	push   %ebx
801054b8:	01 f0                	add    %esi,%eax
801054ba:	50                   	push   %eax
801054bb:	52                   	push   %edx
801054bc:	ff 77 04             	pushl  0x4(%edi)
801054bf:	e8 9c 40 00 00       	call   80109560 <allocuvm>
801054c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801054c7:	83 c4 10             	add    $0x10,%esp
801054ca:	85 c0                	test   %eax,%eax
801054cc:	75 38                	jne    80105506 <growproc+0x94>
801054ce:	eb 65                	jmp    80105535 <growproc+0xc3>
      return -1;
  }
  else if (n < 0) {
801054d0:	85 f6                	test   %esi,%esi
801054d2:	79 32                	jns    80105506 <growproc+0x94>
    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0){
801054d4:	83 ec 04             	sub    $0x4,%esp
801054d7:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801054da:	89 c8                	mov    %ecx,%eax
801054dc:	01 f0                	add    %esi,%eax
801054de:	50                   	push   %eax
801054df:	51                   	push   %ecx
801054e0:	ff 77 04             	pushl  0x4(%edi)
801054e3:	e8 f8 3f 00 00       	call   801094e0 <deallocuvm>
801054e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801054eb:	83 c4 10             	add    $0x10,%esp
801054ee:	85 c0                	test   %eax,%eax
801054f0:	74 4a                	je     8010553c <growproc+0xca>
      return -1;
    }else{
      update_protect_mem(curproc->cgroup, curproc->sz, sz);
801054f2:	83 ec 04             	sub    $0x4,%esp
801054f5:	50                   	push   %eax
801054f6:	ff 37                	pushl  (%edi)
801054f8:	ff b7 ac 02 00 00    	pushl  0x2ac(%edi)
801054fe:	e8 f8 fe ff ff       	call   801053fb <update_protect_mem>
80105503:	83 c4 10             	add    $0x10,%esp
    }
  }

  curproc->sz = sz;
80105506:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105509:	89 07                	mov    %eax,(%edi)

  // Update memory usage in cgroup and its ancestors
  do {
    cgroup->current_mem += n;
8010550b:	01 b3 38 03 00 00    	add    %esi,0x338(%ebx)
    } while ((cgroup = cgroup->parent));
80105511:	8b 9b 08 03 00 00    	mov    0x308(%ebx),%ebx
80105517:	85 db                	test   %ebx,%ebx
80105519:	75 f0                	jne    8010550b <growproc+0x99>

  switchuvm(curproc);
8010551b:	83 ec 0c             	sub    $0xc,%esp
8010551e:	57                   	push   %edi
8010551f:	e8 6c 3d 00 00       	call   80109290 <switchuvm>
  return 0;
80105524:	83 c4 10             	add    $0x10,%esp
80105527:	b8 00 00 00 00       	mov    $0x0,%eax
8010552c:	eb 13                	jmp    80105541 <growproc+0xcf>
  // In case trying to grow process's memory over memory limit, and
  // given memory controller is enabled, return failure
  if (n > 0) {
    if (curproc->cgroup->mem_controller_enabled &&
      (curproc->cgroup->current_mem + n) > curproc->cgroup->max_mem)
      return -1;
8010552e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105533:	eb 0c                	jmp    80105541 <growproc+0xcf>
  }

  sz = curproc->sz;
  if (n > 0) {// In this case we update protected memory inside of allocuvm function  
    if ((sz = allocuvm(curproc->pgdir, sz, sz + n, cgroup)) == 0)
      return -1;
80105535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010553a:	eb 05                	jmp    80105541 <growproc+0xcf>
  }
  else if (n < 0) {
    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0){
      return -1;
8010553c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    cgroup->current_mem += n;
    } while ((cgroup = cgroup->parent));

  switchuvm(curproc);
  return 0;
}
80105541:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105544:	5b                   	pop    %ebx
80105545:	5e                   	pop    %esi
80105546:	5f                   	pop    %edi
80105547:	5d                   	pop    %ebp
80105548:	c3                   	ret    

80105549 <fork>:
// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
80105549:	55                   	push   %ebp
8010554a:	89 e5                	mov    %esp,%ebp
8010554c:	57                   	push   %edi
8010554d:	56                   	push   %esi
8010554e:	53                   	push   %ebx
8010554f:	83 ec 1c             	sub    $0x1c,%esp
  int i, pid;
  struct proc *np;
  struct proc *curproc = myproc();
80105552:	e8 0c fd ff ff       	call   80105263 <myproc>
80105557:	89 c3                	mov    %eax,%ebx

  // Check if the current process has a child pid namespace and if its pid1 was killed.
  if (curproc->child_pid_ns && curproc->child_pid_ns->pid1_ns_killed) {
80105559:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
8010555f:	85 c0                	test   %eax,%eax
80105561:	74 0a                	je     8010556d <fork+0x24>
80105563:	83 78 40 00          	cmpl   $0x0,0x40(%eax)
80105567:	0f 85 13 02 00 00    	jne    80105780 <fork+0x237>
    return -1;
  }

  // In case trying to fork new process and the cgroup reached its process limit,
  // given pid controller is enabled, return failure
  if ( curproc->cgroup->pid_controller_enabled &&
8010556d:	8b 83 ac 02 00 00    	mov    0x2ac(%ebx),%eax
80105573:	80 b8 0f 03 00 00 00 	cmpb   $0x0,0x30f(%eax)
8010557a:	74 15                	je     80105591 <fork+0x48>
       (curproc->cgroup->num_of_procs + 1) > curproc->cgroup->max_num_of_procs )
8010557c:	8b 90 04 03 00 00    	mov    0x304(%eax),%edx
80105582:	83 c2 01             	add    $0x1,%edx
    return -1;
  }

  // In case trying to fork new process and the cgroup reached its process limit,
  // given pid controller is enabled, return failure
  if ( curproc->cgroup->pid_controller_enabled &&
80105585:	3b 90 2c 03 00 00    	cmp    0x32c(%eax),%edx
8010558b:	0f 8f f6 01 00 00    	jg     80105787 <fork+0x23e>
       (curproc->cgroup->num_of_procs + 1) > curproc->cgroup->max_num_of_procs )
           return -1;

  // In case trying to fork a new process and the cgroup reached its memory limit,
  // given memory controller is enabled, return failure
  if (curproc->cgroup->mem_controller_enabled &&
80105591:	80 b8 13 03 00 00 00 	cmpb   $0x0,0x313(%eax)
80105598:	74 14                	je     801055ae <fork+0x65>
    (curproc->cgroup->current_mem + curproc->sz) > curproc->cgroup->max_mem)
8010559a:	8b 13                	mov    (%ebx),%edx
8010559c:	03 90 38 03 00 00    	add    0x338(%eax),%edx
       (curproc->cgroup->num_of_procs + 1) > curproc->cgroup->max_num_of_procs )
           return -1;

  // In case trying to fork a new process and the cgroup reached its memory limit,
  // given memory controller is enabled, return failure
  if (curproc->cgroup->mem_controller_enabled &&
801055a2:	3b 90 50 03 00 00    	cmp    0x350(%eax),%edx
801055a8:	0f 87 e0 01 00 00    	ja     8010578e <fork+0x245>
    (curproc->cgroup->current_mem + curproc->sz) > curproc->cgroup->max_mem)
    return -1;

  // Allocate process.
  if ((np = allocproc()) == 0) {
801055ae:	e8 c4 fa ff ff       	call   80105077 <allocproc>
801055b3:	89 c7                	mov    %eax,%edi
801055b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801055b8:	85 c0                	test   %eax,%eax
801055ba:	0f 84 d5 01 00 00    	je     80105795 <fork+0x24c>
    return -1;
  }

  // Copy process state from proc.
  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
801055c0:	83 ec 08             	sub    $0x8,%esp
801055c3:	ff 33                	pushl  (%ebx)
801055c5:	ff 73 04             	pushl  0x4(%ebx)
801055c8:	e8 73 42 00 00       	call   80109840 <copyuvm>
801055cd:	89 47 04             	mov    %eax,0x4(%edi)
801055d0:	83 c4 10             	add    $0x10,%esp
801055d3:	85 c0                	test   %eax,%eax
801055d5:	75 29                	jne    80105600 <fork+0xb7>
    kfree(np->kstack);
801055d7:	83 ec 0c             	sub    $0xc,%esp
801055da:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
801055dd:	ff 73 08             	pushl  0x8(%ebx)
801055e0:	e8 1b d7 ff ff       	call   80102d00 <kfree>
    np->kstack = 0;
801055e5:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
    np->state = UNUSED;
801055ec:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    return -1;
801055f3:	83 c4 10             	add    $0x10,%esp
801055f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801055fb:	e9 9a 01 00 00       	jmp    8010579a <fork+0x251>
  }
  np->sz = curproc->sz;
80105600:	8b 03                	mov    (%ebx),%eax
80105602:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80105605:	89 07                	mov    %eax,(%edi)
  np->parent = curproc;
80105607:	89 5f 34             	mov    %ebx,0x34(%edi)
  *np->tf = *curproc->tf;
8010560a:	89 f8                	mov    %edi,%eax
8010560c:	8b 7f 38             	mov    0x38(%edi),%edi
8010560f:	8b 73 38             	mov    0x38(%ebx),%esi
80105612:	b9 13 00 00 00       	mov    $0x13,%ecx
80105617:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;
80105619:	8b 40 38             	mov    0x38(%eax),%eax
8010561c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  for (i = 0; i < NOFILE; i++)
80105623:	be 00 00 00 00       	mov    $0x0,%esi
80105628:	eb 1e                	jmp    80105648 <fork+0xff>
    if (curproc->ofile[i])
8010562a:	8b 44 b3 48          	mov    0x48(%ebx,%esi,4),%eax
8010562e:	85 c0                	test   %eax,%eax
80105630:	74 13                	je     80105645 <fork+0xfc>
      np->ofile[i] = filedup(curproc->ofile[i]);
80105632:	83 ec 0c             	sub    $0xc,%esp
80105635:	50                   	push   %eax
80105636:	e8 95 bf ff ff       	call   801015d0 <filedup>
8010563b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010563e:	89 44 b1 48          	mov    %eax,0x48(%ecx,%esi,4)
80105642:	83 c4 10             	add    $0x10,%esp
  *np->tf = *curproc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for (i = 0; i < NOFILE; i++)
80105645:	83 c6 01             	add    $0x1,%esi
80105648:	83 fe 0f             	cmp    $0xf,%esi
8010564b:	7e dd                	jle    8010562a <fork+0xe1>
    if (curproc->ofile[i])
      np->ofile[i] = filedup(curproc->ofile[i]);
  np->cwd = idup(curproc->cwd);
8010564d:	83 ec 0c             	sub    $0xc,%esp
80105650:	ff b3 88 00 00 00    	pushl  0x88(%ebx)
80105656:	e8 45 c8 ff ff       	call   80101ea0 <idup>
8010565b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
8010565e:	89 87 88 00 00 00    	mov    %eax,0x88(%edi)
  safestrcpy(np->cwdp, curproc->cwdp, sizeof(curproc->cwdp));
80105664:	8d 93 ac 00 00 00    	lea    0xac(%ebx),%edx
8010566a:	89 f8                	mov    %edi,%eax
8010566c:	05 ac 00 00 00       	add    $0xac,%eax
80105671:	83 c4 0c             	add    $0xc,%esp
80105674:	68 00 02 00 00       	push   $0x200
80105679:	52                   	push   %edx
8010567a:	50                   	push   %eax
8010567b:	e8 b0 0f 00 00       	call   80106630 <safestrcpy>
  np->cwdmount = mntdup(curproc->cwdmount);
80105680:	83 c4 04             	add    $0x4,%esp
80105683:	ff b3 8c 00 00 00    	pushl  0x8c(%ebx)
80105689:	e8 ab e7 ff ff       	call   80103e39 <mntdup>
8010568e:	89 87 8c 00 00 00    	mov    %eax,0x8c(%edi)

  struct pid_ns* cur = curproc->child_pid_ns;
80105694:	8b b3 a4 00 00 00    	mov    0xa4(%ebx),%esi
  if (cur) {
8010569a:	83 c4 10             	add    $0x10,%esp
8010569d:	85 f6                	test   %esi,%esi
8010569f:	74 1f                	je     801056c0 <fork+0x177>
    np->nsproxy = namespace_replace_pid_ns(curproc->nsproxy, cur);
801056a1:	83 ec 08             	sub    $0x8,%esp
801056a4:	56                   	push   %esi
801056a5:	ff b3 a0 00 00 00    	pushl  0xa0(%ebx)
801056ab:	e8 37 f4 ff ff       	call   80104ae7 <namespace_replace_pid_ns>
801056b0:	89 87 a0 00 00 00    	mov    %eax,0xa0(%edi)
801056b6:	83 c4 10             	add    $0x10,%esp
  *np->tf = *curproc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for (i = 0; i < NOFILE; i++)
801056b9:	bf 00 00 00 00       	mov    $0x0,%edi
801056be:	eb 51                	jmp    80105711 <fork+0x1c8>

  struct pid_ns* cur = curproc->child_pid_ns;
  if (cur) {
    np->nsproxy = namespace_replace_pid_ns(curproc->nsproxy, cur);
  } else {
    np->nsproxy = namespacedup(curproc->nsproxy);
801056c0:	83 ec 0c             	sub    $0xc,%esp
801056c3:	ff b3 a0 00 00 00    	pushl  0xa0(%ebx)
801056c9:	e8 a9 f3 ff ff       	call   80104a77 <namespacedup>
801056ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801056d1:	89 82 a0 00 00 00    	mov    %eax,0xa0(%edx)
    cur = np->nsproxy->pid_ns;
801056d7:	8b 70 08             	mov    0x8(%eax),%esi
801056da:	83 c4 10             	add    $0x10,%esp
801056dd:	eb da                	jmp    801056b9 <fork+0x170>
  }

  // for each pid_ns get me a pid
  i = 0;
  while (cur) {
    if (i >= MAX_PID_NS_DEPTH) {
801056df:	83 ff 03             	cmp    $0x3,%edi
801056e2:	7e 0d                	jle    801056f1 <fork+0x1a8>
      panic("too many danif!");
801056e4:	83 ec 0c             	sub    $0xc,%esp
801056e7:	68 29 ef 10 80       	push   $0x8010ef29
801056ec:	e8 df ac ff ff       	call   801003d0 <panic>
    }

    np->pids[i].pid = pid_ns_next_pid(cur);
801056f1:	83 ec 0c             	sub    $0xc,%esp
801056f4:	56                   	push   %esi
801056f5:	e8 d6 ef ff ff       	call   801046d0 <pid_ns_next_pid>
801056fa:	8d 57 02             	lea    0x2(%edi),%edx
801056fd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80105700:	89 44 d1 08          	mov    %eax,0x8(%ecx,%edx,8)
    np->pids[i].pid_ns = cur;
80105704:	89 74 d1 04          	mov    %esi,0x4(%ecx,%edx,8)
    i++;
80105708:	83 c7 01             	add    $0x1,%edi
    cur = cur->parent;
8010570b:	8b 76 04             	mov    0x4(%esi),%esi
8010570e:	83 c4 10             	add    $0x10,%esp
    cur = np->nsproxy->pid_ns;
  }

  // for each pid_ns get me a pid
  i = 0;
  while (cur) {
80105711:	85 f6                	test   %esi,%esi
80105713:	75 ca                	jne    801056df <fork+0x196>
    np->pids[i].pid_ns = cur;
    i++;
    cur = cur->parent;
  }

  np->ns_pid = np->pids[0].pid;
80105715:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80105718:	8b 47 18             	mov    0x18(%edi),%eax
8010571b:	89 47 10             	mov    %eax,0x10(%edi)

  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
8010571e:	8d 93 90 00 00 00    	lea    0x90(%ebx),%edx
80105724:	89 f8                	mov    %edi,%eax
80105726:	05 90 00 00 00       	add    $0x90,%eax
8010572b:	83 ec 04             	sub    $0x4,%esp
8010572e:	6a 10                	push   $0x10
80105730:	52                   	push   %edx
80105731:	50                   	push   %eax
80105732:	e8 f9 0e 00 00       	call   80106630 <safestrcpy>

  pid = get_pid_for_ns(np, curproc->nsproxy->pid_ns);
80105737:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
8010573d:	83 c4 08             	add    $0x8,%esp
80105740:	ff 70 08             	pushl  0x8(%eax)
80105743:	57                   	push   %edi
80105744:	e8 5e fa ff ff       	call   801051a7 <get_pid_for_ns>
80105749:	89 c6                	mov    %eax,%esi

  acquire(&ptable.lock);
8010574b:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105752:	e8 19 0b 00 00       	call   80106270 <acquire>

  // Associate the new process with the current process cgroup.
  // can discard return value because this fails only if there is no room
  // which is checked earlier by allocproc.
  cgroup_insert(curproc->cgroup, np);
80105757:	83 c4 08             	add    $0x8,%esp
8010575a:	57                   	push   %edi
8010575b:	ff b3 ac 02 00 00    	pushl  0x2ac(%ebx)
80105761:	e8 da 79 00 00       	call   8010d140 <cgroup_insert>

  // Set new process to runnable.
  np->state = RUNNABLE;
80105766:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)

  release(&ptable.lock);
8010576d:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105774:	e8 17 0c 00 00       	call   80106390 <release>

  return pid;
80105779:	83 c4 10             	add    $0x10,%esp
8010577c:	89 f0                	mov    %esi,%eax
8010577e:	eb 1a                	jmp    8010579a <fork+0x251>
  struct proc *np;
  struct proc *curproc = myproc();

  // Check if the current process has a child pid namespace and if its pid1 was killed.
  if (curproc->child_pid_ns && curproc->child_pid_ns->pid1_ns_killed) {
    return -1;
80105780:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105785:	eb 13                	jmp    8010579a <fork+0x251>

  // In case trying to fork new process and the cgroup reached its process limit,
  // given pid controller is enabled, return failure
  if ( curproc->cgroup->pid_controller_enabled &&
       (curproc->cgroup->num_of_procs + 1) > curproc->cgroup->max_num_of_procs )
           return -1;
80105787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010578c:	eb 0c                	jmp    8010579a <fork+0x251>

  // In case trying to fork a new process and the cgroup reached its memory limit,
  // given memory controller is enabled, return failure
  if (curproc->cgroup->mem_controller_enabled &&
    (curproc->cgroup->current_mem + curproc->sz) > curproc->cgroup->max_mem)
    return -1;
8010578e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105793:	eb 05                	jmp    8010579a <fork+0x251>

  // Allocate process.
  if ((np = allocproc()) == 0) {
    return -1;
80105795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  np->state = RUNNABLE;

  release(&ptable.lock);

  return pid;
}
8010579a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010579d:	5b                   	pop    %ebx
8010579e:	5e                   	pop    %esi
8010579f:	5f                   	pop    %edi
801057a0:	5d                   	pop    %ebp
801057a1:	c3                   	ret    

801057a2 <kill_proc>:

/*Kill the given process p, and set its parent to given process reaper*/
void kill_proc(struct proc* p, struct proc* reaper) {
801057a2:	55                   	push   %ebp
801057a3:	89 e5                	mov    %esp,%ebp
801057a5:	53                   	push   %ebx
801057a6:	83 ec 04             	sub    $0x4,%esp
801057a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   p->killed = 1;
801057ac:	c7 43 44 01 00 00 00 	movl   $0x1,0x44(%ebx)
   if (p->state == SLEEPING)
801057b3:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
801057b7:	75 07                	jne    801057c0 <kill_proc+0x1e>
    p->state = RUNNABLE;
801057b9:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   p->parent = reaper;
801057c0:	8b 45 0c             	mov    0xc(%ebp),%eax
801057c3:	89 43 34             	mov    %eax,0x34(%ebx)
   cgroup_erase(p->cgroup, p);
801057c6:	83 ec 08             	sub    $0x8,%esp
801057c9:	53                   	push   %ebx
801057ca:	ff b3 ac 02 00 00    	pushl  0x2ac(%ebx)
801057d0:	e8 4b 7a 00 00       	call   8010d220 <cgroup_erase>
   update_protect_mem(p->cgroup, p->sz, 0);
801057d5:	83 c4 0c             	add    $0xc,%esp
801057d8:	6a 00                	push   $0x0
801057da:	ff 33                	pushl  (%ebx)
801057dc:	ff b3 ac 02 00 00    	pushl  0x2ac(%ebx)
801057e2:	e8 14 fc ff ff       	call   801053fb <update_protect_mem>
}
801057e7:	83 c4 10             	add    $0x10,%esp
801057ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801057ed:	c9                   	leave  
801057ee:	c3                   	ret    

801057ef <kill_all_pid_ns>:

/*Kill all the processes inside the namespace of a given process, called parent
reaper in this case becomes their parent process*/
void kill_all_pid_ns(struct proc* parent, struct proc* reaper, struct pid_ns* curpidns) {
801057ef:	55                   	push   %ebp
801057f0:	89 e5                	mov    %esp,%ebp
801057f2:	57                   	push   %edi
801057f3:	56                   	push   %esi
801057f4:	53                   	push   %ebx
801057f5:	83 ec 0c             	sub    $0xc,%esp
801057f8:	8b 75 08             	mov    0x8(%ebp),%esi
801057fb:	8b 7d 10             	mov    0x10(%ebp),%edi
  struct proc *p;
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801057fe:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105803:	eb 24                	jmp    80105829 <kill_all_pid_ns+0x3a>
    /*If the process is not the parent, and it is in the same namespace as parent, kill it*/
    if(p != parent && p->nsproxy->pid_ns == curpidns) {
80105805:	39 f3                	cmp    %esi,%ebx
80105807:	74 1a                	je     80105823 <kill_all_pid_ns+0x34>
80105809:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
8010580f:	39 78 08             	cmp    %edi,0x8(%eax)
80105812:	75 0f                	jne    80105823 <kill_all_pid_ns+0x34>
      kill_proc(p, reaper);
80105814:	83 ec 08             	sub    $0x8,%esp
80105817:	ff 75 0c             	pushl  0xc(%ebp)
8010581a:	53                   	push   %ebx
8010581b:	e8 82 ff ff ff       	call   801057a2 <kill_proc>
80105820:	83 c4 10             	add    $0x10,%esp

/*Kill all the processes inside the namespace of a given process, called parent
reaper in this case becomes their parent process*/
void kill_all_pid_ns(struct proc* parent, struct proc* reaper, struct pid_ns* curpidns) {
  struct proc *p;
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105823:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
80105829:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
8010582f:	72 d4                	jb     80105805 <kill_all_pid_ns+0x16>
    /*If the process is not the parent, and it is in the same namespace as parent, kill it*/
    if(p != parent && p->nsproxy->pid_ns == curpidns) {
      kill_proc(p, reaper);
    }
  }
}
80105831:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105834:	5b                   	pop    %ebx
80105835:	5e                   	pop    %esi
80105836:	5f                   	pop    %edi
80105837:	5d                   	pop    %ebp
80105838:	c3                   	ret    

80105839 <get_pid1_for_ns>:

/*Return the process whose pid=1 inside the given namespace*/
struct proc* get_pid1_for_ns(struct pid_ns* pid_ns) {
80105839:	55                   	push   %ebp
8010583a:	89 e5                	mov    %esp,%ebp
8010583c:	56                   	push   %esi
8010583d:	53                   	push   %ebx
8010583e:	8b 75 08             	mov    0x8(%ebp),%esi
  for (struct proc* p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105841:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105846:	eb 15                	jmp    8010585d <get_pid1_for_ns+0x24>
    if(get_pid_for_ns(p, pid_ns) == 1){
80105848:	56                   	push   %esi
80105849:	53                   	push   %ebx
8010584a:	e8 58 f9 ff ff       	call   801051a7 <get_pid_for_ns>
8010584f:	83 c4 08             	add    $0x8,%esp
80105852:	83 f8 01             	cmp    $0x1,%eax
80105855:	74 15                	je     8010586c <get_pid1_for_ns+0x33>
  }
}

/*Return the process whose pid=1 inside the given namespace*/
struct proc* get_pid1_for_ns(struct pid_ns* pid_ns) {
  for (struct proc* p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105857:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
8010585d:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80105863:	72 e3                	jb     80105848 <get_pid1_for_ns+0xf>
    if(get_pid_for_ns(p, pid_ns) == 1){
      return p;
    }
  }
  return 0;
80105865:	b8 00 00 00 00       	mov    $0x0,%eax
8010586a:	eb 02                	jmp    8010586e <get_pid1_for_ns+0x35>

/*Return the process whose pid=1 inside the given namespace*/
struct proc* get_pid1_for_ns(struct pid_ns* pid_ns) {
  for (struct proc* p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
    if(get_pid_for_ns(p, pid_ns) == 1){
      return p;
8010586c:	89 d8                	mov    %ebx,%eax
    }
  }
  return 0;
}
8010586e:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105871:	5b                   	pop    %ebx
80105872:	5e                   	pop    %esi
80105873:	5d                   	pop    %ebp
80105874:	c3                   	ret    

80105875 <scheduler>:
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
80105875:	55                   	push   %ebp
80105876:	89 e5                	mov    %esp,%ebp
80105878:	57                   	push   %edi
80105879:	56                   	push   %esi
8010587a:	53                   	push   %ebx
8010587b:	83 ec 3c             	sub    $0x3c,%esp
  struct cpu_account cpu;
  struct proc *p = 0;
  struct cpu *c = mycpu();
8010587e:	e8 69 f9 ff ff       	call   801051ec <mycpu>
80105883:	89 c6                	mov    %eax,%esi
  c->proc = 0;
80105885:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
8010588c:	00 00 00 

  // Initialize the cpu account.
  cpu_account_initialize(&cpu);
8010588f:	83 ec 0c             	sub    $0xc,%esp
80105892:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80105895:	50                   	push   %eax
80105896:	e8 65 8b 00 00       	call   8010e400 <cpu_account_initialize>
8010589b:	83 c4 10             	add    $0x10,%esp
}

static inline void
sti(void)
{
  asm volatile("sti");
8010589e:	fb                   	sti    

    // Enable interrupts on this processor.
    sti();

    // Take the ptable lock.
    acquire(&ptable.lock);
8010589f:	83 ec 0c             	sub    $0xc,%esp
801058a2:	68 80 0b 13 80       	push   $0x80130b80
801058a7:	e8 c4 09 00 00       	call   80106270 <acquire>

    // Start schedule.
    cpu_account_schedule_start(&cpu);
801058ac:	8d 45 d4             	lea    -0x2c(%ebp),%eax
801058af:	89 04 24             	mov    %eax,(%esp)
801058b2:	e8 79 8b 00 00       	call   8010e430 <cpu_account_schedule_start>

    // Loop over process table looking for process to run.
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
801058b7:	83 c4 10             	add    $0x10,%esp
  // Initialize the cpu account.
  cpu_account_initialize(&cpu);

  for(;;){
    // The amount of processes that have been scheduled in this run.
    unsigned int scheduled = 0;
801058ba:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

    // Start schedule.
    cpu_account_schedule_start(&cpu);

    // Loop over process table looking for process to run.
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
801058c1:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
801058c6:	e9 af 00 00 00       	jmp    8010597a <scheduler+0x105>
      // Update proc information.
      cpu_account_schedule_proc_update(&cpu, p);
801058cb:	83 ec 08             	sub    $0x8,%esp
801058ce:	53                   	push   %ebx
801058cf:	8d 45 d4             	lea    -0x2c(%ebp),%eax
801058d2:	50                   	push   %eax
801058d3:	e8 78 8b 00 00       	call   8010e450 <cpu_account_schedule_proc_update>

      // If process not runnable, continue.
      if (p->state != RUNNABLE) {
801058d8:	83 c4 10             	add    $0x10,%esp
801058db:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
801058df:	0f 85 8f 00 00 00    	jne    80105974 <scheduler+0xff>
        continue;
      }

      // Cpu set controller and freezer are only defined on runnable processes which are not killed.
      if (p->killed == 0) {
801058e5:	83 7b 44 00          	cmpl   $0x0,0x44(%ebx)
801058e9:	75 23                	jne    8010590e <scheduler+0x99>
          // If the cpu set controller enabled, and the cpu doesn't match the one that is supposed to run the process
          // then don't let the process run on this cpu.
          if (p->cgroup->set_controller_enabled && p->cgroup->cpu_to_use != c->apicid) {
801058eb:	8b 83 ac 02 00 00    	mov    0x2ac(%ebx),%eax
801058f1:	80 b8 11 03 00 00 00 	cmpb   $0x0,0x311(%eax)
801058f8:	74 0b                	je     80105905 <scheduler+0x90>
801058fa:	0f b6 16             	movzbl (%esi),%edx
801058fd:	38 90 30 03 00 00    	cmp    %dl,0x330(%eax)
80105903:	75 6f                	jne    80105974 <scheduler+0xff>
              continue;
          }

          // If the group is frozen, don't schedule it.
          if (p->cgroup->is_frozen == 1) {
80105905:	83 b8 34 03 00 00 01 	cmpl   $0x1,0x334(%eax)
8010590c:	74 66                	je     80105974 <scheduler+0xff>
              continue;
          }
      }

      // Decide whether to schedule process.
      if (!cpu_account_schedule_process_decision(&cpu, p)) {
8010590e:	83 ec 08             	sub    $0x8,%esp
80105911:	53                   	push   %ebx
80105912:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80105915:	50                   	push   %eax
80105916:	e8 95 8b 00 00       	call   8010e4b0 <cpu_account_schedule_process_decision>
8010591b:	83 c4 10             	add    $0x10,%esp
8010591e:	85 c0                	test   %eax,%eax
80105920:	74 52                	je     80105974 <scheduler+0xff>
        continue;
      }

      // Increment scheduled.
      ++scheduled;
80105922:	83 45 c4 01          	addl   $0x1,-0x3c(%ebp)

      // Switch to chosen process.  It is the process's job
      // to release ptable.lock and then reacquire it
      // before jumping back to us.
      c->proc = p;
80105926:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)

      // Switch to user page table.
      switchuvm(p);
8010592c:	83 ec 0c             	sub    $0xc,%esp
8010592f:	53                   	push   %ebx
80105930:	e8 5b 39 00 00       	call   80109290 <switchuvm>

      // Change process state to running.
      p->state = RUNNING;
80105935:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)

      // Before process schedule callback.
      cpu_account_before_process_schedule(&cpu, p);
8010593c:	83 c4 08             	add    $0x8,%esp
8010593f:	53                   	push   %ebx
80105940:	8d 7d d4             	lea    -0x2c(%ebp),%edi
80105943:	57                   	push   %edi
80105944:	e8 87 8c 00 00       	call   8010e5d0 <cpu_account_before_process_schedule>

      // Switch to process.
      swtch(&(c->scheduler), p->context);
80105949:	83 c4 08             	add    $0x8,%esp
8010594c:	ff 73 3c             	pushl  0x3c(%ebx)
8010594f:	8d 46 04             	lea    0x4(%esi),%eax
80105952:	50                   	push   %eax
80105953:	e8 33 0d 00 00       	call   8010668b <swtch>

      // After process schedule callback.
      cpu_account_after_process_schedule(&cpu, p);
80105958:	83 c4 08             	add    $0x8,%esp
8010595b:	53                   	push   %ebx
8010595c:	57                   	push   %edi
8010595d:	e8 8e 8c 00 00       	call   8010e5f0 <cpu_account_after_process_schedule>

      // Switch to kernel page table.
      switchkvm();
80105962:	e8 09 39 00 00       	call   80109270 <switchkvm>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      c->proc = 0;
80105967:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
8010596e:	00 00 00 
80105971:	83 c4 10             	add    $0x10,%esp

    // Start schedule.
    cpu_account_schedule_start(&cpu);

    // Loop over process table looking for process to run.
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105974:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
8010597a:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80105980:	0f 82 45 ff ff ff    	jb     801058cb <scheduler+0x56>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      c->proc = 0;
    }
    release(&ptable.lock);
80105986:	83 ec 0c             	sub    $0xc,%esp
80105989:	68 80 0b 13 80       	push   $0x80130b80
8010598e:	e8 fd 09 00 00       	call   80106390 <release>

    // If a process was scheduled, continue.
    if (scheduled) {
80105993:	83 c4 10             	add    $0x10,%esp
80105996:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
8010599a:	0f 85 fe fe ff ff    	jne    8010589e <scheduler+0x29>
      continue;
    }

    // No processes were scheduled, go to sleep.
    cpu_account_before_hlt(&cpu);
801059a0:	83 ec 0c             	sub    $0xc,%esp
801059a3:	8d 5d d4             	lea    -0x2c(%ebp),%ebx
801059a6:	53                   	push   %ebx
801059a7:	e8 c4 8c 00 00       	call   8010e670 <cpu_account_before_hlt>
    hlt();
801059ac:	e8 94 f6 ff ff       	call   80105045 <hlt>
    cpu_account_after_hlt(&cpu);
801059b1:	89 1c 24             	mov    %ebx,(%esp)
801059b4:	e8 c7 8c 00 00       	call   8010e680 <cpu_account_after_hlt>
801059b9:	83 c4 10             	add    $0x10,%esp
801059bc:	e9 dd fe ff ff       	jmp    8010589e <scheduler+0x29>

801059c1 <sched>:
// be proc->intena and proc->ncli, but that would
// break in the few places where a lock is held but
// there's no process.
void
sched(void)
{
801059c1:	55                   	push   %ebp
801059c2:	89 e5                	mov    %esp,%ebp
801059c4:	56                   	push   %esi
801059c5:	53                   	push   %ebx
  int intena;
  struct proc *p = myproc();
801059c6:	e8 98 f8 ff ff       	call   80105263 <myproc>
801059cb:	89 c3                	mov    %eax,%ebx

  if(!holding(&ptable.lock))
801059cd:	83 ec 0c             	sub    $0xc,%esp
801059d0:	68 80 0b 13 80       	push   $0x80130b80
801059d5:	e8 16 08 00 00       	call   801061f0 <holding>
801059da:	83 c4 10             	add    $0x10,%esp
801059dd:	85 c0                	test   %eax,%eax
801059df:	75 0d                	jne    801059ee <sched+0x2d>
    panic("sched ptable.lock");
801059e1:	83 ec 0c             	sub    $0xc,%esp
801059e4:	68 39 ef 10 80       	push   $0x8010ef39
801059e9:	e8 e2 a9 ff ff       	call   801003d0 <panic>
  if(mycpu()->ncli != 1)
801059ee:	e8 f9 f7 ff ff       	call   801051ec <mycpu>
801059f3:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
801059fa:	74 0d                	je     80105a09 <sched+0x48>
    panic("sched locks");
801059fc:	83 ec 0c             	sub    $0xc,%esp
801059ff:	68 4b ef 10 80       	push   $0x8010ef4b
80105a04:	e8 c7 a9 ff ff       	call   801003d0 <panic>
  if(p->state == RUNNING)
80105a09:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
80105a0d:	75 0d                	jne    80105a1c <sched+0x5b>
    panic("sched running");
80105a0f:	83 ec 0c             	sub    $0xc,%esp
80105a12:	68 57 ef 10 80       	push   $0x8010ef57
80105a17:	e8 b4 a9 ff ff       	call   801003d0 <panic>

static inline uint
readeflags(void)
{
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80105a1c:	9c                   	pushf  
80105a1d:	58                   	pop    %eax
  if(readeflags()&FL_IF)
80105a1e:	f6 c4 02             	test   $0x2,%ah
80105a21:	74 0d                	je     80105a30 <sched+0x6f>
    panic("sched interruptible");
80105a23:	83 ec 0c             	sub    $0xc,%esp
80105a26:	68 65 ef 10 80       	push   $0x8010ef65
80105a2b:	e8 a0 a9 ff ff       	call   801003d0 <panic>
  intena = mycpu()->intena;
80105a30:	e8 b7 f7 ff ff       	call   801051ec <mycpu>
80105a35:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
  swtch(&p->context, mycpu()->scheduler);
80105a3b:	e8 ac f7 ff ff       	call   801051ec <mycpu>
80105a40:	83 ec 08             	sub    $0x8,%esp
80105a43:	ff 70 04             	pushl  0x4(%eax)
80105a46:	83 c3 3c             	add    $0x3c,%ebx
80105a49:	53                   	push   %ebx
80105a4a:	e8 3c 0c 00 00       	call   8010668b <swtch>
  mycpu()->intena = intena;
80105a4f:	e8 98 f7 ff ff       	call   801051ec <mycpu>
80105a54:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
}
80105a5a:	83 c4 10             	add    $0x10,%esp
80105a5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105a60:	5b                   	pop    %ebx
80105a61:	5e                   	pop    %esi
80105a62:	5d                   	pop    %ebp
80105a63:	c3                   	ret    

80105a64 <exit>:
// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(int status)
{
80105a64:	55                   	push   %ebp
80105a65:	89 e5                	mov    %esp,%ebp
80105a67:	57                   	push   %edi
80105a68:	56                   	push   %esi
80105a69:	53                   	push   %ebx
80105a6a:	83 ec 1c             	sub    $0x1c,%esp
  struct proc *curproc = myproc();
80105a6d:	e8 f1 f7 ff ff       	call   80105263 <myproc>
80105a72:	89 c3                	mov    %eax,%ebx
  struct proc *p;
  struct pid_ns *curpidns;
  int fd;

  curproc->status = status;
80105a74:	8b 45 08             	mov    0x8(%ebp),%eax
80105a77:	89 83 a8 00 00 00    	mov    %eax,0xa8(%ebx)

  if(curproc == initproc)
80105a7d:	3b 1d b8 05 12 80    	cmp    0x801205b8,%ebx
80105a83:	75 2e                	jne    80105ab3 <exit+0x4f>
    panic("init exiting");
80105a85:	83 ec 0c             	sub    $0xc,%esp
80105a88:	68 79 ef 10 80       	push   $0x8010ef79
80105a8d:	e8 3e a9 ff ff       	call   801003d0 <panic>

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
    if(curproc->ofile[fd]){
80105a92:	8b 44 b3 48          	mov    0x48(%ebx,%esi,4),%eax
80105a96:	85 c0                	test   %eax,%eax
80105a98:	74 14                	je     80105aae <exit+0x4a>
      fileclose(curproc->ofile[fd]);
80105a9a:	83 ec 0c             	sub    $0xc,%esp
80105a9d:	50                   	push   %eax
80105a9e:	e8 7d bb ff ff       	call   80101620 <fileclose>
      curproc->ofile[fd] = 0;
80105aa3:	c7 44 b3 48 00 00 00 	movl   $0x0,0x48(%ebx,%esi,4)
80105aaa:	00 
80105aab:	83 c4 10             	add    $0x10,%esp

  if(curproc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
80105aae:	83 c6 01             	add    $0x1,%esi
80105ab1:	eb 05                	jmp    80105ab8 <exit+0x54>
80105ab3:	be 00 00 00 00       	mov    $0x0,%esi
80105ab8:	83 fe 0f             	cmp    $0xf,%esi
80105abb:	7e d5                	jle    80105a92 <exit+0x2e>
      fileclose(curproc->ofile[fd]);
      curproc->ofile[fd] = 0;
    }
  }

  begin_op();
80105abd:	e8 1e dd ff ff       	call   801037e0 <begin_op>
  iput(curproc->cwd);
80105ac2:	83 ec 0c             	sub    $0xc,%esp
80105ac5:	ff b3 88 00 00 00    	pushl  0x88(%ebx)
80105acb:	e8 30 c5 ff ff       	call   80102000 <iput>
  end_op();
80105ad0:	e8 7b dd ff ff       	call   80103850 <end_op>

  mntput(curproc->cwdmount);
80105ad5:	83 c4 04             	add    $0x4,%esp
80105ad8:	ff b3 8c 00 00 00    	pushl  0x8c(%ebx)
80105ade:	e8 f8 e3 ff ff       	call   80103edb <mntput>
  curproc->cwdmount = 0;
80105ae3:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
80105aea:	00 00 00 
  *curproc->cwdp = 0;
80105aed:	c6 83 ac 00 00 00 00 	movb   $0x0,0xac(%ebx)
  curproc->cwd = 0;
80105af4:	c7 83 88 00 00 00 00 	movl   $0x0,0x88(%ebx)
80105afb:	00 00 00 

  struct proc* procpid1 = 0;
  // Find process with pid 1 within namespace
  procpid1 = get_pid1_for_ns(curproc->nsproxy->pid_ns);
80105afe:	8b b3 a0 00 00 00    	mov    0xa0(%ebx),%esi
80105b04:	8b 46 08             	mov    0x8(%esi),%eax
80105b07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80105b0a:	89 04 24             	mov    %eax,(%esp)
80105b0d:	e8 27 fd ff ff       	call   80105839 <get_pid1_for_ns>
80105b12:	83 c4 10             	add    $0x10,%esp
80105b15:	89 c7                	mov    %eax,%edi

  // Here we could not find process with pid 1 inside the namespace, and pid 1 wasn't marked as killed
  if (procpid1 == 0 && curproc->nsproxy->pid_ns->pid1_ns_killed == 0)
80105b17:	85 c0                	test   %eax,%eax
80105b19:	75 16                	jne    80105b31 <exit+0xcd>
80105b1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105b1e:	83 78 40 00          	cmpl   $0x0,0x40(%eax)
80105b22:	75 0d                	jne    80105b31 <exit+0xcd>
    panic("couldn't find pid 1");
80105b24:	83 ec 0c             	sub    $0xc,%esp
80105b27:	68 86 ef 10 80       	push   $0x8010ef86
80105b2c:	e8 9f a8 ff ff       	call   801003d0 <panic>
  curpidns = curproc->nsproxy->pid_ns;

  namespaceleave(curproc->nsproxy);
80105b31:	83 ec 0c             	sub    $0xc,%esp
80105b34:	56                   	push   %esi
80105b35:	e8 b9 ee ff ff       	call   801049f3 <namespaceleave>

  acquire(&ptable.lock);
80105b3a:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105b41:	e8 2a 07 00 00       	call   80106270 <acquire>
  // Parent might be sleeping in wait().
  wakeup1(curproc->parent);
80105b46:	8b 43 34             	mov    0x34(%ebx),%eax
80105b49:	e8 fd f4 ff ff       	call   8010504b <wakeup1>

  // If the current process holds pid 1 within its namespace, mark all child processes as killed
  if (curproc->ns_pid == 1) {
80105b4e:	83 c4 10             	add    $0x10,%esp
80105b51:	83 7b 10 01          	cmpl   $0x1,0x10(%ebx)
80105b55:	75 3c                	jne    80105b93 <exit+0x12f>
    curpidns->pid1_ns_killed = 1; // Mark pid 1 process was killed
80105b57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105b5a:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%eax)

    kill_all_pid_ns(curproc, curproc->parent, curpidns); // Documentation for this command see above
80105b61:	83 ec 04             	sub    $0x4,%esp
80105b64:	50                   	push   %eax
80105b65:	ff 73 34             	pushl  0x34(%ebx)
80105b68:	53                   	push   %ebx
80105b69:	e8 81 fc ff ff       	call   801057ef <kill_all_pid_ns>
80105b6e:	83 c4 10             	add    $0x10,%esp
80105b71:	eb 2d                	jmp    80105ba0 <exit+0x13c>

  } else { // The current process does not hold pid 1 within its namespace

    // Pass the child processes of the current process to pid 1 process within the namespace
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent == curproc){
80105b73:	3b 5e 34             	cmp    0x34(%esi),%ebx
80105b76:	75 13                	jne    80105b8b <exit+0x127>
        p->parent = procpid1;
80105b78:	89 7e 34             	mov    %edi,0x34(%esi)
        if(p->state == ZOMBIE) {
80105b7b:	83 7e 0c 05          	cmpl   $0x5,0xc(%esi)
80105b7f:	75 0a                	jne    80105b8b <exit+0x127>
          wakeup1(initproc);
80105b81:	a1 b8 05 12 80       	mov    0x801205b8,%eax
80105b86:	e8 c0 f4 ff ff       	call   8010504b <wakeup1>
    kill_all_pid_ns(curproc, curproc->parent, curpidns); // Documentation for this command see above

  } else { // The current process does not hold pid 1 within its namespace

    // Pass the child processes of the current process to pid 1 process within the namespace
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105b8b:	81 c6 c0 02 00 00    	add    $0x2c0,%esi
80105b91:	eb 05                	jmp    80105b98 <exit+0x134>
80105b93:	be b4 0b 13 80       	mov    $0x80130bb4,%esi
80105b98:	81 fe b4 bb 13 80    	cmp    $0x8013bbb4,%esi
80105b9e:	72 d3                	jb     80105b73 <exit+0x10f>
      }
    }
  }


  if (curproc->child_pid_ns)
80105ba0:	8b 83 a4 00 00 00    	mov    0xa4(%ebx),%eax
80105ba6:	85 c0                	test   %eax,%eax
80105ba8:	74 0c                	je     80105bb6 <exit+0x152>
    pid_ns_put(curproc->child_pid_ns);
80105baa:	83 ec 0c             	sub    $0xc,%esp
80105bad:	50                   	push   %eax
80105bae:	e8 ad e9 ff ff       	call   80104560 <pid_ns_put>
80105bb3:	83 c4 10             	add    $0x10,%esp

  // Remove the process cgroup.
  cgroup_erase(curproc->cgroup, curproc);
80105bb6:	83 ec 08             	sub    $0x8,%esp
80105bb9:	53                   	push   %ebx
80105bba:	ff b3 ac 02 00 00    	pushl  0x2ac(%ebx)
80105bc0:	e8 5b 76 00 00       	call   8010d220 <cgroup_erase>
  update_protect_mem(curproc->cgroup, curproc->sz, 0);
80105bc5:	83 c4 0c             	add    $0xc,%esp
80105bc8:	6a 00                	push   $0x0
80105bca:	ff 33                	pushl  (%ebx)
80105bcc:	ff b3 ac 02 00 00    	pushl  0x2ac(%ebx)
80105bd2:	e8 24 f8 ff ff       	call   801053fb <update_protect_mem>

  // Jump into the scheduler, never to return.
  curproc->state = ZOMBIE;
80105bd7:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
  sched();
80105bde:	e8 de fd ff ff       	call   801059c1 <sched>
  panic("zombie exit");
80105be3:	c7 04 24 9a ef 10 80 	movl   $0x8010ef9a,(%esp)
80105bea:	e8 e1 a7 ff ff       	call   801003d0 <panic>

80105bef <yield>:
}

// Give up the CPU for one scheduling round.
void
yield(void)
{
80105bef:	55                   	push   %ebp
80105bf0:	89 e5                	mov    %esp,%ebp
80105bf2:	83 ec 14             	sub    $0x14,%esp
  acquire(&ptable.lock);  //DOC: yieldlock
80105bf5:	68 80 0b 13 80       	push   $0x80130b80
80105bfa:	e8 71 06 00 00       	call   80106270 <acquire>
  myproc()->state = RUNNABLE;
80105bff:	e8 5f f6 ff ff       	call   80105263 <myproc>
80105c04:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  sched();
80105c0b:	e8 b1 fd ff ff       	call   801059c1 <sched>
  release(&ptable.lock);
80105c10:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105c17:	e8 74 07 00 00       	call   80106390 <release>
}
80105c1c:	83 c4 10             	add    $0x10,%esp
80105c1f:	c9                   	leave  
80105c20:	c3                   	ret    

80105c21 <sleep>:

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
80105c21:	55                   	push   %ebp
80105c22:	89 e5                	mov    %esp,%ebp
80105c24:	56                   	push   %esi
80105c25:	53                   	push   %ebx
80105c26:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  struct proc *p = myproc();
80105c29:	e8 35 f6 ff ff       	call   80105263 <myproc>

  if(p == 0)
80105c2e:	85 c0                	test   %eax,%eax
80105c30:	75 0d                	jne    80105c3f <sleep+0x1e>
    panic("sleep");
80105c32:	83 ec 0c             	sub    $0xc,%esp
80105c35:	68 a6 ef 10 80       	push   $0x8010efa6
80105c3a:	e8 91 a7 ff ff       	call   801003d0 <panic>
80105c3f:	89 c6                	mov    %eax,%esi

  if(lk == 0)
80105c41:	85 db                	test   %ebx,%ebx
80105c43:	75 0d                	jne    80105c52 <sleep+0x31>
    panic("sleep without lk");
80105c45:	83 ec 0c             	sub    $0xc,%esp
80105c48:	68 ac ef 10 80       	push   $0x8010efac
80105c4d:	e8 7e a7 ff ff       	call   801003d0 <panic>
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
80105c52:	81 fb 80 0b 13 80    	cmp    $0x80130b80,%ebx
80105c58:	74 18                	je     80105c72 <sleep+0x51>
    acquire(&ptable.lock);  //DOC: sleeplock1
80105c5a:	83 ec 0c             	sub    $0xc,%esp
80105c5d:	68 80 0b 13 80       	push   $0x80130b80
80105c62:	e8 09 06 00 00       	call   80106270 <acquire>
    release(lk);
80105c67:	89 1c 24             	mov    %ebx,(%esp)
80105c6a:	e8 21 07 00 00       	call   80106390 <release>
80105c6f:	83 c4 10             	add    $0x10,%esp
  }
  // Go to sleep.
  p->chan = chan;
80105c72:	8b 45 08             	mov    0x8(%ebp),%eax
80105c75:	89 46 40             	mov    %eax,0x40(%esi)
  p->state = SLEEPING;
80105c78:	c7 46 0c 02 00 00 00 	movl   $0x2,0xc(%esi)

  sched();
80105c7f:	e8 3d fd ff ff       	call   801059c1 <sched>

  // Tidy up.
  p->chan = 0;
80105c84:	c7 46 40 00 00 00 00 	movl   $0x0,0x40(%esi)

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
80105c8b:	81 fb 80 0b 13 80    	cmp    $0x80130b80,%ebx
80105c91:	74 18                	je     80105cab <sleep+0x8a>
    release(&ptable.lock);
80105c93:	83 ec 0c             	sub    $0xc,%esp
80105c96:	68 80 0b 13 80       	push   $0x80130b80
80105c9b:	e8 f0 06 00 00       	call   80106390 <release>
    acquire(lk);
80105ca0:	89 1c 24             	mov    %ebx,(%esp)
80105ca3:	e8 c8 05 00 00       	call   80106270 <acquire>
80105ca8:	83 c4 10             	add    $0x10,%esp
  }
}
80105cab:	8d 65 f8             	lea    -0x8(%ebp),%esp
80105cae:	5b                   	pop    %ebx
80105caf:	5e                   	pop    %esi
80105cb0:	5d                   	pop    %ebp
80105cb1:	c3                   	ret    

80105cb2 <wait>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(int *wstatus)
{
80105cb2:	55                   	push   %ebp
80105cb3:	89 e5                	mov    %esp,%ebp
80105cb5:	57                   	push   %edi
80105cb6:	56                   	push   %esi
80105cb7:	53                   	push   %ebx
80105cb8:	83 ec 0c             	sub    $0xc,%esp
80105cbb:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct proc *p;
  int havekids, pid;
  struct proc *curproc = myproc();
80105cbe:	e8 a0 f5 ff ff       	call   80105263 <myproc>
80105cc3:	89 c6                	mov    %eax,%esi

  acquire(&ptable.lock);
80105cc5:	83 ec 0c             	sub    $0xc,%esp
80105cc8:	68 80 0b 13 80       	push   $0x80130b80
80105ccd:	e8 9e 05 00 00       	call   80106270 <acquire>
80105cd2:	83 c4 10             	add    $0x10,%esp
  for(;;){
    // Scan through table looking for exited children.
    havekids = 0;
80105cd5:	b8 00 00 00 00       	mov    $0x0,%eax
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105cda:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105cdf:	e9 bf 00 00 00       	jmp    80105da3 <wait+0xf1>
      if(p->parent != curproc)
80105ce4:	3b 73 34             	cmp    0x34(%ebx),%esi
80105ce7:	0f 85 b0 00 00 00    	jne    80105d9d <wait+0xeb>
        continue;
      havekids = 1;
      if(p->state == ZOMBIE){
80105ced:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
80105cf1:	0f 85 a1 00 00 00    	jne    80105d98 <wait+0xe6>
        // Found one.
        pid = get_pid_for_ns(p, curproc->nsproxy->pid_ns);
80105cf7:	8b 86 a0 00 00 00    	mov    0xa0(%esi),%eax
80105cfd:	83 ec 08             	sub    $0x8,%esp
80105d00:	ff 70 08             	pushl  0x8(%eax)
80105d03:	53                   	push   %ebx
80105d04:	e8 9e f4 ff ff       	call   801051a7 <get_pid_for_ns>
80105d09:	83 c4 04             	add    $0x4,%esp
80105d0c:	89 c6                	mov    %eax,%esi
        kfree(p->kstack);
80105d0e:	ff 73 08             	pushl  0x8(%ebx)
80105d11:	e8 ea cf ff ff       	call   80102d00 <kfree>
        p->kstack = 0;
80105d16:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
        freevm(p->pgdir);
80105d1d:	83 c4 04             	add    $0x4,%esp
80105d20:	ff 73 04             	pushl  0x4(%ebx)
80105d23:	e8 c8 39 00 00       	call   801096f0 <freevm>
        p->ns_pid = 0;
80105d28:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
        memset(p->pids, 0, sizeof(p->pids));
80105d2f:	8d 43 14             	lea    0x14(%ebx),%eax
80105d32:	83 c4 0c             	add    $0xc,%esp
80105d35:	6a 20                	push   $0x20
80105d37:	6a 00                	push   $0x0
80105d39:	50                   	push   %eax
80105d3a:	e8 a1 06 00 00       	call   801063e0 <memset>
        p->child_pid_ns = 0;
80105d3f:	c7 83 a4 00 00 00 00 	movl   $0x0,0xa4(%ebx)
80105d46:	00 00 00 
        p->parent = 0;
80105d49:	c7 43 34 00 00 00 00 	movl   $0x0,0x34(%ebx)
        p->name[0] = 0;
80105d50:	c6 83 90 00 00 00 00 	movb   $0x0,0x90(%ebx)
        p->killed = 0;
80105d57:	c7 43 44 00 00 00 00 	movl   $0x0,0x44(%ebx)
        p->state = UNUSED;
80105d5e:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
        if (wstatus != 0)
80105d65:	83 c4 10             	add    $0x10,%esp
80105d68:	85 ff                	test   %edi,%edi
80105d6a:	74 0e                	je     80105d7a <wait+0xc8>
         *wstatus = W_STOPCODE(p->status);
80105d6c:	8b 83 a8 00 00 00    	mov    0xa8(%ebx),%eax
80105d72:	c1 e0 08             	shl    $0x8,%eax
80105d75:	83 c8 7f             	or     $0x7f,%eax
80105d78:	89 07                	mov    %eax,(%edi)
        p->status = 0;
80105d7a:	c7 83 a8 00 00 00 00 	movl   $0x0,0xa8(%ebx)
80105d81:	00 00 00 

        release(&ptable.lock);
80105d84:	83 ec 0c             	sub    $0xc,%esp
80105d87:	68 80 0b 13 80       	push   $0x80130b80
80105d8c:	e8 ff 05 00 00       	call   80106390 <release>
        return pid;
80105d91:	83 c4 10             	add    $0x10,%esp
80105d94:	89 f0                	mov    %esi,%eax
80105d96:	eb 4e                	jmp    80105de6 <wait+0x134>
    // Scan through table looking for exited children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent != curproc)
        continue;
      havekids = 1;
80105d98:	b8 01 00 00 00       	mov    $0x1,%eax

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for exited children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105d9d:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
80105da3:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80105da9:	0f 82 35 ff ff ff    	jb     80105ce4 <wait+0x32>
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(havekids == 0 || curproc->killed){
80105daf:	85 c0                	test   %eax,%eax
80105db1:	74 06                	je     80105db9 <wait+0x107>
80105db3:	83 7e 44 00          	cmpl   $0x0,0x44(%esi)
80105db7:	74 17                	je     80105dd0 <wait+0x11e>
      release(&ptable.lock);
80105db9:	83 ec 0c             	sub    $0xc,%esp
80105dbc:	68 80 0b 13 80       	push   $0x80130b80
80105dc1:	e8 ca 05 00 00       	call   80106390 <release>
      return -1;
80105dc6:	83 c4 10             	add    $0x10,%esp
80105dc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105dce:	eb 16                	jmp    80105de6 <wait+0x134>
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
80105dd0:	83 ec 08             	sub    $0x8,%esp
80105dd3:	68 80 0b 13 80       	push   $0x80130b80
80105dd8:	56                   	push   %esi
80105dd9:	e8 43 fe ff ff       	call   80105c21 <sleep>
  }
80105dde:	83 c4 10             	add    $0x10,%esp
80105de1:	e9 ef fe ff ff       	jmp    80105cd5 <wait+0x23>
}
80105de6:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105de9:	5b                   	pop    %ebx
80105dea:	5e                   	pop    %esi
80105deb:	5f                   	pop    %edi
80105dec:	5d                   	pop    %ebp
80105ded:	c3                   	ret    

80105dee <wakeup>:
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
80105dee:	55                   	push   %ebp
80105def:	89 e5                	mov    %esp,%ebp
80105df1:	83 ec 14             	sub    $0x14,%esp
  acquire(&ptable.lock);
80105df4:	68 80 0b 13 80       	push   $0x80130b80
80105df9:	e8 72 04 00 00       	call   80106270 <acquire>
  wakeup1(chan);
80105dfe:	8b 45 08             	mov    0x8(%ebp),%eax
80105e01:	e8 45 f2 ff ff       	call   8010504b <wakeup1>
  release(&ptable.lock);
80105e06:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105e0d:	e8 7e 05 00 00       	call   80106390 <release>
}
80105e12:	83 c4 10             	add    $0x10,%esp
80105e15:	c9                   	leave  
80105e16:	c3                   	ret    

80105e17 <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
80105e17:	55                   	push   %ebp
80105e18:	89 e5                	mov    %esp,%ebp
80105e1a:	57                   	push   %edi
80105e1b:	56                   	push   %esi
80105e1c:	53                   	push   %ebx
80105e1d:	83 ec 18             	sub    $0x18,%esp
80105e20:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct proc *p;

  acquire(&ptable.lock);
80105e23:	68 80 0b 13 80       	push   $0x80130b80
80105e28:	e8 43 04 00 00       	call   80106270 <acquire>
  struct pid_ns* pid_ns = myproc()->nsproxy->pid_ns;
80105e2d:	e8 31 f4 ff ff       	call   80105263 <myproc>
80105e32:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80105e38:	8b 70 08             	mov    0x8(%eax),%esi
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105e3b:	83 c4 10             	add    $0x10,%esp
80105e3e:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105e43:	eb 39                	jmp    80105e7e <kill+0x67>
    if(get_pid_for_ns(p, pid_ns) == pid){
80105e45:	83 ec 08             	sub    $0x8,%esp
80105e48:	56                   	push   %esi
80105e49:	53                   	push   %ebx
80105e4a:	e8 58 f3 ff ff       	call   801051a7 <get_pid_for_ns>
80105e4f:	83 c4 10             	add    $0x10,%esp
80105e52:	39 f8                	cmp    %edi,%eax
80105e54:	75 22                	jne    80105e78 <kill+0x61>
       kill_proc(p, p->parent);
80105e56:	83 ec 08             	sub    $0x8,%esp
80105e59:	ff 73 34             	pushl  0x34(%ebx)
80105e5c:	53                   	push   %ebx
80105e5d:	e8 40 f9 ff ff       	call   801057a2 <kill_proc>
       release(&ptable.lock);
80105e62:	c7 04 24 80 0b 13 80 	movl   $0x80130b80,(%esp)
80105e69:	e8 22 05 00 00       	call   80106390 <release>
       return 0;
80105e6e:	83 c4 10             	add    $0x10,%esp
80105e71:	b8 00 00 00 00       	mov    $0x0,%eax
80105e76:	eb 23                	jmp    80105e9b <kill+0x84>
{
  struct proc *p;

  acquire(&ptable.lock);
  struct pid_ns* pid_ns = myproc()->nsproxy->pid_ns;
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105e78:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
80105e7e:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80105e84:	72 bf                	jb     80105e45 <kill+0x2e>
       kill_proc(p, p->parent);
       release(&ptable.lock);
       return 0;
    }
  }
  release(&ptable.lock);
80105e86:	83 ec 0c             	sub    $0xc,%esp
80105e89:	68 80 0b 13 80       	push   $0x80130b80
80105e8e:	e8 fd 04 00 00       	call   80106390 <release>
  return -1;
80105e93:	83 c4 10             	add    $0x10,%esp
80105e96:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105e9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105e9e:	5b                   	pop    %ebx
80105e9f:	5e                   	pop    %esi
80105ea0:	5f                   	pop    %edi
80105ea1:	5d                   	pop    %ebp
80105ea2:	c3                   	ret    

80105ea3 <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
80105ea3:	55                   	push   %ebp
80105ea4:	89 e5                	mov    %esp,%ebp
80105ea6:	57                   	push   %edi
80105ea7:	56                   	push   %esi
80105ea8:	53                   	push   %ebx
80105ea9:	83 ec 3c             	sub    $0x3c,%esp
  int i;
  struct proc *p;
  char *state;
  uint pc[10];

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105eac:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105eb1:	e9 b1 00 00 00       	jmp    80105f67 <procdump+0xc4>
    if(p->state == UNUSED)
80105eb6:	8b 43 0c             	mov    0xc(%ebx),%eax
80105eb9:	85 c0                	test   %eax,%eax
80105ebb:	0f 84 a0 00 00 00    	je     80105f61 <procdump+0xbe>
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
80105ec1:	83 f8 05             	cmp    $0x5,%eax
80105ec4:	77 12                	ja     80105ed8 <procdump+0x35>
80105ec6:	8b 34 85 1c f0 10 80 	mov    -0x7fef0fe4(,%eax,4),%esi
80105ecd:	85 f6                	test   %esi,%esi
80105ecf:	75 0c                	jne    80105edd <procdump+0x3a>
      state = states[p->state];
    else
      state = "???";
80105ed1:	be bd ef 10 80       	mov    $0x8010efbd,%esi
80105ed6:	eb 05                	jmp    80105edd <procdump+0x3a>
80105ed8:	be bd ef 10 80       	mov    $0x8010efbd,%esi
    cprintf("%d %s %s", get_pid_for_ns(p, initproc->nsproxy->pid_ns), state, p->name);
80105edd:	8d bb 90 00 00 00    	lea    0x90(%ebx),%edi
80105ee3:	a1 b8 05 12 80       	mov    0x801205b8,%eax
80105ee8:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
80105eee:	ff 70 08             	pushl  0x8(%eax)
80105ef1:	53                   	push   %ebx
80105ef2:	e8 b0 f2 ff ff       	call   801051a7 <get_pid_for_ns>
80105ef7:	83 c4 08             	add    $0x8,%esp
80105efa:	57                   	push   %edi
80105efb:	56                   	push   %esi
80105efc:	50                   	push   %eax
80105efd:	68 c1 ef 10 80       	push   $0x8010efc1
80105f02:	e8 59 a7 ff ff       	call   80100660 <cprintf>
    if(p->state == SLEEPING){
80105f07:	83 c4 10             	add    $0x10,%esp
80105f0a:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
80105f0e:	75 41                	jne    80105f51 <procdump+0xae>
      getcallerpcs((uint*)p->context->ebp+2, pc);
80105f10:	8b 43 3c             	mov    0x3c(%ebx),%eax
80105f13:	8b 40 0c             	mov    0xc(%eax),%eax
80105f16:	83 c0 08             	add    $0x8,%eax
80105f19:	83 ec 08             	sub    $0x8,%esp
80105f1c:	8d 55 c0             	lea    -0x40(%ebp),%edx
80105f1f:	52                   	push   %edx
80105f20:	50                   	push   %eax
80105f21:	e8 6a 02 00 00       	call   80106190 <getcallerpcs>
      for(i=0; i<10 && pc[i] != 0; i++)
80105f26:	83 c4 10             	add    $0x10,%esp
80105f29:	be 00 00 00 00       	mov    $0x0,%esi
80105f2e:	eb 14                	jmp    80105f44 <procdump+0xa1>
        cprintf(" %p", pc[i]);
80105f30:	83 ec 08             	sub    $0x8,%esp
80105f33:	50                   	push   %eax
80105f34:	68 e1 e6 10 80       	push   $0x8010e6e1
80105f39:	e8 22 a7 ff ff       	call   80100660 <cprintf>
    else
      state = "???";
    cprintf("%d %s %s", get_pid_for_ns(p, initproc->nsproxy->pid_ns), state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
80105f3e:	83 c6 01             	add    $0x1,%esi
80105f41:	83 c4 10             	add    $0x10,%esp
80105f44:	83 fe 09             	cmp    $0x9,%esi
80105f47:	7f 08                	jg     80105f51 <procdump+0xae>
80105f49:	8b 44 b5 c0          	mov    -0x40(%ebp,%esi,4),%eax
80105f4d:	85 c0                	test   %eax,%eax
80105f4f:	75 df                	jne    80105f30 <procdump+0x8d>
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
80105f51:	83 ec 0c             	sub    $0xc,%esp
80105f54:	68 f3 f3 10 80       	push   $0x8010f3f3
80105f59:	e8 02 a7 ff ff       	call   80100660 <cprintf>
80105f5e:	83 c4 10             	add    $0x10,%esp
  int i;
  struct proc *p;
  char *state;
  uint pc[10];

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105f61:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
80105f67:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80105f6d:	0f 82 43 ff ff ff    	jb     80105eb6 <procdump+0x13>
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}
80105f73:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105f76:	5b                   	pop    %ebx
80105f77:	5e                   	pop    %esi
80105f78:	5f                   	pop    %edi
80105f79:	5d                   	pop    %ebp
80105f7a:	c3                   	ret    

80105f7b <proc_lock>:

void proc_lock()
{
80105f7b:	55                   	push   %ebp
80105f7c:	89 e5                	mov    %esp,%ebp
80105f7e:	83 ec 14             	sub    $0x14,%esp
    acquire(&ptable.lock);
80105f81:	68 80 0b 13 80       	push   $0x80130b80
80105f86:	e8 e5 02 00 00       	call   80106270 <acquire>
}
80105f8b:	83 c4 10             	add    $0x10,%esp
80105f8e:	c9                   	leave  
80105f8f:	c3                   	ret    

80105f90 <proc_unlock>:

void proc_unlock()
{
80105f90:	55                   	push   %ebp
80105f91:	89 e5                	mov    %esp,%ebp
80105f93:	83 ec 14             	sub    $0x14,%esp
    release(&ptable.lock);
80105f96:	68 80 0b 13 80       	push   $0x80130b80
80105f9b:	e8 f0 03 00 00       	call   80106390 <release>
}
80105fa0:	83 c4 10             	add    $0x10,%esp
80105fa3:	c9                   	leave  
80105fa4:	c3                   	ret    

80105fa5 <cgroup_move_proc>:
* Move a process from one cgroup to another.
* Acquires lock, checks if process is alive, calls cgroup_insert, and releases lock.
*/
int
cgroup_move_proc(struct cgroup * cgroup, int pid)
{
80105fa5:	55                   	push   %ebp
80105fa6:	89 e5                	mov    %esp,%ebp
80105fa8:	57                   	push   %edi
80105fa9:	56                   	push   %esi
80105faa:	53                   	push   %ebx
80105fab:	83 ec 18             	sub    $0x18,%esp
80105fae:	8b 75 0c             	mov    0xc(%ebp),%esi
    struct proc *p;

    acquire(&ptable.lock);
80105fb1:	68 80 0b 13 80       	push   $0x80130b80
80105fb6:	e8 b5 02 00 00       	call   80106270 <acquire>

    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105fbb:	83 c4 10             	add    $0x10,%esp
80105fbe:	bb b4 0b 13 80       	mov    $0x80130bb4,%ebx
80105fc3:	eb 48                	jmp    8010600d <cgroup_move_proc+0x68>
        if(proc_pid(p) == pid)
80105fc5:	83 ec 0c             	sub    $0xc,%esp
80105fc8:	53                   	push   %ebx
80105fc9:	e8 b9 f2 ff ff       	call   80105287 <proc_pid>
80105fce:	83 c4 10             	add    $0x10,%esp
80105fd1:	39 f0                	cmp    %esi,%eax
80105fd3:	75 32                	jne    80106007 <cgroup_move_proc+0x62>
            if(p->state == SLEEPING || p->state == RUNNABLE || p->state == RUNNING)
80105fd5:	8b 43 0c             	mov    0xc(%ebx),%eax
80105fd8:	83 e8 02             	sub    $0x2,%eax
80105fdb:	83 f8 02             	cmp    $0x2,%eax
80105fde:	77 27                	ja     80106007 <cgroup_move_proc+0x62>
                if(unsafe_cgroup_insert(cgroup, p) == 0){
80105fe0:	83 ec 08             	sub    $0x8,%esp
80105fe3:	53                   	push   %ebx
80105fe4:	ff 75 08             	pushl  0x8(%ebp)
80105fe7:	e8 f4 6f 00 00       	call   8010cfe0 <unsafe_cgroup_insert>
80105fec:	89 c7                	mov    %eax,%edi
80105fee:	83 c4 10             	add    $0x10,%esp
80105ff1:	85 c0                	test   %eax,%eax
80105ff3:	75 12                	jne    80106007 <cgroup_move_proc+0x62>
                    release(&ptable.lock);
80105ff5:	83 ec 0c             	sub    $0xc,%esp
80105ff8:	68 80 0b 13 80       	push   $0x80130b80
80105ffd:	e8 8e 03 00 00       	call   80106390 <release>
                    return 0;
80106002:	83 c4 10             	add    $0x10,%esp
80106005:	eb 23                	jmp    8010602a <cgroup_move_proc+0x85>
{
    struct proc *p;

    acquire(&ptable.lock);

    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80106007:	81 c3 c0 02 00 00    	add    $0x2c0,%ebx
8010600d:	81 fb b4 bb 13 80    	cmp    $0x8013bbb4,%ebx
80106013:	72 b0                	jb     80105fc5 <cgroup_move_proc+0x20>
                if(unsafe_cgroup_insert(cgroup, p) == 0){
                    release(&ptable.lock);
                    return 0;
                }
    }
    release(&ptable.lock);
80106015:	83 ec 0c             	sub    $0xc,%esp
80106018:	68 80 0b 13 80       	push   $0x80130b80
8010601d:	e8 6e 03 00 00       	call   80106390 <release>
    return -1;
80106022:	83 c4 10             	add    $0x10,%esp
80106025:	bf ff ff ff ff       	mov    $0xffffffff,%edi
}
8010602a:	89 f8                	mov    %edi,%eax
8010602c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010602f:	5b                   	pop    %ebx
80106030:	5e                   	pop    %esi
80106031:	5f                   	pop    %edi
80106032:	5d                   	pop    %ebp
80106033:	c3                   	ret    

80106034 <proc_get_cgroup>:

struct cgroup *proc_get_cgroup(void)
{
80106034:	55                   	push   %ebp
80106035:	89 e5                	mov    %esp,%ebp
80106037:	83 ec 08             	sub    $0x8,%esp
  struct cgroup *cg = 0;
  struct proc *proc = myproc();
8010603a:	e8 24 f2 ff ff       	call   80105263 <myproc>
  if (proc)
8010603f:	85 c0                	test   %eax,%eax
80106041:	74 08                	je     8010604b <proc_get_cgroup+0x17>
     cg = proc->cgroup;
80106043:	8b 80 ac 02 00 00    	mov    0x2ac(%eax),%eax
80106049:	eb 05                	jmp    80106050 <proc_get_cgroup+0x1c>
    return -1;
}

struct cgroup *proc_get_cgroup(void)
{
  struct cgroup *cg = 0;
8010604b:	b8 00 00 00 00       	mov    $0x0,%eax
  struct proc *proc = myproc();
  if (proc)
     cg = proc->cgroup;
  return cg;
}
80106050:	c9                   	leave  
80106051:	c3                   	ret    
80106052:	66 90                	xchg   %ax,%ax
80106054:	66 90                	xchg   %ax,%ax
80106056:	66 90                	xchg   %ax,%ax
80106058:	66 90                	xchg   %ax,%ax
8010605a:	66 90                	xchg   %ax,%ax
8010605c:	66 90                	xchg   %ax,%ax
8010605e:	66 90                	xchg   %ax,%ax

80106060 <initsleeplock>:
80106060:	55                   	push   %ebp
80106061:	89 e5                	mov    %esp,%ebp
80106063:	53                   	push   %ebx
80106064:	83 ec 0c             	sub    $0xc,%esp
80106067:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010606a:	68 34 f0 10 80       	push   $0x8010f034
8010606f:	8d 43 04             	lea    0x4(%ebx),%eax
80106072:	50                   	push   %eax
80106073:	e8 f8 00 00 00       	call   80106170 <initlock>
80106078:	8b 45 0c             	mov    0xc(%ebp),%eax
8010607b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
80106081:	83 c4 10             	add    $0x10,%esp
80106084:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
8010608b:	89 43 38             	mov    %eax,0x38(%ebx)
8010608e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80106091:	c9                   	leave  
80106092:	c3                   	ret    
80106093:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106099:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801060a0 <acquiresleep>:
801060a0:	55                   	push   %ebp
801060a1:	89 e5                	mov    %esp,%ebp
801060a3:	56                   	push   %esi
801060a4:	53                   	push   %ebx
801060a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
801060a8:	83 ec 0c             	sub    $0xc,%esp
801060ab:	8d 73 04             	lea    0x4(%ebx),%esi
801060ae:	56                   	push   %esi
801060af:	e8 bc 01 00 00       	call   80106270 <acquire>
801060b4:	8b 13                	mov    (%ebx),%edx
801060b6:	83 c4 10             	add    $0x10,%esp
801060b9:	85 d2                	test   %edx,%edx
801060bb:	74 16                	je     801060d3 <acquiresleep+0x33>
801060bd:	8d 76 00             	lea    0x0(%esi),%esi
801060c0:	83 ec 08             	sub    $0x8,%esp
801060c3:	56                   	push   %esi
801060c4:	53                   	push   %ebx
801060c5:	e8 57 fb ff ff       	call   80105c21 <sleep>
801060ca:	8b 03                	mov    (%ebx),%eax
801060cc:	83 c4 10             	add    $0x10,%esp
801060cf:	85 c0                	test   %eax,%eax
801060d1:	75 ed                	jne    801060c0 <acquiresleep+0x20>
801060d3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
801060d9:	e8 85 f1 ff ff       	call   80105263 <myproc>
801060de:	8b 40 10             	mov    0x10(%eax),%eax
801060e1:	89 43 3c             	mov    %eax,0x3c(%ebx)
801060e4:	89 75 08             	mov    %esi,0x8(%ebp)
801060e7:	8d 65 f8             	lea    -0x8(%ebp),%esp
801060ea:	5b                   	pop    %ebx
801060eb:	5e                   	pop    %esi
801060ec:	5d                   	pop    %ebp
801060ed:	e9 9e 02 00 00       	jmp    80106390 <release>
801060f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801060f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106100 <releasesleep>:
80106100:	55                   	push   %ebp
80106101:	89 e5                	mov    %esp,%ebp
80106103:	56                   	push   %esi
80106104:	53                   	push   %ebx
80106105:	8b 5d 08             	mov    0x8(%ebp),%ebx
80106108:	83 ec 0c             	sub    $0xc,%esp
8010610b:	8d 73 04             	lea    0x4(%ebx),%esi
8010610e:	56                   	push   %esi
8010610f:	e8 5c 01 00 00       	call   80106270 <acquire>
80106114:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
8010611a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
80106121:	89 1c 24             	mov    %ebx,(%esp)
80106124:	e8 c5 fc ff ff       	call   80105dee <wakeup>
80106129:	89 75 08             	mov    %esi,0x8(%ebp)
8010612c:	83 c4 10             	add    $0x10,%esp
8010612f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106132:	5b                   	pop    %ebx
80106133:	5e                   	pop    %esi
80106134:	5d                   	pop    %ebp
80106135:	e9 56 02 00 00       	jmp    80106390 <release>
8010613a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106140 <holdingsleep>:
80106140:	55                   	push   %ebp
80106141:	89 e5                	mov    %esp,%ebp
80106143:	56                   	push   %esi
80106144:	53                   	push   %ebx
80106145:	8b 75 08             	mov    0x8(%ebp),%esi
80106148:	83 ec 0c             	sub    $0xc,%esp
8010614b:	8d 5e 04             	lea    0x4(%esi),%ebx
8010614e:	53                   	push   %ebx
8010614f:	e8 1c 01 00 00       	call   80106270 <acquire>
80106154:	8b 36                	mov    (%esi),%esi
80106156:	89 1c 24             	mov    %ebx,(%esp)
80106159:	e8 32 02 00 00       	call   80106390 <release>
8010615e:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106161:	89 f0                	mov    %esi,%eax
80106163:	5b                   	pop    %ebx
80106164:	5e                   	pop    %esi
80106165:	5d                   	pop    %ebp
80106166:	c3                   	ret    
80106167:	66 90                	xchg   %ax,%ax
80106169:	66 90                	xchg   %ax,%ax
8010616b:	66 90                	xchg   %ax,%ax
8010616d:	66 90                	xchg   %ax,%ax
8010616f:	90                   	nop

80106170 <initlock>:
80106170:	55                   	push   %ebp
80106171:	89 e5                	mov    %esp,%ebp
80106173:	8b 45 08             	mov    0x8(%ebp),%eax
80106176:	8b 55 0c             	mov    0xc(%ebp),%edx
80106179:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
8010617f:	89 50 04             	mov    %edx,0x4(%eax)
80106182:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
80106189:	5d                   	pop    %ebp
8010618a:	c3                   	ret    
8010618b:	90                   	nop
8010618c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106190 <getcallerpcs>:
80106190:	55                   	push   %ebp
80106191:	89 e5                	mov    %esp,%ebp
80106193:	53                   	push   %ebx
80106194:	8b 45 08             	mov    0x8(%ebp),%eax
80106197:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010619a:	8d 50 f8             	lea    -0x8(%eax),%edx
8010619d:	31 c0                	xor    %eax,%eax
8010619f:	90                   	nop
801061a0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
801061a6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
801061ac:	77 1a                	ja     801061c8 <getcallerpcs+0x38>
801061ae:	8b 5a 04             	mov    0x4(%edx),%ebx
801061b1:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
801061b4:	83 c0 01             	add    $0x1,%eax
801061b7:	8b 12                	mov    (%edx),%edx
801061b9:	83 f8 0a             	cmp    $0xa,%eax
801061bc:	75 e2                	jne    801061a0 <getcallerpcs+0x10>
801061be:	5b                   	pop    %ebx
801061bf:	5d                   	pop    %ebp
801061c0:	c3                   	ret    
801061c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801061c8:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
801061cf:	83 c0 01             	add    $0x1,%eax
801061d2:	83 f8 0a             	cmp    $0xa,%eax
801061d5:	74 e7                	je     801061be <getcallerpcs+0x2e>
801061d7:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
801061de:	83 c0 01             	add    $0x1,%eax
801061e1:	83 f8 0a             	cmp    $0xa,%eax
801061e4:	75 e2                	jne    801061c8 <getcallerpcs+0x38>
801061e6:	eb d6                	jmp    801061be <getcallerpcs+0x2e>
801061e8:	90                   	nop
801061e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801061f0 <holding>:
801061f0:	55                   	push   %ebp
801061f1:	89 e5                	mov    %esp,%ebp
801061f3:	53                   	push   %ebx
801061f4:	83 ec 04             	sub    $0x4,%esp
801061f7:	8b 55 08             	mov    0x8(%ebp),%edx
801061fa:	8b 02                	mov    (%edx),%eax
801061fc:	85 c0                	test   %eax,%eax
801061fe:	75 10                	jne    80106210 <holding+0x20>
80106200:	83 c4 04             	add    $0x4,%esp
80106203:	31 c0                	xor    %eax,%eax
80106205:	5b                   	pop    %ebx
80106206:	5d                   	pop    %ebp
80106207:	c3                   	ret    
80106208:	90                   	nop
80106209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106210:	8b 5a 08             	mov    0x8(%edx),%ebx
80106213:	e8 d4 ef ff ff       	call   801051ec <mycpu>
80106218:	39 c3                	cmp    %eax,%ebx
8010621a:	0f 94 c0             	sete   %al
8010621d:	83 c4 04             	add    $0x4,%esp
80106220:	0f b6 c0             	movzbl %al,%eax
80106223:	5b                   	pop    %ebx
80106224:	5d                   	pop    %ebp
80106225:	c3                   	ret    
80106226:	8d 76 00             	lea    0x0(%esi),%esi
80106229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106230 <pushcli>:
80106230:	55                   	push   %ebp
80106231:	89 e5                	mov    %esp,%ebp
80106233:	53                   	push   %ebx
80106234:	83 ec 04             	sub    $0x4,%esp

static inline uint
readeflags(void)
{
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80106237:	9c                   	pushf  
80106238:	5b                   	pop    %ebx
}

static inline void
cli(void)
{
  asm volatile("cli");
80106239:	fa                   	cli    
8010623a:	e8 ad ef ff ff       	call   801051ec <mycpu>
8010623f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
80106245:	85 c0                	test   %eax,%eax
80106247:	75 11                	jne    8010625a <pushcli+0x2a>
80106249:	81 e3 00 02 00 00    	and    $0x200,%ebx
8010624f:	e8 98 ef ff ff       	call   801051ec <mycpu>
80106254:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
8010625a:	e8 8d ef ff ff       	call   801051ec <mycpu>
8010625f:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
80106266:	83 c4 04             	add    $0x4,%esp
80106269:	5b                   	pop    %ebx
8010626a:	5d                   	pop    %ebp
8010626b:	c3                   	ret    
8010626c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106270 <acquire>:
80106270:	55                   	push   %ebp
80106271:	89 e5                	mov    %esp,%ebp
80106273:	56                   	push   %esi
80106274:	53                   	push   %ebx
80106275:	e8 b6 ff ff ff       	call   80106230 <pushcli>
8010627a:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010627d:	8b 03                	mov    (%ebx),%eax
8010627f:	85 c0                	test   %eax,%eax
80106281:	75 7d                	jne    80106300 <acquire+0x90>
xchg(volatile uint *addr, uint newval)
{
  uint result;

  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80106283:	ba 01 00 00 00       	mov    $0x1,%edx
80106288:	eb 09                	jmp    80106293 <acquire+0x23>
8010628a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106290:	8b 5d 08             	mov    0x8(%ebp),%ebx
80106293:	89 d0                	mov    %edx,%eax
80106295:	f0 87 03             	lock xchg %eax,(%ebx)
80106298:	85 c0                	test   %eax,%eax
8010629a:	75 f4                	jne    80106290 <acquire+0x20>
8010629c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
801062a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
801062a4:	e8 43 ef ff ff       	call   801051ec <mycpu>
801062a9:	89 ea                	mov    %ebp,%edx
801062ab:	8d 4b 0c             	lea    0xc(%ebx),%ecx
801062ae:	89 43 08             	mov    %eax,0x8(%ebx)
801062b1:	31 c0                	xor    %eax,%eax
801062b3:	90                   	nop
801062b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801062b8:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
801062be:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
801062c4:	77 1a                	ja     801062e0 <acquire+0x70>
801062c6:	8b 5a 04             	mov    0x4(%edx),%ebx
801062c9:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
801062cc:	83 c0 01             	add    $0x1,%eax
801062cf:	8b 12                	mov    (%edx),%edx
801062d1:	83 f8 0a             	cmp    $0xa,%eax
801062d4:	75 e2                	jne    801062b8 <acquire+0x48>
801062d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
801062d9:	5b                   	pop    %ebx
801062da:	5e                   	pop    %esi
801062db:	5d                   	pop    %ebp
801062dc:	c3                   	ret    
801062dd:	8d 76 00             	lea    0x0(%esi),%esi
801062e0:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
801062e7:	83 c0 01             	add    $0x1,%eax
801062ea:	83 f8 0a             	cmp    $0xa,%eax
801062ed:	74 e7                	je     801062d6 <acquire+0x66>
801062ef:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
801062f6:	83 c0 01             	add    $0x1,%eax
801062f9:	83 f8 0a             	cmp    $0xa,%eax
801062fc:	75 e2                	jne    801062e0 <acquire+0x70>
801062fe:	eb d6                	jmp    801062d6 <acquire+0x66>
80106300:	8b 73 08             	mov    0x8(%ebx),%esi
80106303:	e8 e4 ee ff ff       	call   801051ec <mycpu>
80106308:	39 c6                	cmp    %eax,%esi
8010630a:	0f 85 73 ff ff ff    	jne    80106283 <acquire+0x13>
80106310:	83 ec 0c             	sub    $0xc,%esp
80106313:	68 3f f0 10 80       	push   $0x8010f03f
80106318:	e8 b3 a0 ff ff       	call   801003d0 <panic>
8010631d:	8d 76 00             	lea    0x0(%esi),%esi

80106320 <popcli>:
80106320:	55                   	push   %ebp
80106321:	89 e5                	mov    %esp,%ebp
80106323:	83 ec 08             	sub    $0x8,%esp

static inline uint
readeflags(void)
{
  uint eflags;
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80106326:	9c                   	pushf  
80106327:	58                   	pop    %eax
80106328:	f6 c4 02             	test   $0x2,%ah
8010632b:	75 52                	jne    8010637f <popcli+0x5f>
8010632d:	e8 ba ee ff ff       	call   801051ec <mycpu>
80106332:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
80106338:	8d 51 ff             	lea    -0x1(%ecx),%edx
8010633b:	85 d2                	test   %edx,%edx
8010633d:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
80106343:	78 2d                	js     80106372 <popcli+0x52>
80106345:	e8 a2 ee ff ff       	call   801051ec <mycpu>
8010634a:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
80106350:	85 d2                	test   %edx,%edx
80106352:	74 0c                	je     80106360 <popcli+0x40>
80106354:	c9                   	leave  
80106355:	c3                   	ret    
80106356:	8d 76 00             	lea    0x0(%esi),%esi
80106359:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80106360:	e8 87 ee ff ff       	call   801051ec <mycpu>
80106365:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
8010636b:	85 c0                	test   %eax,%eax
8010636d:	74 e5                	je     80106354 <popcli+0x34>
}

static inline void
sti(void)
{
  asm volatile("sti");
8010636f:	fb                   	sti    
80106370:	c9                   	leave  
80106371:	c3                   	ret    
80106372:	83 ec 0c             	sub    $0xc,%esp
80106375:	68 5e f0 10 80       	push   $0x8010f05e
8010637a:	e8 51 a0 ff ff       	call   801003d0 <panic>
8010637f:	83 ec 0c             	sub    $0xc,%esp
80106382:	68 47 f0 10 80       	push   $0x8010f047
80106387:	e8 44 a0 ff ff       	call   801003d0 <panic>
8010638c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106390 <release>:
80106390:	55                   	push   %ebp
80106391:	89 e5                	mov    %esp,%ebp
80106393:	56                   	push   %esi
80106394:	53                   	push   %ebx
80106395:	8b 5d 08             	mov    0x8(%ebp),%ebx
80106398:	8b 03                	mov    (%ebx),%eax
8010639a:	85 c0                	test   %eax,%eax
8010639c:	75 12                	jne    801063b0 <release+0x20>
8010639e:	83 ec 0c             	sub    $0xc,%esp
801063a1:	68 65 f0 10 80       	push   $0x8010f065
801063a6:	e8 25 a0 ff ff       	call   801003d0 <panic>
801063ab:	90                   	nop
801063ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801063b0:	8b 73 08             	mov    0x8(%ebx),%esi
801063b3:	e8 34 ee ff ff       	call   801051ec <mycpu>
801063b8:	39 c6                	cmp    %eax,%esi
801063ba:	75 e2                	jne    8010639e <release+0xe>
801063bc:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
801063c3:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
801063ca:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
801063cf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
801063d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
801063d8:	5b                   	pop    %ebx
801063d9:	5e                   	pop    %esi
801063da:	5d                   	pop    %ebp
801063db:	e9 40 ff ff ff       	jmp    80106320 <popcli>

801063e0 <memset>:
801063e0:	55                   	push   %ebp
801063e1:	89 e5                	mov    %esp,%ebp
801063e3:	57                   	push   %edi
801063e4:	53                   	push   %ebx
801063e5:	8b 55 08             	mov    0x8(%ebp),%edx
801063e8:	8b 4d 10             	mov    0x10(%ebp),%ecx
801063eb:	f6 c2 03             	test   $0x3,%dl
801063ee:	75 05                	jne    801063f5 <memset+0x15>
801063f0:	f6 c1 03             	test   $0x3,%cl
801063f3:	74 13                	je     80106408 <memset+0x28>
}

static inline void
stosb(void *addr, int data, int cnt)
{
  asm volatile("cld; rep stosb" :
801063f5:	89 d7                	mov    %edx,%edi
801063f7:	8b 45 0c             	mov    0xc(%ebp),%eax
801063fa:	fc                   	cld    
801063fb:	f3 aa                	rep stos %al,%es:(%edi)
801063fd:	5b                   	pop    %ebx
801063fe:	89 d0                	mov    %edx,%eax
80106400:	5f                   	pop    %edi
80106401:	5d                   	pop    %ebp
80106402:	c3                   	ret    
80106403:	90                   	nop
80106404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106408:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
}

static inline void
stosl(void *addr, int data, int cnt)
{
  asm volatile("cld; rep stosl" :
8010640c:	c1 e9 02             	shr    $0x2,%ecx
8010640f:	89 fb                	mov    %edi,%ebx
80106411:	89 f8                	mov    %edi,%eax
80106413:	c1 e3 18             	shl    $0x18,%ebx
80106416:	c1 e0 10             	shl    $0x10,%eax
80106419:	09 d8                	or     %ebx,%eax
8010641b:	09 f8                	or     %edi,%eax
8010641d:	c1 e7 08             	shl    $0x8,%edi
80106420:	09 f8                	or     %edi,%eax
80106422:	89 d7                	mov    %edx,%edi
80106424:	fc                   	cld    
80106425:	f3 ab                	rep stos %eax,%es:(%edi)
80106427:	5b                   	pop    %ebx
80106428:	89 d0                	mov    %edx,%eax
8010642a:	5f                   	pop    %edi
8010642b:	5d                   	pop    %ebp
8010642c:	c3                   	ret    
8010642d:	8d 76 00             	lea    0x0(%esi),%esi

80106430 <memcmp>:
80106430:	55                   	push   %ebp
80106431:	89 e5                	mov    %esp,%ebp
80106433:	57                   	push   %edi
80106434:	56                   	push   %esi
80106435:	8b 45 10             	mov    0x10(%ebp),%eax
80106438:	53                   	push   %ebx
80106439:	8b 75 0c             	mov    0xc(%ebp),%esi
8010643c:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010643f:	85 c0                	test   %eax,%eax
80106441:	74 29                	je     8010646c <memcmp+0x3c>
80106443:	0f b6 13             	movzbl (%ebx),%edx
80106446:	0f b6 0e             	movzbl (%esi),%ecx
80106449:	38 d1                	cmp    %dl,%cl
8010644b:	75 2b                	jne    80106478 <memcmp+0x48>
8010644d:	8d 78 ff             	lea    -0x1(%eax),%edi
80106450:	31 c0                	xor    %eax,%eax
80106452:	eb 14                	jmp    80106468 <memcmp+0x38>
80106454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106458:	0f b6 54 03 01       	movzbl 0x1(%ebx,%eax,1),%edx
8010645d:	83 c0 01             	add    $0x1,%eax
80106460:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
80106464:	38 ca                	cmp    %cl,%dl
80106466:	75 10                	jne    80106478 <memcmp+0x48>
80106468:	39 f8                	cmp    %edi,%eax
8010646a:	75 ec                	jne    80106458 <memcmp+0x28>
8010646c:	5b                   	pop    %ebx
8010646d:	31 c0                	xor    %eax,%eax
8010646f:	5e                   	pop    %esi
80106470:	5f                   	pop    %edi
80106471:	5d                   	pop    %ebp
80106472:	c3                   	ret    
80106473:	90                   	nop
80106474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106478:	0f b6 c2             	movzbl %dl,%eax
8010647b:	5b                   	pop    %ebx
8010647c:	29 c8                	sub    %ecx,%eax
8010647e:	5e                   	pop    %esi
8010647f:	5f                   	pop    %edi
80106480:	5d                   	pop    %ebp
80106481:	c3                   	ret    
80106482:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106490 <memmove>:
80106490:	55                   	push   %ebp
80106491:	89 e5                	mov    %esp,%ebp
80106493:	56                   	push   %esi
80106494:	53                   	push   %ebx
80106495:	8b 45 08             	mov    0x8(%ebp),%eax
80106498:	8b 75 0c             	mov    0xc(%ebp),%esi
8010649b:	8b 5d 10             	mov    0x10(%ebp),%ebx
8010649e:	39 c6                	cmp    %eax,%esi
801064a0:	73 2e                	jae    801064d0 <memmove+0x40>
801064a2:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
801064a5:	39 c8                	cmp    %ecx,%eax
801064a7:	73 27                	jae    801064d0 <memmove+0x40>
801064a9:	85 db                	test   %ebx,%ebx
801064ab:	8d 53 ff             	lea    -0x1(%ebx),%edx
801064ae:	74 17                	je     801064c7 <memmove+0x37>
801064b0:	29 d9                	sub    %ebx,%ecx
801064b2:	89 cb                	mov    %ecx,%ebx
801064b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801064b8:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
801064bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
801064bf:	83 ea 01             	sub    $0x1,%edx
801064c2:	83 fa ff             	cmp    $0xffffffff,%edx
801064c5:	75 f1                	jne    801064b8 <memmove+0x28>
801064c7:	5b                   	pop    %ebx
801064c8:	5e                   	pop    %esi
801064c9:	5d                   	pop    %ebp
801064ca:	c3                   	ret    
801064cb:	90                   	nop
801064cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801064d0:	31 d2                	xor    %edx,%edx
801064d2:	85 db                	test   %ebx,%ebx
801064d4:	74 f1                	je     801064c7 <memmove+0x37>
801064d6:	8d 76 00             	lea    0x0(%esi),%esi
801064d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801064e0:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
801064e4:	88 0c 10             	mov    %cl,(%eax,%edx,1)
801064e7:	83 c2 01             	add    $0x1,%edx
801064ea:	39 d3                	cmp    %edx,%ebx
801064ec:	75 f2                	jne    801064e0 <memmove+0x50>
801064ee:	5b                   	pop    %ebx
801064ef:	5e                   	pop    %esi
801064f0:	5d                   	pop    %ebp
801064f1:	c3                   	ret    
801064f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801064f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106500 <memcpy>:
80106500:	55                   	push   %ebp
80106501:	89 e5                	mov    %esp,%ebp
80106503:	5d                   	pop    %ebp
80106504:	eb 8a                	jmp    80106490 <memmove>
80106506:	8d 76 00             	lea    0x0(%esi),%esi
80106509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106510 <strncmp>:
80106510:	55                   	push   %ebp
80106511:	89 e5                	mov    %esp,%ebp
80106513:	57                   	push   %edi
80106514:	56                   	push   %esi
80106515:	8b 4d 10             	mov    0x10(%ebp),%ecx
80106518:	53                   	push   %ebx
80106519:	8b 7d 08             	mov    0x8(%ebp),%edi
8010651c:	8b 75 0c             	mov    0xc(%ebp),%esi
8010651f:	85 c9                	test   %ecx,%ecx
80106521:	74 37                	je     8010655a <strncmp+0x4a>
80106523:	0f b6 17             	movzbl (%edi),%edx
80106526:	0f b6 1e             	movzbl (%esi),%ebx
80106529:	84 d2                	test   %dl,%dl
8010652b:	74 3f                	je     8010656c <strncmp+0x5c>
8010652d:	38 d3                	cmp    %dl,%bl
8010652f:	75 3b                	jne    8010656c <strncmp+0x5c>
80106531:	8d 47 01             	lea    0x1(%edi),%eax
80106534:	01 cf                	add    %ecx,%edi
80106536:	eb 1b                	jmp    80106553 <strncmp+0x43>
80106538:	90                   	nop
80106539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106540:	0f b6 10             	movzbl (%eax),%edx
80106543:	84 d2                	test   %dl,%dl
80106545:	74 21                	je     80106568 <strncmp+0x58>
80106547:	0f b6 19             	movzbl (%ecx),%ebx
8010654a:	83 c0 01             	add    $0x1,%eax
8010654d:	89 ce                	mov    %ecx,%esi
8010654f:	38 da                	cmp    %bl,%dl
80106551:	75 19                	jne    8010656c <strncmp+0x5c>
80106553:	39 c7                	cmp    %eax,%edi
80106555:	8d 4e 01             	lea    0x1(%esi),%ecx
80106558:	75 e6                	jne    80106540 <strncmp+0x30>
8010655a:	5b                   	pop    %ebx
8010655b:	31 c0                	xor    %eax,%eax
8010655d:	5e                   	pop    %esi
8010655e:	5f                   	pop    %edi
8010655f:	5d                   	pop    %ebp
80106560:	c3                   	ret    
80106561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106568:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
8010656c:	0f b6 c2             	movzbl %dl,%eax
8010656f:	29 d8                	sub    %ebx,%eax
80106571:	5b                   	pop    %ebx
80106572:	5e                   	pop    %esi
80106573:	5f                   	pop    %edi
80106574:	5d                   	pop    %ebp
80106575:	c3                   	ret    
80106576:	8d 76 00             	lea    0x0(%esi),%esi
80106579:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106580 <strcmp>:
80106580:	55                   	push   %ebp
80106581:	89 e5                	mov    %esp,%ebp
80106583:	56                   	push   %esi
80106584:	53                   	push   %ebx
80106585:	8b 55 08             	mov    0x8(%ebp),%edx
80106588:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010658b:	0f b6 02             	movzbl (%edx),%eax
8010658e:	0f b6 19             	movzbl (%ecx),%ebx
80106591:	84 c0                	test   %al,%al
80106593:	75 1e                	jne    801065b3 <strcmp+0x33>
80106595:	eb 29                	jmp    801065c0 <strcmp+0x40>
80106597:	89 f6                	mov    %esi,%esi
80106599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801065a0:	83 c2 01             	add    $0x1,%edx
801065a3:	0f b6 02             	movzbl (%edx),%eax
801065a6:	8d 71 01             	lea    0x1(%ecx),%esi
801065a9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
801065ad:	84 c0                	test   %al,%al
801065af:	74 0f                	je     801065c0 <strcmp+0x40>
801065b1:	89 f1                	mov    %esi,%ecx
801065b3:	38 d8                	cmp    %bl,%al
801065b5:	74 e9                	je     801065a0 <strcmp+0x20>
801065b7:	29 d8                	sub    %ebx,%eax
801065b9:	5b                   	pop    %ebx
801065ba:	5e                   	pop    %esi
801065bb:	5d                   	pop    %ebp
801065bc:	c3                   	ret    
801065bd:	8d 76 00             	lea    0x0(%esi),%esi
801065c0:	31 c0                	xor    %eax,%eax
801065c2:	29 d8                	sub    %ebx,%eax
801065c4:	5b                   	pop    %ebx
801065c5:	5e                   	pop    %esi
801065c6:	5d                   	pop    %ebp
801065c7:	c3                   	ret    
801065c8:	90                   	nop
801065c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801065d0 <strncpy>:
801065d0:	55                   	push   %ebp
801065d1:	89 e5                	mov    %esp,%ebp
801065d3:	56                   	push   %esi
801065d4:	53                   	push   %ebx
801065d5:	8b 45 08             	mov    0x8(%ebp),%eax
801065d8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
801065db:	8b 4d 10             	mov    0x10(%ebp),%ecx
801065de:	89 c2                	mov    %eax,%edx
801065e0:	eb 19                	jmp    801065fb <strncpy+0x2b>
801065e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801065e8:	83 c3 01             	add    $0x1,%ebx
801065eb:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
801065ef:	83 c2 01             	add    $0x1,%edx
801065f2:	84 c9                	test   %cl,%cl
801065f4:	88 4a ff             	mov    %cl,-0x1(%edx)
801065f7:	74 09                	je     80106602 <strncpy+0x32>
801065f9:	89 f1                	mov    %esi,%ecx
801065fb:	85 c9                	test   %ecx,%ecx
801065fd:	8d 71 ff             	lea    -0x1(%ecx),%esi
80106600:	7f e6                	jg     801065e8 <strncpy+0x18>
80106602:	31 c9                	xor    %ecx,%ecx
80106604:	85 f6                	test   %esi,%esi
80106606:	7e 17                	jle    8010661f <strncpy+0x4f>
80106608:	90                   	nop
80106609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106610:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
80106614:	89 f3                	mov    %esi,%ebx
80106616:	83 c1 01             	add    $0x1,%ecx
80106619:	29 cb                	sub    %ecx,%ebx
8010661b:	85 db                	test   %ebx,%ebx
8010661d:	7f f1                	jg     80106610 <strncpy+0x40>
8010661f:	5b                   	pop    %ebx
80106620:	5e                   	pop    %esi
80106621:	5d                   	pop    %ebp
80106622:	c3                   	ret    
80106623:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106629:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106630 <safestrcpy>:
80106630:	55                   	push   %ebp
80106631:	89 e5                	mov    %esp,%ebp
80106633:	56                   	push   %esi
80106634:	53                   	push   %ebx
80106635:	8b 4d 10             	mov    0x10(%ebp),%ecx
80106638:	8b 45 08             	mov    0x8(%ebp),%eax
8010663b:	8b 55 0c             	mov    0xc(%ebp),%edx
8010663e:	85 c9                	test   %ecx,%ecx
80106640:	7e 26                	jle    80106668 <safestrcpy+0x38>
80106642:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
80106646:	89 c1                	mov    %eax,%ecx
80106648:	eb 17                	jmp    80106661 <safestrcpy+0x31>
8010664a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106650:	83 c2 01             	add    $0x1,%edx
80106653:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
80106657:	83 c1 01             	add    $0x1,%ecx
8010665a:	84 db                	test   %bl,%bl
8010665c:	88 59 ff             	mov    %bl,-0x1(%ecx)
8010665f:	74 04                	je     80106665 <safestrcpy+0x35>
80106661:	39 f2                	cmp    %esi,%edx
80106663:	75 eb                	jne    80106650 <safestrcpy+0x20>
80106665:	c6 01 00             	movb   $0x0,(%ecx)
80106668:	5b                   	pop    %ebx
80106669:	5e                   	pop    %esi
8010666a:	5d                   	pop    %ebp
8010666b:	c3                   	ret    
8010666c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106670 <strlen>:
80106670:	55                   	push   %ebp
80106671:	31 c0                	xor    %eax,%eax
80106673:	89 e5                	mov    %esp,%ebp
80106675:	8b 55 08             	mov    0x8(%ebp),%edx
80106678:	80 3a 00             	cmpb   $0x0,(%edx)
8010667b:	74 0c                	je     80106689 <strlen+0x19>
8010667d:	8d 76 00             	lea    0x0(%esi),%esi
80106680:	83 c0 01             	add    $0x1,%eax
80106683:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
80106687:	75 f7                	jne    80106680 <strlen+0x10>
80106689:	5d                   	pop    %ebp
8010668a:	c3                   	ret    

8010668b <swtch>:
# a struct context, and save its address in *old.
# Switch stacks to new and pop previously-saved registers.

.globl swtch
swtch:
  movl 4(%esp), %eax
8010668b:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
8010668f:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-save registers
  pushl %ebp
80106693:	55                   	push   %ebp
  pushl %ebx
80106694:	53                   	push   %ebx
  pushl %esi
80106695:	56                   	push   %esi
  pushl %edi
80106696:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
80106697:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
80106699:	89 d4                	mov    %edx,%esp

  # Load new callee-save registers
  popl %edi
8010669b:	5f                   	pop    %edi
  popl %esi
8010669c:	5e                   	pop    %esi
  popl %ebx
8010669d:	5b                   	pop    %ebx
  popl %ebp
8010669e:	5d                   	pop    %ebp
  ret
8010669f:	c3                   	ret    

801066a0 <fetchint>:
801066a0:	55                   	push   %ebp
801066a1:	89 e5                	mov    %esp,%ebp
801066a3:	53                   	push   %ebx
801066a4:	83 ec 04             	sub    $0x4,%esp
801066a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801066aa:	e8 b4 eb ff ff       	call   80105263 <myproc>
801066af:	8b 00                	mov    (%eax),%eax
801066b1:	39 d8                	cmp    %ebx,%eax
801066b3:	76 1b                	jbe    801066d0 <fetchint+0x30>
801066b5:	8d 53 04             	lea    0x4(%ebx),%edx
801066b8:	39 d0                	cmp    %edx,%eax
801066ba:	72 14                	jb     801066d0 <fetchint+0x30>
801066bc:	8b 45 0c             	mov    0xc(%ebp),%eax
801066bf:	8b 13                	mov    (%ebx),%edx
801066c1:	89 10                	mov    %edx,(%eax)
801066c3:	31 c0                	xor    %eax,%eax
801066c5:	83 c4 04             	add    $0x4,%esp
801066c8:	5b                   	pop    %ebx
801066c9:	5d                   	pop    %ebp
801066ca:	c3                   	ret    
801066cb:	90                   	nop
801066cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801066d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801066d5:	eb ee                	jmp    801066c5 <fetchint+0x25>
801066d7:	89 f6                	mov    %esi,%esi
801066d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801066e0 <fetchstr>:
801066e0:	55                   	push   %ebp
801066e1:	89 e5                	mov    %esp,%ebp
801066e3:	53                   	push   %ebx
801066e4:	83 ec 04             	sub    $0x4,%esp
801066e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
801066ea:	e8 74 eb ff ff       	call   80105263 <myproc>
801066ef:	39 18                	cmp    %ebx,(%eax)
801066f1:	76 29                	jbe    8010671c <fetchstr+0x3c>
801066f3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801066f6:	89 da                	mov    %ebx,%edx
801066f8:	89 19                	mov    %ebx,(%ecx)
801066fa:	8b 00                	mov    (%eax),%eax
801066fc:	39 c3                	cmp    %eax,%ebx
801066fe:	73 1c                	jae    8010671c <fetchstr+0x3c>
80106700:	80 3b 00             	cmpb   $0x0,(%ebx)
80106703:	75 10                	jne    80106715 <fetchstr+0x35>
80106705:	eb 29                	jmp    80106730 <fetchstr+0x50>
80106707:	89 f6                	mov    %esi,%esi
80106709:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80106710:	80 3a 00             	cmpb   $0x0,(%edx)
80106713:	74 1b                	je     80106730 <fetchstr+0x50>
80106715:	83 c2 01             	add    $0x1,%edx
80106718:	39 d0                	cmp    %edx,%eax
8010671a:	77 f4                	ja     80106710 <fetchstr+0x30>
8010671c:	83 c4 04             	add    $0x4,%esp
8010671f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106724:	5b                   	pop    %ebx
80106725:	5d                   	pop    %ebp
80106726:	c3                   	ret    
80106727:	89 f6                	mov    %esi,%esi
80106729:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80106730:	83 c4 04             	add    $0x4,%esp
80106733:	89 d0                	mov    %edx,%eax
80106735:	29 d8                	sub    %ebx,%eax
80106737:	5b                   	pop    %ebx
80106738:	5d                   	pop    %ebp
80106739:	c3                   	ret    
8010673a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106740 <argint>:
80106740:	55                   	push   %ebp
80106741:	89 e5                	mov    %esp,%ebp
80106743:	56                   	push   %esi
80106744:	53                   	push   %ebx
80106745:	e8 19 eb ff ff       	call   80105263 <myproc>
8010674a:	8b 40 38             	mov    0x38(%eax),%eax
8010674d:	8b 55 08             	mov    0x8(%ebp),%edx
80106750:	8b 40 44             	mov    0x44(%eax),%eax
80106753:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
80106756:	e8 08 eb ff ff       	call   80105263 <myproc>
8010675b:	8b 00                	mov    (%eax),%eax
8010675d:	8d 73 04             	lea    0x4(%ebx),%esi
80106760:	39 c6                	cmp    %eax,%esi
80106762:	73 1c                	jae    80106780 <argint+0x40>
80106764:	8d 53 08             	lea    0x8(%ebx),%edx
80106767:	39 d0                	cmp    %edx,%eax
80106769:	72 15                	jb     80106780 <argint+0x40>
8010676b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010676e:	8b 53 04             	mov    0x4(%ebx),%edx
80106771:	89 10                	mov    %edx,(%eax)
80106773:	31 c0                	xor    %eax,%eax
80106775:	5b                   	pop    %ebx
80106776:	5e                   	pop    %esi
80106777:	5d                   	pop    %ebp
80106778:	c3                   	ret    
80106779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106780:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106785:	eb ee                	jmp    80106775 <argint+0x35>
80106787:	89 f6                	mov    %esi,%esi
80106789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106790 <argptr>:
80106790:	55                   	push   %ebp
80106791:	89 e5                	mov    %esp,%ebp
80106793:	56                   	push   %esi
80106794:	53                   	push   %ebx
80106795:	83 ec 10             	sub    $0x10,%esp
80106798:	8b 5d 10             	mov    0x10(%ebp),%ebx
8010679b:	e8 c3 ea ff ff       	call   80105263 <myproc>
801067a0:	89 c6                	mov    %eax,%esi
801067a2:	8d 45 f4             	lea    -0xc(%ebp),%eax
801067a5:	83 ec 08             	sub    $0x8,%esp
801067a8:	50                   	push   %eax
801067a9:	ff 75 08             	pushl  0x8(%ebp)
801067ac:	e8 8f ff ff ff       	call   80106740 <argint>
801067b1:	c1 e8 1f             	shr    $0x1f,%eax
801067b4:	83 c4 10             	add    $0x10,%esp
801067b7:	84 c0                	test   %al,%al
801067b9:	75 2d                	jne    801067e8 <argptr+0x58>
801067bb:	89 d8                	mov    %ebx,%eax
801067bd:	c1 e8 1f             	shr    $0x1f,%eax
801067c0:	84 c0                	test   %al,%al
801067c2:	75 24                	jne    801067e8 <argptr+0x58>
801067c4:	8b 16                	mov    (%esi),%edx
801067c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067c9:	39 c2                	cmp    %eax,%edx
801067cb:	76 1b                	jbe    801067e8 <argptr+0x58>
801067cd:	01 c3                	add    %eax,%ebx
801067cf:	39 da                	cmp    %ebx,%edx
801067d1:	72 15                	jb     801067e8 <argptr+0x58>
801067d3:	8b 55 0c             	mov    0xc(%ebp),%edx
801067d6:	89 02                	mov    %eax,(%edx)
801067d8:	31 c0                	xor    %eax,%eax
801067da:	8d 65 f8             	lea    -0x8(%ebp),%esp
801067dd:	5b                   	pop    %ebx
801067de:	5e                   	pop    %esi
801067df:	5d                   	pop    %ebp
801067e0:	c3                   	ret    
801067e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801067e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801067ed:	eb eb                	jmp    801067da <argptr+0x4a>
801067ef:	90                   	nop

801067f0 <argstr>:
801067f0:	55                   	push   %ebp
801067f1:	89 e5                	mov    %esp,%ebp
801067f3:	83 ec 20             	sub    $0x20,%esp
801067f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
801067f9:	50                   	push   %eax
801067fa:	ff 75 08             	pushl  0x8(%ebp)
801067fd:	e8 3e ff ff ff       	call   80106740 <argint>
80106802:	83 c4 10             	add    $0x10,%esp
80106805:	85 c0                	test   %eax,%eax
80106807:	78 17                	js     80106820 <argstr+0x30>
80106809:	83 ec 08             	sub    $0x8,%esp
8010680c:	ff 75 0c             	pushl  0xc(%ebp)
8010680f:	ff 75 f4             	pushl  -0xc(%ebp)
80106812:	e8 c9 fe ff ff       	call   801066e0 <fetchstr>
80106817:	83 c4 10             	add    $0x10,%esp
8010681a:	c9                   	leave  
8010681b:	c3                   	ret    
8010681c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106820:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106825:	c9                   	leave  
80106826:	c3                   	ret    
80106827:	89 f6                	mov    %esi,%esi
80106829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106830 <syscall>:
80106830:	55                   	push   %ebp
80106831:	89 e5                	mov    %esp,%ebp
80106833:	56                   	push   %esi
80106834:	53                   	push   %ebx
80106835:	e8 29 ea ff ff       	call   80105263 <myproc>
8010683a:	8b 70 38             	mov    0x38(%eax),%esi
8010683d:	89 c3                	mov    %eax,%ebx
8010683f:	8b 46 1c             	mov    0x1c(%esi),%eax
80106842:	8d 50 ff             	lea    -0x1(%eax),%edx
80106845:	83 fa 1f             	cmp    $0x1f,%edx
80106848:	77 1e                	ja     80106868 <syscall+0x38>
8010684a:	8b 14 85 a0 f0 10 80 	mov    -0x7fef0f60(,%eax,4),%edx
80106851:	85 d2                	test   %edx,%edx
80106853:	74 13                	je     80106868 <syscall+0x38>
80106855:	ff d2                	call   *%edx
80106857:	89 46 1c             	mov    %eax,0x1c(%esi)
8010685a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010685d:	5b                   	pop    %ebx
8010685e:	5e                   	pop    %esi
8010685f:	5d                   	pop    %ebp
80106860:	c3                   	ret    
80106861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106868:	50                   	push   %eax
80106869:	8d 83 90 00 00 00    	lea    0x90(%ebx),%eax
8010686f:	50                   	push   %eax
80106870:	ff 73 10             	pushl  0x10(%ebx)
80106873:	68 6d f0 10 80       	push   $0x8010f06d
80106878:	e8 e3 9d ff ff       	call   80100660 <cprintf>
8010687d:	8b 43 38             	mov    0x38(%ebx),%eax
80106880:	83 c4 10             	add    $0x10,%esp
80106883:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
8010688a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010688d:	5b                   	pop    %ebx
8010688e:	5e                   	pop    %esi
8010688f:	5d                   	pop    %ebp
80106890:	c3                   	ret    
80106891:	66 90                	xchg   %ax,%ax
80106893:	66 90                	xchg   %ax,%ax
80106895:	66 90                	xchg   %ax,%ax
80106897:	66 90                	xchg   %ax,%ax
80106899:	66 90                	xchg   %ax,%ax
8010689b:	66 90                	xchg   %ax,%ax
8010689d:	66 90                	xchg   %ax,%ax
8010689f:	90                   	nop

801068a0 <createmount>:
801068a0:	55                   	push   %ebp
801068a1:	89 e5                	mov    %esp,%ebp
801068a3:	57                   	push   %edi
801068a4:	56                   	push   %esi
801068a5:	53                   	push   %ebx
801068a6:	8d 75 da             	lea    -0x26(%ebp),%esi
801068a9:	83 ec 40             	sub    $0x40,%esp
801068ac:	89 4d c0             	mov    %ecx,-0x40(%ebp)
801068af:	8b 4d 08             	mov    0x8(%ebp),%ecx
801068b2:	ff 75 0c             	pushl  0xc(%ebp)
801068b5:	56                   	push   %esi
801068b6:	50                   	push   %eax
801068b7:	89 55 c4             	mov    %edx,-0x3c(%ebp)
801068ba:	89 4d bc             	mov    %ecx,-0x44(%ebp)
801068bd:	e8 1e c0 ff ff       	call   801028e0 <nameiparentmount>
801068c2:	83 c4 10             	add    $0x10,%esp
801068c5:	85 c0                	test   %eax,%eax
801068c7:	0f 84 fb 00 00 00    	je     801069c8 <createmount+0x128>
801068cd:	83 ec 0c             	sub    $0xc,%esp
801068d0:	89 c3                	mov    %eax,%ebx
801068d2:	50                   	push   %eax
801068d3:	e8 f8 b5 ff ff       	call   80101ed0 <ilock>
801068d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
801068db:	83 c4 0c             	add    $0xc,%esp
801068de:	50                   	push   %eax
801068df:	56                   	push   %esi
801068e0:	53                   	push   %ebx
801068e1:	e8 3a bb ff ff       	call   80102420 <dirlookup>
801068e6:	83 c4 10             	add    $0x10,%esp
801068e9:	85 c0                	test   %eax,%eax
801068eb:	89 c7                	mov    %eax,%edi
801068ed:	74 59                	je     80106948 <createmount+0xa8>
801068ef:	83 ec 0c             	sub    $0xc,%esp
801068f2:	53                   	push   %ebx
801068f3:	e8 78 b8 ff ff       	call   80102170 <iunlockput>
801068f8:	89 3c 24             	mov    %edi,(%esp)
801068fb:	e8 d0 b5 ff ff       	call   80101ed0 <ilock>
80106900:	83 c4 10             	add    $0x10,%esp
80106903:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%ebp)
80106908:	75 16                	jne    80106920 <createmount+0x80>
8010690a:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
8010690f:	89 f8                	mov    %edi,%eax
80106911:	75 0d                	jne    80106920 <createmount+0x80>
80106913:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106916:	5b                   	pop    %ebx
80106917:	5e                   	pop    %esi
80106918:	5f                   	pop    %edi
80106919:	5d                   	pop    %ebp
8010691a:	c3                   	ret    
8010691b:	90                   	nop
8010691c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106920:	83 ec 0c             	sub    $0xc,%esp
80106923:	57                   	push   %edi
80106924:	e8 47 b8 ff ff       	call   80102170 <iunlockput>
80106929:	8b 45 0c             	mov    0xc(%ebp),%eax
8010692c:	5a                   	pop    %edx
8010692d:	ff 30                	pushl  (%eax)
8010692f:	e8 a7 d5 ff ff       	call   80103edb <mntput>
80106934:	83 c4 10             	add    $0x10,%esp
80106937:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010693a:	31 c0                	xor    %eax,%eax
8010693c:	5b                   	pop    %ebx
8010693d:	5e                   	pop    %esi
8010693e:	5f                   	pop    %edi
8010693f:	5d                   	pop    %ebp
80106940:	c3                   	ret    
80106941:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106948:	0f bf 45 c4          	movswl -0x3c(%ebp),%eax
8010694c:	83 ec 08             	sub    $0x8,%esp
8010694f:	50                   	push   %eax
80106950:	ff 33                	pushl  (%ebx)
80106952:	e8 e9 b3 ff ff       	call   80101d40 <ialloc>
80106957:	83 c4 10             	add    $0x10,%esp
8010695a:	85 c0                	test   %eax,%eax
8010695c:	89 c7                	mov    %eax,%edi
8010695e:	0f 84 c4 00 00 00    	je     80106a28 <createmount+0x188>
80106964:	83 ec 0c             	sub    $0xc,%esp
80106967:	50                   	push   %eax
80106968:	e8 63 b5 ff ff       	call   80101ed0 <ilock>
8010696d:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
80106971:	66 89 47 52          	mov    %ax,0x52(%edi)
80106975:	0f b7 45 bc          	movzwl -0x44(%ebp),%eax
80106979:	66 89 47 54          	mov    %ax,0x54(%edi)
8010697d:	b8 01 00 00 00       	mov    $0x1,%eax
80106982:	66 89 47 56          	mov    %ax,0x56(%edi)
80106986:	89 3c 24             	mov    %edi,(%esp)
80106989:	e8 82 b4 ff ff       	call   80101e10 <iupdate>
8010698e:	83 c4 10             	add    $0x10,%esp
80106991:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%ebp)
80106996:	74 38                	je     801069d0 <createmount+0x130>
80106998:	83 ec 04             	sub    $0x4,%esp
8010699b:	ff 77 04             	pushl  0x4(%edi)
8010699e:	56                   	push   %esi
8010699f:	53                   	push   %ebx
801069a0:	e8 cb bd ff ff       	call   80102770 <dirlink>
801069a5:	83 c4 10             	add    $0x10,%esp
801069a8:	85 c0                	test   %eax,%eax
801069aa:	78 6f                	js     80106a1b <createmount+0x17b>
801069ac:	83 ec 0c             	sub    $0xc,%esp
801069af:	53                   	push   %ebx
801069b0:	e8 bb b7 ff ff       	call   80102170 <iunlockput>
801069b5:	83 c4 10             	add    $0x10,%esp
801069b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801069bb:	89 f8                	mov    %edi,%eax
801069bd:	5b                   	pop    %ebx
801069be:	5e                   	pop    %esi
801069bf:	5f                   	pop    %edi
801069c0:	5d                   	pop    %ebp
801069c1:	c3                   	ret    
801069c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801069c8:	31 c0                	xor    %eax,%eax
801069ca:	e9 44 ff ff ff       	jmp    80106913 <createmount+0x73>
801069cf:	90                   	nop
801069d0:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
801069d5:	83 ec 0c             	sub    $0xc,%esp
801069d8:	53                   	push   %ebx
801069d9:	e8 32 b4 ff ff       	call   80101e10 <iupdate>
801069de:	83 c4 0c             	add    $0xc,%esp
801069e1:	ff 77 04             	pushl  0x4(%edi)
801069e4:	68 11 e9 10 80       	push   $0x8010e911
801069e9:	57                   	push   %edi
801069ea:	e8 81 bd ff ff       	call   80102770 <dirlink>
801069ef:	83 c4 10             	add    $0x10,%esp
801069f2:	85 c0                	test   %eax,%eax
801069f4:	78 18                	js     80106a0e <createmount+0x16e>
801069f6:	83 ec 04             	sub    $0x4,%esp
801069f9:	ff 73 04             	pushl  0x4(%ebx)
801069fc:	68 10 e9 10 80       	push   $0x8010e910
80106a01:	57                   	push   %edi
80106a02:	e8 69 bd ff ff       	call   80102770 <dirlink>
80106a07:	83 c4 10             	add    $0x10,%esp
80106a0a:	85 c0                	test   %eax,%eax
80106a0c:	79 8a                	jns    80106998 <createmount+0xf8>
80106a0e:	83 ec 0c             	sub    $0xc,%esp
80106a11:	68 33 f1 10 80       	push   $0x8010f133
80106a16:	e8 b5 99 ff ff       	call   801003d0 <panic>
80106a1b:	83 ec 0c             	sub    $0xc,%esp
80106a1e:	68 3f f1 10 80       	push   $0x8010f13f
80106a23:	e8 a8 99 ff ff       	call   801003d0 <panic>
80106a28:	83 ec 0c             	sub    $0xc,%esp
80106a2b:	68 24 f1 10 80       	push   $0x8010f124
80106a30:	e8 9b 99 ff ff       	call   801003d0 <panic>
80106a35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106a39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106a40 <argfd.constprop.0>:
80106a40:	55                   	push   %ebp
80106a41:	89 e5                	mov    %esp,%ebp
80106a43:	56                   	push   %esi
80106a44:	53                   	push   %ebx
80106a45:	89 c6                	mov    %eax,%esi
80106a47:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106a4a:	89 d3                	mov    %edx,%ebx
80106a4c:	83 ec 18             	sub    $0x18,%esp
80106a4f:	50                   	push   %eax
80106a50:	6a 00                	push   $0x0
80106a52:	e8 e9 fc ff ff       	call   80106740 <argint>
80106a57:	83 c4 10             	add    $0x10,%esp
80106a5a:	85 c0                	test   %eax,%eax
80106a5c:	78 32                	js     80106a90 <argfd.constprop.0+0x50>
80106a5e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80106a62:	77 2c                	ja     80106a90 <argfd.constprop.0+0x50>
80106a64:	e8 fa e7 ff ff       	call   80105263 <myproc>
80106a69:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106a6c:	8b 44 90 48          	mov    0x48(%eax,%edx,4),%eax
80106a70:	85 c0                	test   %eax,%eax
80106a72:	74 1c                	je     80106a90 <argfd.constprop.0+0x50>
80106a74:	85 f6                	test   %esi,%esi
80106a76:	74 02                	je     80106a7a <argfd.constprop.0+0x3a>
80106a78:	89 16                	mov    %edx,(%esi)
80106a7a:	85 db                	test   %ebx,%ebx
80106a7c:	74 22                	je     80106aa0 <argfd.constprop.0+0x60>
80106a7e:	89 03                	mov    %eax,(%ebx)
80106a80:	31 c0                	xor    %eax,%eax
80106a82:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106a85:	5b                   	pop    %ebx
80106a86:	5e                   	pop    %esi
80106a87:	5d                   	pop    %ebp
80106a88:	c3                   	ret    
80106a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106a90:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106a93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106a98:	5b                   	pop    %ebx
80106a99:	5e                   	pop    %esi
80106a9a:	5d                   	pop    %ebp
80106a9b:	c3                   	ret    
80106a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106aa0:	31 c0                	xor    %eax,%eax
80106aa2:	eb de                	jmp    80106a82 <argfd.constprop.0+0x42>
80106aa4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106aaa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80106ab0 <sys_dup>:
80106ab0:	55                   	push   %ebp
80106ab1:	31 c0                	xor    %eax,%eax
80106ab3:	89 e5                	mov    %esp,%ebp
80106ab5:	56                   	push   %esi
80106ab6:	53                   	push   %ebx
80106ab7:	8d 55 f4             	lea    -0xc(%ebp),%edx
80106aba:	83 ec 10             	sub    $0x10,%esp
80106abd:	e8 7e ff ff ff       	call   80106a40 <argfd.constprop.0>
80106ac2:	85 c0                	test   %eax,%eax
80106ac4:	78 1a                	js     80106ae0 <sys_dup+0x30>
80106ac6:	31 db                	xor    %ebx,%ebx
80106ac8:	8b 75 f4             	mov    -0xc(%ebp),%esi
80106acb:	e8 93 e7 ff ff       	call   80105263 <myproc>
80106ad0:	8b 54 98 48          	mov    0x48(%eax,%ebx,4),%edx
80106ad4:	85 d2                	test   %edx,%edx
80106ad6:	74 18                	je     80106af0 <sys_dup+0x40>
80106ad8:	83 c3 01             	add    $0x1,%ebx
80106adb:	83 fb 10             	cmp    $0x10,%ebx
80106ade:	75 f0                	jne    80106ad0 <sys_dup+0x20>
80106ae0:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106ae3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106ae8:	5b                   	pop    %ebx
80106ae9:	5e                   	pop    %esi
80106aea:	5d                   	pop    %ebp
80106aeb:	c3                   	ret    
80106aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106af0:	89 74 98 48          	mov    %esi,0x48(%eax,%ebx,4)
80106af4:	83 ec 0c             	sub    $0xc,%esp
80106af7:	ff 75 f4             	pushl  -0xc(%ebp)
80106afa:	e8 d1 aa ff ff       	call   801015d0 <filedup>
80106aff:	83 c4 10             	add    $0x10,%esp
80106b02:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106b05:	89 d8                	mov    %ebx,%eax
80106b07:	5b                   	pop    %ebx
80106b08:	5e                   	pop    %esi
80106b09:	5d                   	pop    %ebp
80106b0a:	c3                   	ret    
80106b0b:	90                   	nop
80106b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106b10 <sys_read>:
80106b10:	55                   	push   %ebp
80106b11:	31 c0                	xor    %eax,%eax
80106b13:	89 e5                	mov    %esp,%ebp
80106b15:	83 ec 18             	sub    $0x18,%esp
80106b18:	8d 55 ec             	lea    -0x14(%ebp),%edx
80106b1b:	e8 20 ff ff ff       	call   80106a40 <argfd.constprop.0>
80106b20:	85 c0                	test   %eax,%eax
80106b22:	0f 88 88 00 00 00    	js     80106bb0 <sys_read+0xa0>
80106b28:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106b2b:	83 ec 08             	sub    $0x8,%esp
80106b2e:	50                   	push   %eax
80106b2f:	6a 02                	push   $0x2
80106b31:	e8 0a fc ff ff       	call   80106740 <argint>
80106b36:	83 c4 10             	add    $0x10,%esp
80106b39:	85 c0                	test   %eax,%eax
80106b3b:	78 73                	js     80106bb0 <sys_read+0xa0>
80106b3d:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106b40:	83 ec 04             	sub    $0x4,%esp
80106b43:	ff 75 f0             	pushl  -0x10(%ebp)
80106b46:	50                   	push   %eax
80106b47:	6a 01                	push   $0x1
80106b49:	e8 42 fc ff ff       	call   80106790 <argptr>
80106b4e:	83 c4 10             	add    $0x10,%esp
80106b51:	85 c0                	test   %eax,%eax
80106b53:	78 5b                	js     80106bb0 <sys_read+0xa0>
80106b55:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106b58:	83 38 03             	cmpl   $0x3,(%eax)
80106b5b:	74 1b                	je     80106b78 <sys_read+0x68>
80106b5d:	83 ec 04             	sub    $0x4,%esp
80106b60:	ff 75 f0             	pushl  -0x10(%ebp)
80106b63:	ff 75 f4             	pushl  -0xc(%ebp)
80106b66:	50                   	push   %eax
80106b67:	e8 e4 ab ff ff       	call   80101750 <fileread>
80106b6c:	83 c4 10             	add    $0x10,%esp
80106b6f:	c9                   	leave  
80106b70:	c3                   	ret    
80106b71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106b78:	80 78 14 00          	cmpb   $0x0,0x14(%eax)
80106b7c:	75 1a                	jne    80106b98 <sys_read+0x88>
80106b7e:	ff 75 f0             	pushl  -0x10(%ebp)
80106b81:	ff 75 f4             	pushl  -0xc(%ebp)
80106b84:	50                   	push   %eax
80106b85:	6a 01                	push   $0x1
80106b87:	e8 94 6b 00 00       	call   8010d720 <cg_read>
80106b8c:	83 c4 10             	add    $0x10,%esp
80106b8f:	c9                   	leave  
80106b90:	c3                   	ret    
80106b91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106b98:	ff 75 f0             	pushl  -0x10(%ebp)
80106b9b:	ff 75 f4             	pushl  -0xc(%ebp)
80106b9e:	50                   	push   %eax
80106b9f:	6a 00                	push   $0x0
80106ba1:	e8 7a 6b 00 00       	call   8010d720 <cg_read>
80106ba6:	83 c4 10             	add    $0x10,%esp
80106ba9:	c9                   	leave  
80106baa:	c3                   	ret    
80106bab:	90                   	nop
80106bac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106bb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106bb5:	c9                   	leave  
80106bb6:	c3                   	ret    
80106bb7:	89 f6                	mov    %esi,%esi
80106bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106bc0 <sys_write>:
80106bc0:	55                   	push   %ebp
80106bc1:	31 c0                	xor    %eax,%eax
80106bc3:	89 e5                	mov    %esp,%ebp
80106bc5:	83 ec 18             	sub    $0x18,%esp
80106bc8:	8d 55 ec             	lea    -0x14(%ebp),%edx
80106bcb:	e8 70 fe ff ff       	call   80106a40 <argfd.constprop.0>
80106bd0:	85 c0                	test   %eax,%eax
80106bd2:	78 64                	js     80106c38 <sys_write+0x78>
80106bd4:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106bd7:	83 ec 08             	sub    $0x8,%esp
80106bda:	50                   	push   %eax
80106bdb:	6a 02                	push   $0x2
80106bdd:	e8 5e fb ff ff       	call   80106740 <argint>
80106be2:	83 c4 10             	add    $0x10,%esp
80106be5:	85 c0                	test   %eax,%eax
80106be7:	78 4f                	js     80106c38 <sys_write+0x78>
80106be9:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106bec:	83 ec 04             	sub    $0x4,%esp
80106bef:	ff 75 f0             	pushl  -0x10(%ebp)
80106bf2:	50                   	push   %eax
80106bf3:	6a 01                	push   $0x1
80106bf5:	e8 96 fb ff ff       	call   80106790 <argptr>
80106bfa:	83 c4 10             	add    $0x10,%esp
80106bfd:	85 c0                	test   %eax,%eax
80106bff:	78 37                	js     80106c38 <sys_write+0x78>
80106c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106c04:	83 38 03             	cmpl   $0x3,(%eax)
80106c07:	74 17                	je     80106c20 <sys_write+0x60>
80106c09:	83 ec 04             	sub    $0x4,%esp
80106c0c:	ff 75 f0             	pushl  -0x10(%ebp)
80106c0f:	ff 75 f4             	pushl  -0xc(%ebp)
80106c12:	50                   	push   %eax
80106c13:	e8 c8 ab ff ff       	call   801017e0 <filewrite>
80106c18:	83 c4 10             	add    $0x10,%esp
80106c1b:	c9                   	leave  
80106c1c:	c3                   	ret    
80106c1d:	8d 76 00             	lea    0x0(%esi),%esi
80106c20:	83 ec 04             	sub    $0x4,%esp
80106c23:	ff 75 f0             	pushl  -0x10(%ebp)
80106c26:	ff 75 f4             	pushl  -0xc(%ebp)
80106c29:	50                   	push   %eax
80106c2a:	e8 31 6b 00 00       	call   8010d760 <cg_write>
80106c2f:	83 c4 10             	add    $0x10,%esp
80106c32:	c9                   	leave  
80106c33:	c3                   	ret    
80106c34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106c38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106c3d:	c9                   	leave  
80106c3e:	c3                   	ret    
80106c3f:	90                   	nop

80106c40 <sys_close>:
80106c40:	55                   	push   %ebp
80106c41:	89 e5                	mov    %esp,%ebp
80106c43:	83 ec 18             	sub    $0x18,%esp
80106c46:	8d 55 f4             	lea    -0xc(%ebp),%edx
80106c49:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106c4c:	e8 ef fd ff ff       	call   80106a40 <argfd.constprop.0>
80106c51:	85 c0                	test   %eax,%eax
80106c53:	78 3b                	js     80106c90 <sys_close+0x50>
80106c55:	e8 09 e6 ff ff       	call   80105263 <myproc>
80106c5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106c5d:	c7 44 90 48 00 00 00 	movl   $0x0,0x48(%eax,%edx,4)
80106c64:	00 
80106c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106c68:	83 38 03             	cmpl   $0x3,(%eax)
80106c6b:	74 13                	je     80106c80 <sys_close+0x40>
80106c6d:	83 ec 0c             	sub    $0xc,%esp
80106c70:	50                   	push   %eax
80106c71:	e8 aa a9 ff ff       	call   80101620 <fileclose>
80106c76:	83 c4 10             	add    $0x10,%esp
80106c79:	31 c0                	xor    %eax,%eax
80106c7b:	c9                   	leave  
80106c7c:	c3                   	ret    
80106c7d:	8d 76 00             	lea    0x0(%esi),%esi
80106c80:	83 ec 0c             	sub    $0xc,%esp
80106c83:	50                   	push   %eax
80106c84:	e8 17 6b 00 00       	call   8010d7a0 <cg_close>
80106c89:	83 c4 10             	add    $0x10,%esp
80106c8c:	31 c0                	xor    %eax,%eax
80106c8e:	c9                   	leave  
80106c8f:	c3                   	ret    
80106c90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106c95:	c9                   	leave  
80106c96:	c3                   	ret    
80106c97:	89 f6                	mov    %esi,%esi
80106c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106ca0 <sys_fstat>:
80106ca0:	55                   	push   %ebp
80106ca1:	31 c0                	xor    %eax,%eax
80106ca3:	89 e5                	mov    %esp,%ebp
80106ca5:	83 ec 18             	sub    $0x18,%esp
80106ca8:	8d 55 f0             	lea    -0x10(%ebp),%edx
80106cab:	e8 90 fd ff ff       	call   80106a40 <argfd.constprop.0>
80106cb0:	85 c0                	test   %eax,%eax
80106cb2:	78 4c                	js     80106d00 <sys_fstat+0x60>
80106cb4:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106cb7:	83 ec 04             	sub    $0x4,%esp
80106cba:	6a 14                	push   $0x14
80106cbc:	50                   	push   %eax
80106cbd:	6a 01                	push   $0x1
80106cbf:	e8 cc fa ff ff       	call   80106790 <argptr>
80106cc4:	83 c4 10             	add    $0x10,%esp
80106cc7:	85 c0                	test   %eax,%eax
80106cc9:	78 35                	js     80106d00 <sys_fstat+0x60>
80106ccb:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106cce:	83 38 03             	cmpl   $0x3,(%eax)
80106cd1:	74 15                	je     80106ce8 <sys_fstat+0x48>
80106cd3:	83 ec 08             	sub    $0x8,%esp
80106cd6:	ff 75 f4             	pushl  -0xc(%ebp)
80106cd9:	50                   	push   %eax
80106cda:	e8 21 aa ff ff       	call   80101700 <filestat>
80106cdf:	83 c4 10             	add    $0x10,%esp
80106ce2:	c9                   	leave  
80106ce3:	c3                   	ret    
80106ce4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106ce8:	83 ec 08             	sub    $0x8,%esp
80106ceb:	ff 75 f4             	pushl  -0xc(%ebp)
80106cee:	50                   	push   %eax
80106cef:	e8 dc 6a 00 00       	call   8010d7d0 <cg_stat>
80106cf4:	83 c4 10             	add    $0x10,%esp
80106cf7:	c9                   	leave  
80106cf8:	c3                   	ret    
80106cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106d00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106d05:	c9                   	leave  
80106d06:	c3                   	ret    
80106d07:	89 f6                	mov    %esi,%esi
80106d09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80106d10 <sys_link>:
80106d10:	55                   	push   %ebp
80106d11:	89 e5                	mov    %esp,%ebp
80106d13:	57                   	push   %edi
80106d14:	56                   	push   %esi
80106d15:	53                   	push   %ebx
80106d16:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80106d19:	83 ec 34             	sub    $0x34,%esp
80106d1c:	50                   	push   %eax
80106d1d:	6a 00                	push   $0x0
80106d1f:	e8 cc fa ff ff       	call   801067f0 <argstr>
80106d24:	83 c4 10             	add    $0x10,%esp
80106d27:	85 c0                	test   %eax,%eax
80106d29:	0f 88 fb 00 00 00    	js     80106e2a <sys_link+0x11a>
80106d2f:	8d 45 d0             	lea    -0x30(%ebp),%eax
80106d32:	83 ec 08             	sub    $0x8,%esp
80106d35:	50                   	push   %eax
80106d36:	6a 01                	push   $0x1
80106d38:	e8 b3 fa ff ff       	call   801067f0 <argstr>
80106d3d:	83 c4 10             	add    $0x10,%esp
80106d40:	85 c0                	test   %eax,%eax
80106d42:	0f 88 e2 00 00 00    	js     80106e2a <sys_link+0x11a>
80106d48:	e8 93 ca ff ff       	call   801037e0 <begin_op>
80106d4d:	83 ec 0c             	sub    $0xc,%esp
80106d50:	ff 75 d4             	pushl  -0x2c(%ebp)
80106d53:	e8 08 bb ff ff       	call   80102860 <namei>
80106d58:	83 c4 10             	add    $0x10,%esp
80106d5b:	85 c0                	test   %eax,%eax
80106d5d:	89 c3                	mov    %eax,%ebx
80106d5f:	0f 84 f3 00 00 00    	je     80106e58 <sys_link+0x148>
80106d65:	83 ec 0c             	sub    $0xc,%esp
80106d68:	50                   	push   %eax
80106d69:	e8 62 b1 ff ff       	call   80101ed0 <ilock>
80106d6e:	83 c4 10             	add    $0x10,%esp
80106d71:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80106d76:	0f 84 c4 00 00 00    	je     80106e40 <sys_link+0x130>
80106d7c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
80106d81:	83 ec 0c             	sub    $0xc,%esp
80106d84:	8d 7d da             	lea    -0x26(%ebp),%edi
80106d87:	53                   	push   %ebx
80106d88:	e8 83 b0 ff ff       	call   80101e10 <iupdate>
80106d8d:	89 1c 24             	mov    %ebx,(%esp)
80106d90:	e8 1b b2 ff ff       	call   80101fb0 <iunlock>
80106d95:	58                   	pop    %eax
80106d96:	5a                   	pop    %edx
80106d97:	57                   	push   %edi
80106d98:	ff 75 d0             	pushl  -0x30(%ebp)
80106d9b:	e8 00 bb ff ff       	call   801028a0 <nameiparent>
80106da0:	83 c4 10             	add    $0x10,%esp
80106da3:	85 c0                	test   %eax,%eax
80106da5:	89 c6                	mov    %eax,%esi
80106da7:	74 5b                	je     80106e04 <sys_link+0xf4>
80106da9:	83 ec 0c             	sub    $0xc,%esp
80106dac:	50                   	push   %eax
80106dad:	e8 1e b1 ff ff       	call   80101ed0 <ilock>
80106db2:	83 c4 10             	add    $0x10,%esp
80106db5:	8b 03                	mov    (%ebx),%eax
80106db7:	39 06                	cmp    %eax,(%esi)
80106db9:	75 3d                	jne    80106df8 <sys_link+0xe8>
80106dbb:	83 ec 04             	sub    $0x4,%esp
80106dbe:	ff 73 04             	pushl  0x4(%ebx)
80106dc1:	57                   	push   %edi
80106dc2:	56                   	push   %esi
80106dc3:	e8 a8 b9 ff ff       	call   80102770 <dirlink>
80106dc8:	83 c4 10             	add    $0x10,%esp
80106dcb:	85 c0                	test   %eax,%eax
80106dcd:	78 29                	js     80106df8 <sys_link+0xe8>
80106dcf:	83 ec 0c             	sub    $0xc,%esp
80106dd2:	56                   	push   %esi
80106dd3:	e8 98 b3 ff ff       	call   80102170 <iunlockput>
80106dd8:	89 1c 24             	mov    %ebx,(%esp)
80106ddb:	e8 20 b2 ff ff       	call   80102000 <iput>
80106de0:	e8 6b ca ff ff       	call   80103850 <end_op>
80106de5:	83 c4 10             	add    $0x10,%esp
80106de8:	31 c0                	xor    %eax,%eax
80106dea:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106ded:	5b                   	pop    %ebx
80106dee:	5e                   	pop    %esi
80106def:	5f                   	pop    %edi
80106df0:	5d                   	pop    %ebp
80106df1:	c3                   	ret    
80106df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106df8:	83 ec 0c             	sub    $0xc,%esp
80106dfb:	56                   	push   %esi
80106dfc:	e8 6f b3 ff ff       	call   80102170 <iunlockput>
80106e01:	83 c4 10             	add    $0x10,%esp
80106e04:	83 ec 0c             	sub    $0xc,%esp
80106e07:	53                   	push   %ebx
80106e08:	e8 c3 b0 ff ff       	call   80101ed0 <ilock>
80106e0d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
80106e12:	89 1c 24             	mov    %ebx,(%esp)
80106e15:	e8 f6 af ff ff       	call   80101e10 <iupdate>
80106e1a:	89 1c 24             	mov    %ebx,(%esp)
80106e1d:	e8 4e b3 ff ff       	call   80102170 <iunlockput>
80106e22:	e8 29 ca ff ff       	call   80103850 <end_op>
80106e27:	83 c4 10             	add    $0x10,%esp
80106e2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106e2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e32:	5b                   	pop    %ebx
80106e33:	5e                   	pop    %esi
80106e34:	5f                   	pop    %edi
80106e35:	5d                   	pop    %ebp
80106e36:	c3                   	ret    
80106e37:	89 f6                	mov    %esi,%esi
80106e39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80106e40:	83 ec 0c             	sub    $0xc,%esp
80106e43:	53                   	push   %ebx
80106e44:	e8 27 b3 ff ff       	call   80102170 <iunlockput>
80106e49:	e8 02 ca ff ff       	call   80103850 <end_op>
80106e4e:	83 c4 10             	add    $0x10,%esp
80106e51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e56:	eb 92                	jmp    80106dea <sys_link+0xda>
80106e58:	e8 f3 c9 ff ff       	call   80103850 <end_op>
80106e5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e62:	eb 86                	jmp    80106dea <sys_link+0xda>
80106e64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106e6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80106e70 <sys_unlink>:
80106e70:	55                   	push   %ebp
80106e71:	89 e5                	mov    %esp,%ebp
80106e73:	57                   	push   %edi
80106e74:	56                   	push   %esi
80106e75:	53                   	push   %ebx
80106e76:	8d 45 c0             	lea    -0x40(%ebp),%eax
80106e79:	83 ec 44             	sub    $0x44,%esp
80106e7c:	50                   	push   %eax
80106e7d:	6a 00                	push   $0x0
80106e7f:	e8 6c f9 ff ff       	call   801067f0 <argstr>
80106e84:	83 c4 10             	add    $0x10,%esp
80106e87:	85 c0                	test   %eax,%eax
80106e89:	0f 88 41 01 00 00    	js     80106fd0 <sys_unlink+0x160>
80106e8f:	e8 4c c9 ff ff       	call   801037e0 <begin_op>
80106e94:	83 ec 08             	sub    $0x8,%esp
80106e97:	68 4f f1 10 80       	push   $0x8010f14f
80106e9c:	ff 75 c0             	pushl  -0x40(%ebp)
80106e9f:	e8 dc 6d 00 00       	call   8010dc80 <cgroup_delete>
80106ea4:	83 c4 10             	add    $0x10,%esp
80106ea7:	83 f8 ff             	cmp    $0xffffffff,%eax
80106eaa:	74 1c                	je     80106ec8 <sys_unlink+0x58>
80106eac:	83 f8 fe             	cmp    $0xfffffffe,%eax
80106eaf:	0f 84 9b 01 00 00    	je     80107050 <sys_unlink+0x1e0>
80106eb5:	e8 96 c9 ff ff       	call   80103850 <end_op>
80106eba:	31 c0                	xor    %eax,%eax
80106ebc:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106ebf:	5b                   	pop    %ebx
80106ec0:	5e                   	pop    %esi
80106ec1:	5f                   	pop    %edi
80106ec2:	5d                   	pop    %ebp
80106ec3:	c3                   	ret    
80106ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80106ec8:	8d 5d ca             	lea    -0x36(%ebp),%ebx
80106ecb:	83 ec 08             	sub    $0x8,%esp
80106ece:	53                   	push   %ebx
80106ecf:	ff 75 c0             	pushl  -0x40(%ebp)
80106ed2:	e8 c9 b9 ff ff       	call   801028a0 <nameiparent>
80106ed7:	83 c4 10             	add    $0x10,%esp
80106eda:	85 c0                	test   %eax,%eax
80106edc:	89 c6                	mov    %eax,%esi
80106ede:	0f 84 6c 01 00 00    	je     80107050 <sys_unlink+0x1e0>
80106ee4:	83 ec 0c             	sub    $0xc,%esp
80106ee7:	50                   	push   %eax
80106ee8:	e8 e3 af ff ff       	call   80101ed0 <ilock>
80106eed:	58                   	pop    %eax
80106eee:	5a                   	pop    %edx
80106eef:	68 11 e9 10 80       	push   $0x8010e911
80106ef4:	53                   	push   %ebx
80106ef5:	e8 06 b5 ff ff       	call   80102400 <namecmp>
80106efa:	83 c4 10             	add    $0x10,%esp
80106efd:	85 c0                	test   %eax,%eax
80106eff:	0f 84 27 01 00 00    	je     8010702c <sys_unlink+0x1bc>
80106f05:	83 ec 08             	sub    $0x8,%esp
80106f08:	68 10 e9 10 80       	push   $0x8010e910
80106f0d:	53                   	push   %ebx
80106f0e:	e8 ed b4 ff ff       	call   80102400 <namecmp>
80106f13:	83 c4 10             	add    $0x10,%esp
80106f16:	85 c0                	test   %eax,%eax
80106f18:	0f 84 0e 01 00 00    	je     8010702c <sys_unlink+0x1bc>
80106f1e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
80106f21:	83 ec 04             	sub    $0x4,%esp
80106f24:	50                   	push   %eax
80106f25:	53                   	push   %ebx
80106f26:	56                   	push   %esi
80106f27:	e8 f4 b4 ff ff       	call   80102420 <dirlookup>
80106f2c:	83 c4 10             	add    $0x10,%esp
80106f2f:	85 c0                	test   %eax,%eax
80106f31:	89 c3                	mov    %eax,%ebx
80106f33:	0f 84 f3 00 00 00    	je     8010702c <sys_unlink+0x1bc>
80106f39:	83 ec 0c             	sub    $0xc,%esp
80106f3c:	50                   	push   %eax
80106f3d:	e8 8e af ff ff       	call   80101ed0 <ilock>
80106f42:	83 c4 10             	add    $0x10,%esp
80106f45:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
80106f4a:	0f 8e 33 01 00 00    	jle    80107083 <sys_unlink+0x213>
80106f50:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80106f55:	0f 84 85 00 00 00    	je     80106fe0 <sys_unlink+0x170>
80106f5b:	83 ec 0c             	sub    $0xc,%esp
80106f5e:	53                   	push   %ebx
80106f5f:	e8 cc a1 ff ff       	call   80101130 <doesbackdevice>
80106f64:	83 c4 10             	add    $0x10,%esp
80106f67:	83 f8 01             	cmp    $0x1,%eax
80106f6a:	0f 84 b0 00 00 00    	je     80107020 <sys_unlink+0x1b0>
80106f70:	8d 7d d8             	lea    -0x28(%ebp),%edi
80106f73:	83 ec 04             	sub    $0x4,%esp
80106f76:	6a 10                	push   $0x10
80106f78:	6a 00                	push   $0x0
80106f7a:	57                   	push   %edi
80106f7b:	e8 60 f4 ff ff       	call   801063e0 <memset>
80106f80:	6a 10                	push   $0x10
80106f82:	ff 75 c4             	pushl  -0x3c(%ebp)
80106f85:	57                   	push   %edi
80106f86:	56                   	push   %esi
80106f87:	e8 44 b3 ff ff       	call   801022d0 <writei>
80106f8c:	83 c4 20             	add    $0x20,%esp
80106f8f:	83 f8 10             	cmp    $0x10,%eax
80106f92:	0f 85 f8 00 00 00    	jne    80107090 <sys_unlink+0x220>
80106f98:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80106f9d:	0f 84 bd 00 00 00    	je     80107060 <sys_unlink+0x1f0>
80106fa3:	83 ec 0c             	sub    $0xc,%esp
80106fa6:	56                   	push   %esi
80106fa7:	e8 c4 b1 ff ff       	call   80102170 <iunlockput>
80106fac:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
80106fb1:	89 1c 24             	mov    %ebx,(%esp)
80106fb4:	e8 57 ae ff ff       	call   80101e10 <iupdate>
80106fb9:	89 1c 24             	mov    %ebx,(%esp)
80106fbc:	e8 af b1 ff ff       	call   80102170 <iunlockput>
80106fc1:	83 c4 10             	add    $0x10,%esp
80106fc4:	e9 ec fe ff ff       	jmp    80106eb5 <sys_unlink+0x45>
80106fc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106fd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106fd5:	e9 e2 fe ff ff       	jmp    80106ebc <sys_unlink+0x4c>
80106fda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80106fe0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
80106fe4:	0f 86 71 ff ff ff    	jbe    80106f5b <sys_unlink+0xeb>
80106fea:	bf 20 00 00 00       	mov    $0x20,%edi
80106fef:	eb 13                	jmp    80107004 <sys_unlink+0x194>
80106ff1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80106ff8:	83 c7 10             	add    $0x10,%edi
80106ffb:	3b 7b 58             	cmp    0x58(%ebx),%edi
80106ffe:	0f 83 57 ff ff ff    	jae    80106f5b <sys_unlink+0xeb>
80107004:	8d 45 d8             	lea    -0x28(%ebp),%eax
80107007:	6a 10                	push   $0x10
80107009:	57                   	push   %edi
8010700a:	50                   	push   %eax
8010700b:	53                   	push   %ebx
8010700c:	e8 af b1 ff ff       	call   801021c0 <readi>
80107011:	83 c4 10             	add    $0x10,%esp
80107014:	83 f8 10             	cmp    $0x10,%eax
80107017:	75 5d                	jne    80107076 <sys_unlink+0x206>
80107019:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
8010701e:	74 d8                	je     80106ff8 <sys_unlink+0x188>
80107020:	83 ec 0c             	sub    $0xc,%esp
80107023:	53                   	push   %ebx
80107024:	e8 47 b1 ff ff       	call   80102170 <iunlockput>
80107029:	83 c4 10             	add    $0x10,%esp
8010702c:	83 ec 0c             	sub    $0xc,%esp
8010702f:	56                   	push   %esi
80107030:	e8 3b b1 ff ff       	call   80102170 <iunlockput>
80107035:	e8 16 c8 ff ff       	call   80103850 <end_op>
8010703a:	83 c4 10             	add    $0x10,%esp
8010703d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107042:	e9 75 fe ff ff       	jmp    80106ebc <sys_unlink+0x4c>
80107047:	89 f6                	mov    %esi,%esi
80107049:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107050:	e8 fb c7 ff ff       	call   80103850 <end_op>
80107055:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010705a:	e9 5d fe ff ff       	jmp    80106ebc <sys_unlink+0x4c>
8010705f:	90                   	nop
80107060:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
80107065:	83 ec 0c             	sub    $0xc,%esp
80107068:	56                   	push   %esi
80107069:	e8 a2 ad ff ff       	call   80101e10 <iupdate>
8010706e:	83 c4 10             	add    $0x10,%esp
80107071:	e9 2d ff ff ff       	jmp    80106fa3 <sys_unlink+0x133>
80107076:	83 ec 0c             	sub    $0xc,%esp
80107079:	68 68 f1 10 80       	push   $0x8010f168
8010707e:	e8 4d 93 ff ff       	call   801003d0 <panic>
80107083:	83 ec 0c             	sub    $0xc,%esp
80107086:	68 56 f1 10 80       	push   $0x8010f156
8010708b:	e8 40 93 ff ff       	call   801003d0 <panic>
80107090:	83 ec 0c             	sub    $0xc,%esp
80107093:	68 7a f1 10 80       	push   $0x8010f17a
80107098:	e8 33 93 ff ff       	call   801003d0 <panic>
8010709d:	8d 76 00             	lea    0x0(%esi),%esi

801070a0 <sys_open>:
801070a0:	55                   	push   %ebp
801070a1:	89 e5                	mov    %esp,%ebp
801070a3:	57                   	push   %edi
801070a4:	56                   	push   %esi
801070a5:	53                   	push   %ebx
801070a6:	8d 45 dc             	lea    -0x24(%ebp),%eax
801070a9:	83 ec 24             	sub    $0x24,%esp
801070ac:	50                   	push   %eax
801070ad:	6a 00                	push   $0x0
801070af:	e8 3c f7 ff ff       	call   801067f0 <argstr>
801070b4:	83 c4 10             	add    $0x10,%esp
801070b7:	85 c0                	test   %eax,%eax
801070b9:	0f 88 bb 00 00 00    	js     8010717a <sys_open+0xda>
801070bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
801070c2:	83 ec 08             	sub    $0x8,%esp
801070c5:	50                   	push   %eax
801070c6:	6a 01                	push   $0x1
801070c8:	e8 73 f6 ff ff       	call   80106740 <argint>
801070cd:	83 c4 10             	add    $0x10,%esp
801070d0:	85 c0                	test   %eax,%eax
801070d2:	0f 88 a2 00 00 00    	js     8010717a <sys_open+0xda>
801070d8:	e8 03 c7 ff ff       	call   801037e0 <begin_op>
801070dd:	83 ec 08             	sub    $0x8,%esp
801070e0:	ff 75 e0             	pushl  -0x20(%ebp)
801070e3:	ff 75 dc             	pushl  -0x24(%ebp)
801070e6:	e8 95 65 00 00       	call   8010d680 <cg_sys_open>
801070eb:	83 c4 10             	add    $0x10,%esp
801070ee:	85 c0                	test   %eax,%eax
801070f0:	89 c3                	mov    %eax,%ebx
801070f2:	0f 89 28 01 00 00    	jns    80107220 <sys_open+0x180>
801070f8:	f6 45 e1 02          	testb  $0x2,-0x1f(%ebp)
801070fc:	0f 84 8e 00 00 00    	je     80107190 <sys_open+0xf0>
80107102:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80107105:	83 ec 08             	sub    $0x8,%esp
80107108:	31 c9                	xor    %ecx,%ecx
8010710a:	ba 02 00 00 00       	mov    $0x2,%edx
8010710f:	50                   	push   %eax
80107110:	8b 45 dc             	mov    -0x24(%ebp),%eax
80107113:	6a 00                	push   $0x0
80107115:	e8 86 f7 ff ff       	call   801068a0 <createmount>
8010711a:	83 c4 10             	add    $0x10,%esp
8010711d:	85 c0                	test   %eax,%eax
8010711f:	89 c6                	mov    %eax,%esi
80107121:	0f 84 08 01 00 00    	je     8010722f <sys_open+0x18f>
80107127:	e8 34 a4 ff ff       	call   80101560 <filealloc>
8010712c:	85 c0                	test   %eax,%eax
8010712e:	89 c7                	mov    %eax,%edi
80107130:	74 2e                	je     80107160 <sys_open+0xc0>
80107132:	31 db                	xor    %ebx,%ebx
80107134:	e8 2a e1 ff ff       	call   80105263 <myproc>
80107139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107140:	8b 54 98 48          	mov    0x48(%eax,%ebx,4),%edx
80107144:	85 d2                	test   %edx,%edx
80107146:	0f 84 84 00 00 00    	je     801071d0 <sys_open+0x130>
8010714c:	83 c3 01             	add    $0x1,%ebx
8010714f:	83 fb 10             	cmp    $0x10,%ebx
80107152:	75 ec                	jne    80107140 <sys_open+0xa0>
80107154:	83 ec 0c             	sub    $0xc,%esp
80107157:	57                   	push   %edi
80107158:	e8 c3 a4 ff ff       	call   80101620 <fileclose>
8010715d:	83 c4 10             	add    $0x10,%esp
80107160:	83 ec 0c             	sub    $0xc,%esp
80107163:	56                   	push   %esi
80107164:	e8 07 b0 ff ff       	call   80102170 <iunlockput>
80107169:	58                   	pop    %eax
8010716a:	ff 75 e4             	pushl  -0x1c(%ebp)
8010716d:	e8 69 cd ff ff       	call   80103edb <mntput>
80107172:	e8 d9 c6 ff ff       	call   80103850 <end_op>
80107177:	83 c4 10             	add    $0x10,%esp
8010717a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010717d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107182:	5b                   	pop    %ebx
80107183:	5e                   	pop    %esi
80107184:	5f                   	pop    %edi
80107185:	5d                   	pop    %ebp
80107186:	c3                   	ret    
80107187:	89 f6                	mov    %esi,%esi
80107189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107190:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80107193:	83 ec 08             	sub    $0x8,%esp
80107196:	50                   	push   %eax
80107197:	ff 75 dc             	pushl  -0x24(%ebp)
8010719a:	e8 61 b7 ff ff       	call   80102900 <nameimount>
8010719f:	83 c4 10             	add    $0x10,%esp
801071a2:	85 c0                	test   %eax,%eax
801071a4:	89 c6                	mov    %eax,%esi
801071a6:	0f 84 83 00 00 00    	je     8010722f <sys_open+0x18f>
801071ac:	83 ec 0c             	sub    $0xc,%esp
801071af:	50                   	push   %eax
801071b0:	e8 1b ad ff ff       	call   80101ed0 <ilock>
801071b5:	83 c4 10             	add    $0x10,%esp
801071b8:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
801071bd:	0f 85 64 ff ff ff    	jne    80107127 <sys_open+0x87>
801071c3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
801071c6:	85 c9                	test   %ecx,%ecx
801071c8:	0f 84 59 ff ff ff    	je     80107127 <sys_open+0x87>
801071ce:	eb 90                	jmp    80107160 <sys_open+0xc0>
801071d0:	83 ec 0c             	sub    $0xc,%esp
801071d3:	89 7c 98 48          	mov    %edi,0x48(%eax,%ebx,4)
801071d7:	56                   	push   %esi
801071d8:	e8 d3 ad ff ff       	call   80101fb0 <iunlock>
801071dd:	e8 6e c6 ff ff       	call   80103850 <end_op>
801071e2:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
801071e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801071eb:	83 c4 10             	add    $0x10,%esp
801071ee:	8b 55 e0             	mov    -0x20(%ebp),%edx
801071f1:	89 77 10             	mov    %esi,0x10(%edi)
801071f4:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
801071fb:	89 47 14             	mov    %eax,0x14(%edi)
801071fe:	89 d0                	mov    %edx,%eax
80107200:	83 e0 01             	and    $0x1,%eax
80107203:	83 f0 01             	xor    $0x1,%eax
80107206:	83 e2 03             	and    $0x3,%edx
80107209:	88 47 08             	mov    %al,0x8(%edi)
8010720c:	0f 95 47 09          	setne  0x9(%edi)
80107210:	89 d8                	mov    %ebx,%eax
80107212:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107215:	5b                   	pop    %ebx
80107216:	5e                   	pop    %esi
80107217:	5f                   	pop    %edi
80107218:	5d                   	pop    %ebp
80107219:	c3                   	ret    
8010721a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107220:	e8 2b c6 ff ff       	call   80103850 <end_op>
80107225:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107228:	89 d8                	mov    %ebx,%eax
8010722a:	5b                   	pop    %ebx
8010722b:	5e                   	pop    %esi
8010722c:	5f                   	pop    %edi
8010722d:	5d                   	pop    %ebp
8010722e:	c3                   	ret    
8010722f:	e8 1c c6 ff ff       	call   80103850 <end_op>
80107234:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107239:	eb d7                	jmp    80107212 <sys_open+0x172>
8010723b:	90                   	nop
8010723c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107240 <sys_mkdir>:
80107240:	55                   	push   %ebp
80107241:	89 e5                	mov    %esp,%ebp
80107243:	53                   	push   %ebx
80107244:	83 ec 14             	sub    $0x14,%esp
80107247:	e8 94 c5 ff ff       	call   801037e0 <begin_op>
8010724c:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010724f:	83 ec 08             	sub    $0x8,%esp
80107252:	50                   	push   %eax
80107253:	6a 00                	push   $0x0
80107255:	e8 96 f5 ff ff       	call   801067f0 <argstr>
8010725a:	83 c4 10             	add    $0x10,%esp
8010725d:	85 c0                	test   %eax,%eax
8010725f:	0f 88 9b 00 00 00    	js     80107300 <sys_mkdir+0xc0>
80107265:	83 ec 0c             	sub    $0xc,%esp
80107268:	ff 75 f0             	pushl  -0x10(%ebp)
8010726b:	e8 a0 61 00 00       	call   8010d410 <get_cgroup_by_path>
80107270:	83 c4 10             	add    $0x10,%esp
80107273:	85 c0                	test   %eax,%eax
80107275:	75 21                	jne    80107298 <sys_mkdir+0x58>
80107277:	83 ec 0c             	sub    $0xc,%esp
8010727a:	ff 75 f0             	pushl  -0x10(%ebp)
8010727d:	e8 6e 6d 00 00       	call   8010dff0 <cgroup_create>
80107282:	83 c4 10             	add    $0x10,%esp
80107285:	85 c0                	test   %eax,%eax
80107287:	74 37                	je     801072c0 <sys_mkdir+0x80>
80107289:	e8 c2 c5 ff ff       	call   80103850 <end_op>
8010728e:	31 c0                	xor    %eax,%eax
80107290:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107293:	c9                   	leave  
80107294:	c3                   	ret    
80107295:	8d 76 00             	lea    0x0(%esi),%esi
80107298:	83 ec 0c             	sub    $0xc,%esp
8010729b:	68 89 f1 10 80       	push   $0x8010f189
801072a0:	e8 bb 93 ff ff       	call   80100660 <cprintf>
801072a5:	e8 a6 c5 ff ff       	call   80103850 <end_op>
801072aa:	83 c4 10             	add    $0x10,%esp
801072ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801072b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801072b5:	c9                   	leave  
801072b6:	c3                   	ret    
801072b7:	89 f6                	mov    %esi,%esi
801072b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801072c0:	8d 45 f4             	lea    -0xc(%ebp),%eax
801072c3:	83 ec 08             	sub    $0x8,%esp
801072c6:	31 c9                	xor    %ecx,%ecx
801072c8:	ba 01 00 00 00       	mov    $0x1,%edx
801072cd:	50                   	push   %eax
801072ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
801072d1:	6a 00                	push   $0x0
801072d3:	e8 c8 f5 ff ff       	call   801068a0 <createmount>
801072d8:	83 c4 10             	add    $0x10,%esp
801072db:	85 c0                	test   %eax,%eax
801072dd:	89 c3                	mov    %eax,%ebx
801072df:	74 1f                	je     80107300 <sys_mkdir+0xc0>
801072e1:	83 ec 0c             	sub    $0xc,%esp
801072e4:	ff 75 f4             	pushl  -0xc(%ebp)
801072e7:	e8 ef cb ff ff       	call   80103edb <mntput>
801072ec:	89 1c 24             	mov    %ebx,(%esp)
801072ef:	e8 7c ae ff ff       	call   80102170 <iunlockput>
801072f4:	83 c4 10             	add    $0x10,%esp
801072f7:	eb 90                	jmp    80107289 <sys_mkdir+0x49>
801072f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107300:	e8 4b c5 ff ff       	call   80103850 <end_op>
80107305:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010730a:	eb 84                	jmp    80107290 <sys_mkdir+0x50>
8010730c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107310 <sys_mknod>:
80107310:	55                   	push   %ebp
80107311:	89 e5                	mov    %esp,%ebp
80107313:	53                   	push   %ebx
80107314:	83 ec 14             	sub    $0x14,%esp
80107317:	e8 c4 c4 ff ff       	call   801037e0 <begin_op>
8010731c:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010731f:	83 ec 08             	sub    $0x8,%esp
80107322:	50                   	push   %eax
80107323:	6a 00                	push   $0x0
80107325:	e8 c6 f4 ff ff       	call   801067f0 <argstr>
8010732a:	83 c4 10             	add    $0x10,%esp
8010732d:	85 c0                	test   %eax,%eax
8010732f:	78 77                	js     801073a8 <sys_mknod+0x98>
80107331:	8d 45 ec             	lea    -0x14(%ebp),%eax
80107334:	83 ec 08             	sub    $0x8,%esp
80107337:	50                   	push   %eax
80107338:	6a 01                	push   $0x1
8010733a:	e8 01 f4 ff ff       	call   80106740 <argint>
8010733f:	83 c4 10             	add    $0x10,%esp
80107342:	85 c0                	test   %eax,%eax
80107344:	78 62                	js     801073a8 <sys_mknod+0x98>
80107346:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107349:	83 ec 08             	sub    $0x8,%esp
8010734c:	50                   	push   %eax
8010734d:	6a 02                	push   $0x2
8010734f:	e8 ec f3 ff ff       	call   80106740 <argint>
80107354:	83 c4 10             	add    $0x10,%esp
80107357:	85 c0                	test   %eax,%eax
80107359:	78 4d                	js     801073a8 <sys_mknod+0x98>
8010735b:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010735e:	83 ec 08             	sub    $0x8,%esp
80107361:	0f bf 4d ec          	movswl -0x14(%ebp),%ecx
80107365:	ba 03 00 00 00       	mov    $0x3,%edx
8010736a:	50                   	push   %eax
8010736b:	0f bf 45 f0          	movswl -0x10(%ebp),%eax
8010736f:	50                   	push   %eax
80107370:	8b 45 e8             	mov    -0x18(%ebp),%eax
80107373:	e8 28 f5 ff ff       	call   801068a0 <createmount>
80107378:	83 c4 10             	add    $0x10,%esp
8010737b:	85 c0                	test   %eax,%eax
8010737d:	89 c3                	mov    %eax,%ebx
8010737f:	74 27                	je     801073a8 <sys_mknod+0x98>
80107381:	83 ec 0c             	sub    $0xc,%esp
80107384:	ff 75 f4             	pushl  -0xc(%ebp)
80107387:	e8 4f cb ff ff       	call   80103edb <mntput>
8010738c:	89 1c 24             	mov    %ebx,(%esp)
8010738f:	e8 dc ad ff ff       	call   80102170 <iunlockput>
80107394:	e8 b7 c4 ff ff       	call   80103850 <end_op>
80107399:	83 c4 10             	add    $0x10,%esp
8010739c:	31 c0                	xor    %eax,%eax
8010739e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801073a1:	c9                   	leave  
801073a2:	c3                   	ret    
801073a3:	90                   	nop
801073a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801073a8:	e8 a3 c4 ff ff       	call   80103850 <end_op>
801073ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801073b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801073b5:	c9                   	leave  
801073b6:	c3                   	ret    
801073b7:	89 f6                	mov    %esi,%esi
801073b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801073c0 <sys_chdir>:
801073c0:	55                   	push   %ebp
801073c1:	89 e5                	mov    %esp,%ebp
801073c3:	56                   	push   %esi
801073c4:	53                   	push   %ebx
801073c5:	83 ec 10             	sub    $0x10,%esp
801073c8:	e8 96 de ff ff       	call   80105263 <myproc>
801073cd:	89 c3                	mov    %eax,%ebx
801073cf:	e8 0c c4 ff ff       	call   801037e0 <begin_op>
801073d4:	8d 45 f0             	lea    -0x10(%ebp),%eax
801073d7:	83 ec 08             	sub    $0x8,%esp
801073da:	50                   	push   %eax
801073db:	6a 00                	push   $0x0
801073dd:	e8 0e f4 ff ff       	call   801067f0 <argstr>
801073e2:	83 c4 10             	add    $0x10,%esp
801073e5:	85 c0                	test   %eax,%eax
801073e7:	0f 88 03 01 00 00    	js     801074f0 <sys_chdir+0x130>
801073ed:	83 ec 0c             	sub    $0xc,%esp
801073f0:	ff 75 f0             	pushl  -0x10(%ebp)
801073f3:	e8 18 60 00 00       	call   8010d410 <get_cgroup_by_path>
801073f8:	83 c4 10             	add    $0x10,%esp
801073fb:	85 c0                	test   %eax,%eax
801073fd:	89 c6                	mov    %eax,%esi
801073ff:	74 2f                	je     80107430 <sys_chdir+0x70>
80107401:	e8 4a c4 ff ff       	call   80103850 <end_op>
80107406:	81 c3 ac 00 00 00    	add    $0xac,%ebx
8010740c:	83 ec 04             	sub    $0x4,%esp
8010740f:	68 00 02 00 00       	push   $0x200
80107414:	56                   	push   %esi
80107415:	53                   	push   %ebx
80107416:	e8 15 f2 ff ff       	call   80106630 <safestrcpy>
8010741b:	83 c4 10             	add    $0x10,%esp
8010741e:	31 c0                	xor    %eax,%eax
80107420:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107423:	5b                   	pop    %ebx
80107424:	5e                   	pop    %esi
80107425:	5d                   	pop    %ebp
80107426:	c3                   	ret    
80107427:	89 f6                	mov    %esi,%esi
80107429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107430:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107433:	83 ec 08             	sub    $0x8,%esp
80107436:	50                   	push   %eax
80107437:	ff 75 f0             	pushl  -0x10(%ebp)
8010743a:	e8 c1 b4 ff ff       	call   80102900 <nameimount>
8010743f:	83 c4 10             	add    $0x10,%esp
80107442:	85 c0                	test   %eax,%eax
80107444:	89 c6                	mov    %eax,%esi
80107446:	0f 84 a4 00 00 00    	je     801074f0 <sys_chdir+0x130>
8010744c:	83 ec 0c             	sub    $0xc,%esp
8010744f:	50                   	push   %eax
80107450:	e8 7b aa ff ff       	call   80101ed0 <ilock>
80107455:	83 c4 10             	add    $0x10,%esp
80107458:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
8010745d:	75 71                	jne    801074d0 <sys_chdir+0x110>
8010745f:	83 ec 0c             	sub    $0xc,%esp
80107462:	56                   	push   %esi
80107463:	e8 48 ab ff ff       	call   80101fb0 <iunlock>
80107468:	8b 83 88 00 00 00    	mov    0x88(%ebx),%eax
8010746e:	83 c4 10             	add    $0x10,%esp
80107471:	85 c0                	test   %eax,%eax
80107473:	74 0c                	je     80107481 <sys_chdir+0xc1>
80107475:	83 ec 0c             	sub    $0xc,%esp
80107478:	50                   	push   %eax
80107479:	e8 82 ab ff ff       	call   80102000 <iput>
8010747e:	83 c4 10             	add    $0x10,%esp
80107481:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
80107487:	85 c0                	test   %eax,%eax
80107489:	74 0c                	je     80107497 <sys_chdir+0xd7>
8010748b:	83 ec 0c             	sub    $0xc,%esp
8010748e:	50                   	push   %eax
8010748f:	e8 47 ca ff ff       	call   80103edb <mntput>
80107494:	83 c4 10             	add    $0x10,%esp
80107497:	e8 b4 c3 ff ff       	call   80103850 <end_op>
8010749c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010749f:	89 b3 88 00 00 00    	mov    %esi,0x88(%ebx)
801074a5:	83 ec 08             	sub    $0x8,%esp
801074a8:	81 c3 ac 00 00 00    	add    $0xac,%ebx
801074ae:	89 43 e0             	mov    %eax,-0x20(%ebx)
801074b1:	ff 75 f0             	pushl  -0x10(%ebp)
801074b4:	53                   	push   %ebx
801074b5:	e8 06 58 00 00       	call   8010ccc0 <format_path>
801074ba:	83 c4 10             	add    $0x10,%esp
801074bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
801074c0:	31 c0                	xor    %eax,%eax
801074c2:	5b                   	pop    %ebx
801074c3:	5e                   	pop    %esi
801074c4:	5d                   	pop    %ebp
801074c5:	c3                   	ret    
801074c6:	8d 76 00             	lea    0x0(%esi),%esi
801074c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801074d0:	83 ec 0c             	sub    $0xc,%esp
801074d3:	56                   	push   %esi
801074d4:	e8 97 ac ff ff       	call   80102170 <iunlockput>
801074d9:	e8 72 c3 ff ff       	call   80103850 <end_op>
801074de:	83 c4 10             	add    $0x10,%esp
801074e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801074e6:	e9 35 ff ff ff       	jmp    80107420 <sys_chdir+0x60>
801074eb:	90                   	nop
801074ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801074f0:	e8 5b c3 ff ff       	call   80103850 <end_op>
801074f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801074fa:	e9 21 ff ff ff       	jmp    80107420 <sys_chdir+0x60>
801074ff:	90                   	nop

80107500 <sys_exec>:
80107500:	55                   	push   %ebp
80107501:	89 e5                	mov    %esp,%ebp
80107503:	57                   	push   %edi
80107504:	56                   	push   %esi
80107505:	53                   	push   %ebx
80107506:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
8010750c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
80107512:	50                   	push   %eax
80107513:	6a 00                	push   $0x0
80107515:	e8 d6 f2 ff ff       	call   801067f0 <argstr>
8010751a:	83 c4 10             	add    $0x10,%esp
8010751d:	85 c0                	test   %eax,%eax
8010751f:	78 7f                	js     801075a0 <sys_exec+0xa0>
80107521:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
80107527:	83 ec 08             	sub    $0x8,%esp
8010752a:	50                   	push   %eax
8010752b:	6a 01                	push   $0x1
8010752d:	e8 0e f2 ff ff       	call   80106740 <argint>
80107532:	83 c4 10             	add    $0x10,%esp
80107535:	85 c0                	test   %eax,%eax
80107537:	78 67                	js     801075a0 <sys_exec+0xa0>
80107539:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
8010753f:	83 ec 04             	sub    $0x4,%esp
80107542:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
80107548:	68 80 00 00 00       	push   $0x80
8010754d:	6a 00                	push   $0x0
8010754f:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
80107555:	50                   	push   %eax
80107556:	31 db                	xor    %ebx,%ebx
80107558:	e8 83 ee ff ff       	call   801063e0 <memset>
8010755d:	83 c4 10             	add    $0x10,%esp
80107560:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
80107566:	83 ec 08             	sub    $0x8,%esp
80107569:	57                   	push   %edi
8010756a:	8d 04 98             	lea    (%eax,%ebx,4),%eax
8010756d:	50                   	push   %eax
8010756e:	e8 2d f1 ff ff       	call   801066a0 <fetchint>
80107573:	83 c4 10             	add    $0x10,%esp
80107576:	85 c0                	test   %eax,%eax
80107578:	78 26                	js     801075a0 <sys_exec+0xa0>
8010757a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
80107580:	85 c0                	test   %eax,%eax
80107582:	74 2c                	je     801075b0 <sys_exec+0xb0>
80107584:	83 ec 08             	sub    $0x8,%esp
80107587:	56                   	push   %esi
80107588:	50                   	push   %eax
80107589:	e8 52 f1 ff ff       	call   801066e0 <fetchstr>
8010758e:	83 c4 10             	add    $0x10,%esp
80107591:	85 c0                	test   %eax,%eax
80107593:	78 0b                	js     801075a0 <sys_exec+0xa0>
80107595:	83 c3 01             	add    $0x1,%ebx
80107598:	83 c6 04             	add    $0x4,%esi
8010759b:	83 fb 20             	cmp    $0x20,%ebx
8010759e:	75 c0                	jne    80107560 <sys_exec+0x60>
801075a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801075a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801075a8:	5b                   	pop    %ebx
801075a9:	5e                   	pop    %esi
801075aa:	5f                   	pop    %edi
801075ab:	5d                   	pop    %ebp
801075ac:	c3                   	ret    
801075ad:	8d 76 00             	lea    0x0(%esi),%esi
801075b0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
801075b6:	83 ec 08             	sub    $0x8,%esp
801075b9:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
801075c0:	00 00 00 00 
801075c4:	50                   	push   %eax
801075c5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
801075cb:	e8 d0 9b ff ff       	call   801011a0 <exec>
801075d0:	83 c4 10             	add    $0x10,%esp
801075d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
801075d6:	5b                   	pop    %ebx
801075d7:	5e                   	pop    %esi
801075d8:	5f                   	pop    %edi
801075d9:	5d                   	pop    %ebp
801075da:	c3                   	ret    
801075db:	90                   	nop
801075dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801075e0 <sys_pipe>:
801075e0:	55                   	push   %ebp
801075e1:	89 e5                	mov    %esp,%ebp
801075e3:	57                   	push   %edi
801075e4:	56                   	push   %esi
801075e5:	53                   	push   %ebx
801075e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
801075e9:	83 ec 20             	sub    $0x20,%esp
801075ec:	6a 08                	push   $0x8
801075ee:	50                   	push   %eax
801075ef:	6a 00                	push   $0x0
801075f1:	e8 9a f1 ff ff       	call   80106790 <argptr>
801075f6:	83 c4 10             	add    $0x10,%esp
801075f9:	85 c0                	test   %eax,%eax
801075fb:	78 4a                	js     80107647 <sys_pipe+0x67>
801075fd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80107600:	83 ec 08             	sub    $0x8,%esp
80107603:	50                   	push   %eax
80107604:	8d 45 e0             	lea    -0x20(%ebp),%eax
80107607:	50                   	push   %eax
80107608:	e8 83 d6 ff ff       	call   80104c90 <pipealloc>
8010760d:	83 c4 10             	add    $0x10,%esp
80107610:	85 c0                	test   %eax,%eax
80107612:	78 33                	js     80107647 <sys_pipe+0x67>
80107614:	31 db                	xor    %ebx,%ebx
80107616:	8b 7d e0             	mov    -0x20(%ebp),%edi
80107619:	e8 45 dc ff ff       	call   80105263 <myproc>
8010761e:	66 90                	xchg   %ax,%ax
80107620:	8b 74 98 48          	mov    0x48(%eax,%ebx,4),%esi
80107624:	85 f6                	test   %esi,%esi
80107626:	74 30                	je     80107658 <sys_pipe+0x78>
80107628:	83 c3 01             	add    $0x1,%ebx
8010762b:	83 fb 10             	cmp    $0x10,%ebx
8010762e:	75 f0                	jne    80107620 <sys_pipe+0x40>
80107630:	83 ec 0c             	sub    $0xc,%esp
80107633:	ff 75 e0             	pushl  -0x20(%ebp)
80107636:	e8 e5 9f ff ff       	call   80101620 <fileclose>
8010763b:	58                   	pop    %eax
8010763c:	ff 75 e4             	pushl  -0x1c(%ebp)
8010763f:	e8 dc 9f ff ff       	call   80101620 <fileclose>
80107644:	83 c4 10             	add    $0x10,%esp
80107647:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010764a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010764f:	5b                   	pop    %ebx
80107650:	5e                   	pop    %esi
80107651:	5f                   	pop    %edi
80107652:	5d                   	pop    %ebp
80107653:	c3                   	ret    
80107654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107658:	8d 73 10             	lea    0x10(%ebx),%esi
8010765b:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
8010765f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80107662:	e8 fc db ff ff       	call   80105263 <myproc>
80107667:	31 d2                	xor    %edx,%edx
80107669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107670:	8b 4c 90 48          	mov    0x48(%eax,%edx,4),%ecx
80107674:	85 c9                	test   %ecx,%ecx
80107676:	74 18                	je     80107690 <sys_pipe+0xb0>
80107678:	83 c2 01             	add    $0x1,%edx
8010767b:	83 fa 10             	cmp    $0x10,%edx
8010767e:	75 f0                	jne    80107670 <sys_pipe+0x90>
80107680:	e8 de db ff ff       	call   80105263 <myproc>
80107685:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
8010768c:	00 
8010768d:	eb a1                	jmp    80107630 <sys_pipe+0x50>
8010768f:	90                   	nop
80107690:	89 7c 90 48          	mov    %edi,0x48(%eax,%edx,4)
80107694:	8b 45 dc             	mov    -0x24(%ebp),%eax
80107697:	89 18                	mov    %ebx,(%eax)
80107699:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010769c:	89 50 04             	mov    %edx,0x4(%eax)
8010769f:	8d 65 f4             	lea    -0xc(%ebp),%esp
801076a2:	31 c0                	xor    %eax,%eax
801076a4:	5b                   	pop    %ebx
801076a5:	5e                   	pop    %esi
801076a6:	5f                   	pop    %edi
801076a7:	5d                   	pop    %ebp
801076a8:	c3                   	ret    
801076a9:	66 90                	xchg   %ax,%ax
801076ab:	66 90                	xchg   %ax,%ax
801076ad:	66 90                	xchg   %ax,%ax
801076af:	90                   	nop

801076b0 <sys_mount>:
801076b0:	55                   	push   %ebp
801076b1:	89 e5                	mov    %esp,%ebp
801076b3:	57                   	push   %edi
801076b4:	56                   	push   %esi
801076b5:	53                   	push   %ebx
801076b6:	8d 45 d8             	lea    -0x28(%ebp),%eax
801076b9:	83 ec 24             	sub    $0x24,%esp
801076bc:	50                   	push   %eax
801076bd:	6a 02                	push   $0x2
801076bf:	e8 2c f1 ff ff       	call   801067f0 <argstr>
801076c4:	83 c4 10             	add    $0x10,%esp
801076c7:	85 c0                	test   %eax,%eax
801076c9:	0f 88 89 01 00 00    	js     80107858 <sys_mount+0x1a8>
801076cf:	83 ec 08             	sub    $0x8,%esp
801076d2:	68 a9 f1 10 80       	push   $0x8010f1a9
801076d7:	ff 75 d8             	pushl  -0x28(%ebp)
801076da:	e8 a1 ee ff ff       	call   80106580 <strcmp>
801076df:	83 c4 10             	add    $0x10,%esp
801076e2:	85 c0                	test   %eax,%eax
801076e4:	89 c3                	mov    %eax,%ebx
801076e6:	0f 84 e4 00 00 00    	je     801077d0 <sys_mount+0x120>
801076ec:	8d 45 dc             	lea    -0x24(%ebp),%eax
801076ef:	83 ec 08             	sub    $0x8,%esp
801076f2:	50                   	push   %eax
801076f3:	6a 00                	push   $0x0
801076f5:	e8 f6 f0 ff ff       	call   801067f0 <argstr>
801076fa:	83 c4 10             	add    $0x10,%esp
801076fd:	85 c0                	test   %eax,%eax
801076ff:	0f 88 53 01 00 00    	js     80107858 <sys_mount+0x1a8>
80107705:	8d 45 e0             	lea    -0x20(%ebp),%eax
80107708:	83 ec 08             	sub    $0x8,%esp
8010770b:	50                   	push   %eax
8010770c:	6a 01                	push   $0x1
8010770e:	e8 dd f0 ff ff       	call   801067f0 <argstr>
80107713:	83 c4 10             	add    $0x10,%esp
80107716:	85 c0                	test   %eax,%eax
80107718:	0f 88 3a 01 00 00    	js     80107858 <sys_mount+0x1a8>
8010771e:	e8 bd c0 ff ff       	call   801037e0 <begin_op>
80107723:	83 ec 0c             	sub    $0xc,%esp
80107726:	ff 75 dc             	pushl  -0x24(%ebp)
80107729:	e8 32 b1 ff ff       	call   80102860 <namei>
8010772e:	83 c4 10             	add    $0x10,%esp
80107731:	85 c0                	test   %eax,%eax
80107733:	89 c7                	mov    %eax,%edi
80107735:	0f 84 bf 01 00 00    	je     801078fa <sys_mount+0x24a>
8010773b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010773e:	83 ec 08             	sub    $0x8,%esp
80107741:	50                   	push   %eax
80107742:	ff 75 e0             	pushl  -0x20(%ebp)
80107745:	e8 b6 b1 ff ff       	call   80102900 <nameimount>
8010774a:	83 c4 10             	add    $0x10,%esp
8010774d:	85 c0                	test   %eax,%eax
8010774f:	89 c6                	mov    %eax,%esi
80107751:	0f 84 e1 01 00 00    	je     80107938 <sys_mount+0x288>
80107757:	83 78 04 01          	cmpl   $0x1,0x4(%eax)
8010775b:	0f 84 86 01 00 00    	je     801078e7 <sys_mount+0x237>
80107761:	83 ec 0c             	sub    $0xc,%esp
80107764:	57                   	push   %edi
80107765:	e8 66 a7 ff ff       	call   80101ed0 <ilock>
8010776a:	89 34 24             	mov    %esi,(%esp)
8010776d:	e8 5e a7 ff ff       	call   80101ed0 <ilock>
80107772:	83 c4 10             	add    $0x10,%esp
80107775:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
8010777a:	0f 85 18 01 00 00    	jne    80107898 <sys_mount+0x1e8>
80107780:	83 ec 04             	sub    $0x4,%esp
80107783:	ff 75 e4             	pushl  -0x1c(%ebp)
80107786:	57                   	push   %edi
80107787:	56                   	push   %esi
80107788:	e8 7f c7 ff ff       	call   80103f0c <mount>
8010778d:	89 c3                	mov    %eax,%ebx
8010778f:	89 34 24             	mov    %esi,(%esp)
80107792:	e8 19 a8 ff ff       	call   80101fb0 <iunlock>
80107797:	83 c4 10             	add    $0x10,%esp
8010779a:	85 db                	test   %ebx,%ebx
8010779c:	0f 85 de 00 00 00    	jne    80107880 <sys_mount+0x1d0>
801077a2:	83 ec 0c             	sub    $0xc,%esp
801077a5:	57                   	push   %edi
801077a6:	e8 c5 a9 ff ff       	call   80102170 <iunlockput>
801077ab:	58                   	pop    %eax
801077ac:	ff 75 e4             	pushl  -0x1c(%ebp)
801077af:	e8 27 c7 ff ff       	call   80103edb <mntput>
801077b4:	e8 97 c0 ff ff       	call   80103850 <end_op>
801077b9:	83 c4 10             	add    $0x10,%esp
801077bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
801077bf:	89 d8                	mov    %ebx,%eax
801077c1:	5b                   	pop    %ebx
801077c2:	5e                   	pop    %esi
801077c3:	5f                   	pop    %edi
801077c4:	5d                   	pop    %ebp
801077c5:	c3                   	ret    
801077c6:	8d 76 00             	lea    0x0(%esi),%esi
801077c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801077d0:	8d 45 dc             	lea    -0x24(%ebp),%eax
801077d3:	83 ec 08             	sub    $0x8,%esp
801077d6:	50                   	push   %eax
801077d7:	6a 00                	push   $0x0
801077d9:	e8 12 f0 ff ff       	call   801067f0 <argstr>
801077de:	83 c4 10             	add    $0x10,%esp
801077e1:	85 c0                	test   %eax,%eax
801077e3:	78 73                	js     80107858 <sys_mount+0x1a8>
801077e5:	8d 45 e0             	lea    -0x20(%ebp),%eax
801077e8:	83 ec 08             	sub    $0x8,%esp
801077eb:	50                   	push   %eax
801077ec:	6a 01                	push   $0x1
801077ee:	e8 fd ef ff ff       	call   801067f0 <argstr>
801077f3:	83 c4 10             	add    $0x10,%esp
801077f6:	85 c0                	test   %eax,%eax
801077f8:	78 5e                	js     80107858 <sys_mount+0x1a8>
801077fa:	8b 4d dc             	mov    -0x24(%ebp),%ecx
801077fd:	85 c9                	test   %ecx,%ecx
801077ff:	75 57                	jne    80107858 <sys_mount+0x1a8>
80107801:	e8 da bf ff ff       	call   801037e0 <begin_op>
80107806:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80107809:	83 ec 08             	sub    $0x8,%esp
8010780c:	50                   	push   %eax
8010780d:	ff 75 e0             	pushl  -0x20(%ebp)
80107810:	e8 eb b0 ff ff       	call   80102900 <nameimount>
80107815:	83 c4 10             	add    $0x10,%esp
80107818:	85 c0                	test   %eax,%eax
8010781a:	0f 84 f9 00 00 00    	je     80107919 <sys_mount+0x269>
80107820:	e8 cb 56 00 00       	call   8010cef0 <cgroup_root>
80107825:	80 38 00             	cmpb   $0x0,(%eax)
80107828:	0f 85 9a 00 00 00    	jne    801078c8 <sys_mount+0x218>
8010782e:	8b 75 e0             	mov    -0x20(%ebp),%esi
80107831:	e8 ba 56 00 00       	call   8010cef0 <cgroup_root>
80107836:	83 ec 08             	sub    $0x8,%esp
80107839:	56                   	push   %esi
8010783a:	50                   	push   %eax
8010783b:	e8 90 5b 00 00       	call   8010d3d0 <set_cgroup_dir_path>
80107840:	e8 0b c0 ff ff       	call   80103850 <end_op>
80107845:	83 c4 10             	add    $0x10,%esp
80107848:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010784b:	89 d8                	mov    %ebx,%eax
8010784d:	5b                   	pop    %ebx
8010784e:	5e                   	pop    %esi
8010784f:	5f                   	pop    %edi
80107850:	5d                   	pop    %ebp
80107851:	c3                   	ret    
80107852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107858:	83 ec 0c             	sub    $0xc,%esp
8010785b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80107860:	68 a0 f1 10 80       	push   $0x8010f1a0
80107865:	e8 f6 8d ff ff       	call   80100660 <cprintf>
8010786a:	83 c4 10             	add    $0x10,%esp
8010786d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107870:	89 d8                	mov    %ebx,%eax
80107872:	5b                   	pop    %ebx
80107873:	5e                   	pop    %esi
80107874:	5f                   	pop    %edi
80107875:	5d                   	pop    %ebp
80107876:	c3                   	ret    
80107877:	89 f6                	mov    %esi,%esi
80107879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107880:	83 ec 0c             	sub    $0xc,%esp
80107883:	56                   	push   %esi
80107884:	e8 77 a7 ff ff       	call   80102000 <iput>
80107889:	83 c4 10             	add    $0x10,%esp
8010788c:	e9 11 ff ff ff       	jmp    801077a2 <sys_mount+0xf2>
80107891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107898:	83 ec 0c             	sub    $0xc,%esp
8010789b:	57                   	push   %edi
8010789c:	e8 cf a8 ff ff       	call   80102170 <iunlockput>
801078a1:	89 34 24             	mov    %esi,(%esp)
801078a4:	e8 c7 a8 ff ff       	call   80102170 <iunlockput>
801078a9:	5a                   	pop    %edx
801078aa:	ff 75 e4             	pushl  -0x1c(%ebp)
801078ad:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
801078b2:	e8 24 c6 ff ff       	call   80103edb <mntput>
801078b7:	e8 94 bf ff ff       	call   80103850 <end_op>
801078bc:	83 c4 10             	add    $0x10,%esp
801078bf:	e9 f8 fe ff ff       	jmp    801077bc <sys_mount+0x10c>
801078c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801078c8:	83 ec 0c             	sub    $0xc,%esp
801078cb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
801078d0:	68 f0 f1 10 80       	push   $0x8010f1f0
801078d5:	e8 86 8d ff ff       	call   80100660 <cprintf>
801078da:	e8 71 bf ff ff       	call   80103850 <end_op>
801078df:	83 c4 10             	add    $0x10,%esp
801078e2:	e9 d5 fe ff ff       	jmp    801077bc <sys_mount+0x10c>
801078e7:	83 ec 0c             	sub    $0xc,%esp
801078ea:	57                   	push   %edi
801078eb:	e8 10 a7 ff ff       	call   80102000 <iput>
801078f0:	89 34 24             	mov    %esi,(%esp)
801078f3:	e8 08 a7 ff ff       	call   80102000 <iput>
801078f8:	eb af                	jmp    801078a9 <sys_mount+0x1f9>
801078fa:	83 ec 0c             	sub    $0xc,%esp
801078fd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80107902:	68 c0 f1 10 80       	push   $0x8010f1c0
80107907:	e8 54 8d ff ff       	call   80100660 <cprintf>
8010790c:	e8 3f bf ff ff       	call   80103850 <end_op>
80107911:	83 c4 10             	add    $0x10,%esp
80107914:	e9 a3 fe ff ff       	jmp    801077bc <sys_mount+0x10c>
80107919:	83 ec 0c             	sub    $0xc,%esp
8010791c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80107921:	68 b0 f1 10 80       	push   $0x8010f1b0
80107926:	e8 35 8d ff ff       	call   80100660 <cprintf>
8010792b:	e8 20 bf ff ff       	call   80103850 <end_op>
80107930:	83 c4 10             	add    $0x10,%esp
80107933:	e9 84 fe ff ff       	jmp    801077bc <sys_mount+0x10c>
80107938:	83 ec 0c             	sub    $0xc,%esp
8010793b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80107940:	57                   	push   %edi
80107941:	e8 ba a6 ff ff       	call   80102000 <iput>
80107946:	e8 05 bf ff ff       	call   80103850 <end_op>
8010794b:	83 c4 10             	add    $0x10,%esp
8010794e:	e9 69 fe ff ff       	jmp    801077bc <sys_mount+0x10c>
80107953:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80107960 <sys_umount>:
80107960:	55                   	push   %ebp
80107961:	89 e5                	mov    %esp,%ebp
80107963:	53                   	push   %ebx
80107964:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107967:	83 ec 1c             	sub    $0x1c,%esp
8010796a:	50                   	push   %eax
8010796b:	6a 00                	push   $0x0
8010796d:	e8 7e ee ff ff       	call   801067f0 <argstr>
80107972:	83 c4 10             	add    $0x10,%esp
80107975:	85 c0                	test   %eax,%eax
80107977:	0f 88 b3 00 00 00    	js     80107a30 <sys_umount+0xd0>
8010797d:	e8 5e be ff ff       	call   801037e0 <begin_op>
80107982:	83 ec 08             	sub    $0x8,%esp
80107985:	68 d1 f1 10 80       	push   $0x8010f1d1
8010798a:	ff 75 f0             	pushl  -0x10(%ebp)
8010798d:	e8 ee 62 00 00       	call   8010dc80 <cgroup_delete>
80107992:	83 c4 10             	add    $0x10,%esp
80107995:	83 f8 ff             	cmp    $0xffffffff,%eax
80107998:	89 c3                	mov    %eax,%ebx
8010799a:	74 1c                	je     801079b8 <sys_umount+0x58>
8010799c:	83 f8 fe             	cmp    $0xfffffffe,%eax
8010799f:	0f 84 ab 00 00 00    	je     80107a50 <sys_umount+0xf0>
801079a5:	e8 a6 be ff ff       	call   80103850 <end_op>
801079aa:	89 d8                	mov    %ebx,%eax
801079ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801079af:	c9                   	leave  
801079b0:	c3                   	ret    
801079b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801079b8:	8d 45 f4             	lea    -0xc(%ebp),%eax
801079bb:	83 ec 08             	sub    $0x8,%esp
801079be:	50                   	push   %eax
801079bf:	ff 75 f0             	pushl  -0x10(%ebp)
801079c2:	e8 39 af ff ff       	call   80102900 <nameimount>
801079c7:	83 c4 10             	add    $0x10,%esp
801079ca:	85 c0                	test   %eax,%eax
801079cc:	0f 84 9d 00 00 00    	je     80107a6f <sys_umount+0x10f>
801079d2:	83 78 04 01          	cmpl   $0x1,0x4(%eax)
801079d6:	74 28                	je     80107a00 <sys_umount+0xa0>
801079d8:	83 ec 0c             	sub    $0xc,%esp
801079db:	50                   	push   %eax
801079dc:	e8 1f a6 ff ff       	call   80102000 <iput>
801079e1:	5a                   	pop    %edx
801079e2:	ff 75 f4             	pushl  -0xc(%ebp)
801079e5:	e8 f1 c4 ff ff       	call   80103edb <mntput>
801079ea:	e8 61 be ff ff       	call   80103850 <end_op>
801079ef:	83 c4 10             	add    $0x10,%esp
801079f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801079f7:	eb b3                	jmp    801079ac <sys_umount+0x4c>
801079f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107a00:	83 ec 0c             	sub    $0xc,%esp
80107a03:	50                   	push   %eax
80107a04:	e8 f7 a5 ff ff       	call   80102000 <iput>
80107a09:	58                   	pop    %eax
80107a0a:	ff 75 f4             	pushl  -0xc(%ebp)
80107a0d:	e8 00 c6 ff ff       	call   80104012 <umount>
80107a12:	83 c4 10             	add    $0x10,%esp
80107a15:	85 c0                	test   %eax,%eax
80107a17:	89 c3                	mov    %eax,%ebx
80107a19:	74 8a                	je     801079a5 <sys_umount+0x45>
80107a1b:	83 ec 0c             	sub    $0xc,%esp
80107a1e:	ff 75 f4             	pushl  -0xc(%ebp)
80107a21:	e8 b5 c4 ff ff       	call   80103edb <mntput>
80107a26:	83 c4 10             	add    $0x10,%esp
80107a29:	e9 77 ff ff ff       	jmp    801079a5 <sys_umount+0x45>
80107a2e:	66 90                	xchg   %ax,%ax
80107a30:	83 ec 0c             	sub    $0xc,%esp
80107a33:	68 a0 f1 10 80       	push   $0x8010f1a0
80107a38:	e8 23 8c ff ff       	call   80100660 <cprintf>
80107a3d:	83 c4 10             	add    $0x10,%esp
80107a40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107a45:	e9 62 ff ff ff       	jmp    801079ac <sys_umount+0x4c>
80107a4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107a50:	e8 fb bd ff ff       	call   80103850 <end_op>
80107a55:	83 ec 0c             	sub    $0xc,%esp
80107a58:	68 d8 f1 10 80       	push   $0x8010f1d8
80107a5d:	e8 fe 8b ff ff       	call   80100660 <cprintf>
80107a62:	83 c4 10             	add    $0x10,%esp
80107a65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107a6a:	e9 3d ff ff ff       	jmp    801079ac <sys_umount+0x4c>
80107a6f:	e8 dc bd ff ff       	call   80103850 <end_op>
80107a74:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107a79:	e9 2e ff ff ff       	jmp    801079ac <sys_umount+0x4c>
80107a7e:	66 90                	xchg   %ax,%ax

80107a80 <sys_printmounts>:
80107a80:	55                   	push   %ebp
80107a81:	89 e5                	mov    %esp,%ebp
80107a83:	83 ec 08             	sub    $0x8,%esp
80107a86:	e8 9b c7 ff ff       	call   80104226 <printmounts>
80107a8b:	31 c0                	xor    %eax,%eax
80107a8d:	c9                   	leave  
80107a8e:	c3                   	ret    
80107a8f:	90                   	nop

80107a90 <sys_printdevices>:
80107a90:	55                   	push   %ebp
80107a91:	89 e5                	mov    %esp,%ebp
80107a93:	83 ec 08             	sub    $0x8,%esp
80107a96:	e8 a5 95 ff ff       	call   80101040 <printdevices>
80107a9b:	31 c0                	xor    %eax,%eax
80107a9d:	c9                   	leave  
80107a9e:	c3                   	ret    
80107a9f:	90                   	nop

80107aa0 <sys_unshare>:
80107aa0:	55                   	push   %ebp
80107aa1:	89 e5                	mov    %esp,%ebp
80107aa3:	83 ec 20             	sub    $0x20,%esp
80107aa6:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107aa9:	50                   	push   %eax
80107aaa:	6a 00                	push   $0x0
80107aac:	e8 8f ec ff ff       	call   80106740 <argint>
80107ab1:	83 c4 10             	add    $0x10,%esp
80107ab4:	85 c0                	test   %eax,%eax
80107ab6:	78 18                	js     80107ad0 <sys_unshare+0x30>
80107ab8:	83 ec 0c             	sub    $0xc,%esp
80107abb:	ff 75 f4             	pushl  -0xc(%ebp)
80107abe:	e8 58 d0 ff ff       	call   80104b1b <unshare>
80107ac3:	83 c4 10             	add    $0x10,%esp
80107ac6:	c9                   	leave  
80107ac7:	c3                   	ret    
80107ac8:	90                   	nop
80107ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107ad0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107ad5:	c9                   	leave  
80107ad6:	c3                   	ret    
80107ad7:	66 90                	xchg   %ax,%ax
80107ad9:	66 90                	xchg   %ax,%ax
80107adb:	66 90                	xchg   %ax,%ax
80107add:	66 90                	xchg   %ax,%ax
80107adf:	90                   	nop

80107ae0 <sys_fork>:
80107ae0:	55                   	push   %ebp
80107ae1:	89 e5                	mov    %esp,%ebp
80107ae3:	5d                   	pop    %ebp
80107ae4:	e9 60 da ff ff       	jmp    80105549 <fork>
80107ae9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80107af0 <sys_exit>:
80107af0:	55                   	push   %ebp
80107af1:	89 e5                	mov    %esp,%ebp
80107af3:	83 ec 20             	sub    $0x20,%esp
80107af6:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107af9:	50                   	push   %eax
80107afa:	6a 00                	push   $0x0
80107afc:	e8 3f ec ff ff       	call   80106740 <argint>
80107b01:	83 c4 10             	add    $0x10,%esp
80107b04:	85 c0                	test   %eax,%eax
80107b06:	78 18                	js     80107b20 <sys_exit+0x30>
80107b08:	83 ec 0c             	sub    $0xc,%esp
80107b0b:	ff 75 f4             	pushl  -0xc(%ebp)
80107b0e:	e8 51 df ff ff       	call   80105a64 <exit>
80107b13:	83 c4 10             	add    $0x10,%esp
80107b16:	31 c0                	xor    %eax,%eax
80107b18:	c9                   	leave  
80107b19:	c3                   	ret    
80107b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107b20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107b25:	c9                   	leave  
80107b26:	c3                   	ret    
80107b27:	89 f6                	mov    %esi,%esi
80107b29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80107b30 <sys_wait>:
80107b30:	55                   	push   %ebp
80107b31:	89 e5                	mov    %esp,%ebp
80107b33:	83 ec 1c             	sub    $0x1c,%esp
80107b36:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107b39:	6a 04                	push   $0x4
80107b3b:	50                   	push   %eax
80107b3c:	6a 00                	push   $0x0
80107b3e:	e8 4d ec ff ff       	call   80106790 <argptr>
80107b43:	83 c4 10             	add    $0x10,%esp
80107b46:	85 c0                	test   %eax,%eax
80107b48:	78 16                	js     80107b60 <sys_wait+0x30>
80107b4a:	83 ec 0c             	sub    $0xc,%esp
80107b4d:	ff 75 f4             	pushl  -0xc(%ebp)
80107b50:	e8 5d e1 ff ff       	call   80105cb2 <wait>
80107b55:	83 c4 10             	add    $0x10,%esp
80107b58:	c9                   	leave  
80107b59:	c3                   	ret    
80107b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107b65:	c9                   	leave  
80107b66:	c3                   	ret    
80107b67:	89 f6                	mov    %esi,%esi
80107b69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80107b70 <sys_kill>:
80107b70:	55                   	push   %ebp
80107b71:	89 e5                	mov    %esp,%ebp
80107b73:	83 ec 20             	sub    $0x20,%esp
80107b76:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107b79:	50                   	push   %eax
80107b7a:	6a 00                	push   $0x0
80107b7c:	e8 bf eb ff ff       	call   80106740 <argint>
80107b81:	83 c4 10             	add    $0x10,%esp
80107b84:	85 c0                	test   %eax,%eax
80107b86:	78 18                	js     80107ba0 <sys_kill+0x30>
80107b88:	83 ec 0c             	sub    $0xc,%esp
80107b8b:	ff 75 f4             	pushl  -0xc(%ebp)
80107b8e:	e8 84 e2 ff ff       	call   80105e17 <kill>
80107b93:	83 c4 10             	add    $0x10,%esp
80107b96:	c9                   	leave  
80107b97:	c3                   	ret    
80107b98:	90                   	nop
80107b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107ba5:	c9                   	leave  
80107ba6:	c3                   	ret    
80107ba7:	89 f6                	mov    %esi,%esi
80107ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80107bb0 <sys_getpid>:
80107bb0:	55                   	push   %ebp
80107bb1:	89 e5                	mov    %esp,%ebp
80107bb3:	83 ec 08             	sub    $0x8,%esp
80107bb6:	e8 a8 d6 ff ff       	call   80105263 <myproc>
80107bbb:	8b 40 10             	mov    0x10(%eax),%eax
80107bbe:	c9                   	leave  
80107bbf:	c3                   	ret    

80107bc0 <sys_sbrk>:
80107bc0:	55                   	push   %ebp
80107bc1:	89 e5                	mov    %esp,%ebp
80107bc3:	53                   	push   %ebx
80107bc4:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107bc7:	83 ec 1c             	sub    $0x1c,%esp
80107bca:	50                   	push   %eax
80107bcb:	6a 00                	push   $0x0
80107bcd:	e8 6e eb ff ff       	call   80106740 <argint>
80107bd2:	83 c4 10             	add    $0x10,%esp
80107bd5:	85 c0                	test   %eax,%eax
80107bd7:	78 27                	js     80107c00 <sys_sbrk+0x40>
80107bd9:	e8 85 d6 ff ff       	call   80105263 <myproc>
80107bde:	83 ec 0c             	sub    $0xc,%esp
80107be1:	8b 18                	mov    (%eax),%ebx
80107be3:	ff 75 f4             	pushl  -0xc(%ebp)
80107be6:	e8 87 d8 ff ff       	call   80105472 <growproc>
80107beb:	83 c4 10             	add    $0x10,%esp
80107bee:	85 c0                	test   %eax,%eax
80107bf0:	78 0e                	js     80107c00 <sys_sbrk+0x40>
80107bf2:	89 d8                	mov    %ebx,%eax
80107bf4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107bf7:	c9                   	leave  
80107bf8:	c3                   	ret    
80107bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107c00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107c05:	eb ed                	jmp    80107bf4 <sys_sbrk+0x34>
80107c07:	89 f6                	mov    %esi,%esi
80107c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80107c10 <sys_sleep>:
80107c10:	55                   	push   %ebp
80107c11:	89 e5                	mov    %esp,%ebp
80107c13:	53                   	push   %ebx
80107c14:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107c17:	83 ec 1c             	sub    $0x1c,%esp
80107c1a:	50                   	push   %eax
80107c1b:	6a 00                	push   $0x0
80107c1d:	e8 1e eb ff ff       	call   80106740 <argint>
80107c22:	83 c4 10             	add    $0x10,%esp
80107c25:	85 c0                	test   %eax,%eax
80107c27:	0f 88 8a 00 00 00    	js     80107cb7 <sys_sleep+0xa7>
80107c2d:	83 ec 0c             	sub    $0xc,%esp
80107c30:	68 c0 bb 13 80       	push   $0x8013bbc0
80107c35:	e8 36 e6 ff ff       	call   80106270 <acquire>
80107c3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107c3d:	83 c4 10             	add    $0x10,%esp
80107c40:	8b 1d 00 c4 13 80    	mov    0x8013c400,%ebx
80107c46:	85 d2                	test   %edx,%edx
80107c48:	75 27                	jne    80107c71 <sys_sleep+0x61>
80107c4a:	eb 54                	jmp    80107ca0 <sys_sleep+0x90>
80107c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107c50:	83 ec 08             	sub    $0x8,%esp
80107c53:	68 c0 bb 13 80       	push   $0x8013bbc0
80107c58:	68 00 c4 13 80       	push   $0x8013c400
80107c5d:	e8 bf df ff ff       	call   80105c21 <sleep>
80107c62:	a1 00 c4 13 80       	mov    0x8013c400,%eax
80107c67:	83 c4 10             	add    $0x10,%esp
80107c6a:	29 d8                	sub    %ebx,%eax
80107c6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80107c6f:	73 2f                	jae    80107ca0 <sys_sleep+0x90>
80107c71:	e8 ed d5 ff ff       	call   80105263 <myproc>
80107c76:	8b 40 44             	mov    0x44(%eax),%eax
80107c79:	85 c0                	test   %eax,%eax
80107c7b:	74 d3                	je     80107c50 <sys_sleep+0x40>
80107c7d:	83 ec 0c             	sub    $0xc,%esp
80107c80:	68 c0 bb 13 80       	push   $0x8013bbc0
80107c85:	e8 06 e7 ff ff       	call   80106390 <release>
80107c8a:	83 c4 10             	add    $0x10,%esp
80107c8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107c92:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107c95:	c9                   	leave  
80107c96:	c3                   	ret    
80107c97:	89 f6                	mov    %esi,%esi
80107c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107ca0:	83 ec 0c             	sub    $0xc,%esp
80107ca3:	68 c0 bb 13 80       	push   $0x8013bbc0
80107ca8:	e8 e3 e6 ff ff       	call   80106390 <release>
80107cad:	83 c4 10             	add    $0x10,%esp
80107cb0:	31 c0                	xor    %eax,%eax
80107cb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107cb5:	c9                   	leave  
80107cb6:	c3                   	ret    
80107cb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107cbc:	eb d4                	jmp    80107c92 <sys_sleep+0x82>
80107cbe:	66 90                	xchg   %ax,%ax

80107cc0 <sys_usleep>:
80107cc0:	55                   	push   %ebp
80107cc1:	89 e5                	mov    %esp,%ebp
80107cc3:	57                   	push   %edi
80107cc4:	56                   	push   %esi
80107cc5:	53                   	push   %ebx
80107cc6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80107cc9:	83 ec 24             	sub    $0x24,%esp
80107ccc:	50                   	push   %eax
80107ccd:	6a 00                	push   $0x0
80107ccf:	e8 6c ea ff ff       	call   80106740 <argint>
80107cd4:	83 c4 10             	add    $0x10,%esp
80107cd7:	85 c0                	test   %eax,%eax
80107cd9:	0f 88 9e 00 00 00    	js     80107d7d <sys_usleep+0xbd>
80107cdf:	e8 9c 21 00 00       	call   80109e80 <steady_clock_now>
80107ce4:	83 ec 0c             	sub    $0xc,%esp
80107ce7:	89 c3                	mov    %eax,%ebx
80107ce9:	31 ff                	xor    %edi,%edi
80107ceb:	68 c0 bb 13 80       	push   $0x8013bbc0
80107cf0:	89 de                	mov    %ebx,%esi
80107cf2:	e8 79 e5 ff ff       	call   80106270 <acquire>
80107cf7:	83 c4 10             	add    $0x10,%esp
80107cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107d00:	e8 7b 21 00 00       	call   80109e80 <steady_clock_now>
80107d05:	29 f0                	sub    %esi,%eax
80107d07:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80107d0a:	19 fa                	sbb    %edi,%edx
80107d0c:	83 fa 00             	cmp    $0x0,%edx
80107d0f:	76 1f                	jbe    80107d30 <sys_usleep+0x70>
80107d11:	83 ec 0c             	sub    $0xc,%esp
80107d14:	68 c0 bb 13 80       	push   $0x8013bbc0
80107d19:	e8 72 e6 ff ff       	call   80106390 <release>
80107d1e:	83 c4 10             	add    $0x10,%esp
80107d21:	31 c0                	xor    %eax,%eax
80107d23:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107d26:	5b                   	pop    %ebx
80107d27:	5e                   	pop    %esi
80107d28:	5f                   	pop    %edi
80107d29:	5d                   	pop    %ebp
80107d2a:	c3                   	ret    
80107d2b:	90                   	nop
80107d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107d30:	39 c8                	cmp    %ecx,%eax
80107d32:	73 dd                	jae    80107d11 <sys_usleep+0x51>
80107d34:	e8 2a d5 ff ff       	call   80105263 <myproc>
80107d39:	8b 40 44             	mov    0x44(%eax),%eax
80107d3c:	85 c0                	test   %eax,%eax
80107d3e:	75 20                	jne    80107d60 <sys_usleep+0xa0>
80107d40:	83 ec 08             	sub    $0x8,%esp
80107d43:	68 c0 bb 13 80       	push   $0x8013bbc0
80107d48:	68 00 c4 13 80       	push   $0x8013c400
80107d4d:	e8 cf de ff ff       	call   80105c21 <sleep>
80107d52:	83 c4 10             	add    $0x10,%esp
80107d55:	eb a9                	jmp    80107d00 <sys_usleep+0x40>
80107d57:	89 f6                	mov    %esi,%esi
80107d59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80107d60:	83 ec 0c             	sub    $0xc,%esp
80107d63:	68 c0 bb 13 80       	push   $0x8013bbc0
80107d68:	e8 23 e6 ff ff       	call   80106390 <release>
80107d6d:	83 c4 10             	add    $0x10,%esp
80107d70:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107d73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107d78:	5b                   	pop    %ebx
80107d79:	5e                   	pop    %esi
80107d7a:	5f                   	pop    %edi
80107d7b:	5d                   	pop    %ebp
80107d7c:	c3                   	ret    
80107d7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107d82:	eb 9f                	jmp    80107d23 <sys_usleep+0x63>
80107d84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107d8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80107d90 <sys_ioctl>:
80107d90:	55                   	push   %ebp
80107d91:	89 e5                	mov    %esp,%ebp
80107d93:	56                   	push   %esi
80107d94:	53                   	push   %ebx
80107d95:	8d 5d f4             	lea    -0xc(%ebp),%ebx
80107d98:	83 ec 18             	sub    $0x18,%esp
80107d9b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
80107da2:	53                   	push   %ebx
80107da3:	6a 00                	push   $0x0
80107da5:	e8 96 e9 ff ff       	call   80106740 <argint>
80107daa:	83 c4 10             	add    $0x10,%esp
80107dad:	85 c0                	test   %eax,%eax
80107daf:	0f 88 1b 01 00 00    	js     80107ed0 <sys_ioctl+0x140>
80107db5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80107db9:	0f 87 11 01 00 00    	ja     80107ed0 <sys_ioctl+0x140>
80107dbf:	e8 9f d4 ff ff       	call   80105263 <myproc>
80107dc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107dc7:	8b 74 90 48          	mov    0x48(%eax,%edx,4),%esi
80107dcb:	85 f6                	test   %esi,%esi
80107dcd:	0f 84 fd 00 00 00    	je     80107ed0 <sys_ioctl+0x140>
80107dd3:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107dd6:	83 ec 08             	sub    $0x8,%esp
80107dd9:	50                   	push   %eax
80107dda:	6a 01                	push   $0x1
80107ddc:	e8 5f e9 ff ff       	call   80106740 <argint>
80107de1:	83 c4 10             	add    $0x10,%esp
80107de4:	85 c0                	test   %eax,%eax
80107de6:	0f 88 e4 00 00 00    	js     80107ed0 <sys_ioctl+0x140>
80107dec:	83 ec 08             	sub    $0x8,%esp
80107def:	53                   	push   %ebx
80107df0:	6a 02                	push   $0x2
80107df2:	e8 49 e9 ff ff       	call   80106740 <argint>
80107df7:	83 c4 10             	add    $0x10,%esp
80107dfa:	85 c0                	test   %eax,%eax
80107dfc:	0f 88 ce 00 00 00    	js     80107ed0 <sys_ioctl+0x140>
80107e02:	f7 45 f4 30 30 00 00 	testl  $0x3030,-0xc(%ebp)
80107e09:	0f 84 c1 00 00 00    	je     80107ed0 <sys_ioctl+0x140>
80107e0f:	8b 5e 10             	mov    0x10(%esi),%ebx
80107e12:	66 83 7b 54 00       	cmpw   $0x0,0x54(%ebx)
80107e17:	0f 84 b3 00 00 00    	je     80107ed0 <sys_ioctl+0x140>
80107e1d:	83 ec 0c             	sub    $0xc,%esp
80107e20:	53                   	push   %ebx
80107e21:	e8 aa a0 ff ff       	call   80101ed0 <ilock>
80107e26:	83 c4 10             	add    $0x10,%esp
80107e29:	66 83 7b 50 03       	cmpw   $0x3,0x50(%ebx)
80107e2e:	0f 85 14 01 00 00    	jne    80107f48 <sys_ioctl+0x1b8>
80107e34:	66 83 7b 52 09       	cmpw   $0x9,0x52(%ebx)
80107e39:	0f 8f 09 01 00 00    	jg     80107f48 <sys_ioctl+0x1b8>
80107e3f:	66 83 7b 54 03       	cmpw   $0x3,0x54(%ebx)
80107e44:	0f 8f fe 00 00 00    	jg     80107f48 <sys_ioctl+0x1b8>
80107e4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107e4d:	83 f8 02             	cmp    $0x2,%eax
80107e50:	0f 84 ca 00 00 00    	je     80107f20 <sys_ioctl+0x190>
80107e56:	7e 38                	jle    80107e90 <sys_ioctl+0x100>
80107e58:	3d e9 03 00 00       	cmp    $0x3e9,%eax
80107e5d:	0f 84 9d 00 00 00    	je     80107f00 <sys_ioctl+0x170>
80107e63:	3d ea 03 00 00       	cmp    $0x3ea,%eax
80107e68:	75 76                	jne    80107ee0 <sys_ioctl+0x150>
80107e6a:	e8 0c e1 ff ff       	call   80105f7b <proc_lock>
80107e6f:	e8 ef d3 ff ff       	call   80105263 <myproc>
80107e74:	8b 98 b8 02 00 00    	mov    0x2b8(%eax),%ebx
80107e7a:	e8 11 e1 ff ff       	call   80105f90 <proc_unlock>
80107e7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107e82:	89 d8                	mov    %ebx,%eax
80107e84:	5b                   	pop    %ebx
80107e85:	5e                   	pop    %esi
80107e86:	5d                   	pop    %ebp
80107e87:	c3                   	ret    
80107e88:	90                   	nop
80107e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107e90:	83 f8 01             	cmp    $0x1,%eax
80107e93:	75 4b                	jne    80107ee0 <sys_ioctl+0x150>
80107e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107e98:	f6 c4 20             	test   $0x20,%ah
80107e9b:	0f 85 bf 00 00 00    	jne    80107f60 <sys_ioctl+0x1d0>
80107ea1:	f6 c4 10             	test   $0x10,%ah
80107ea4:	0f 85 fe 00 00 00    	jne    80107fa8 <sys_ioctl+0x218>
80107eaa:	a8 10                	test   $0x10,%al
80107eac:	0f 85 de 00 00 00    	jne    80107f90 <sys_ioctl+0x200>
80107eb2:	a8 20                	test   $0x20,%al
80107eb4:	0f 85 be 00 00 00    	jne    80107f78 <sys_ioctl+0x1e8>
80107eba:	83 ec 0c             	sub    $0xc,%esp
80107ebd:	53                   	push   %ebx
80107ebe:	e8 ed a0 ff ff       	call   80101fb0 <iunlock>
80107ec3:	83 c4 10             	add    $0x10,%esp
80107ec6:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107ec9:	31 c0                	xor    %eax,%eax
80107ecb:	5b                   	pop    %ebx
80107ecc:	5e                   	pop    %esi
80107ecd:	5d                   	pop    %ebp
80107ece:	c3                   	ret    
80107ecf:	90                   	nop
80107ed0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107ed5:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107ed8:	5b                   	pop    %ebx
80107ed9:	5e                   	pop    %esi
80107eda:	5d                   	pop    %ebp
80107edb:	c3                   	ret    
80107edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107ee0:	83 ec 0c             	sub    $0xc,%esp
80107ee3:	53                   	push   %ebx
80107ee4:	e8 c7 a0 ff ff       	call   80101fb0 <iunlock>
80107ee9:	83 c4 10             	add    $0x10,%esp
80107eec:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107eef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107ef4:	5b                   	pop    %ebx
80107ef5:	5e                   	pop    %esi
80107ef6:	5d                   	pop    %ebp
80107ef7:	c3                   	ret    
80107ef8:	90                   	nop
80107ef9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107f00:	e8 76 e0 ff ff       	call   80105f7b <proc_lock>
80107f05:	e8 59 d3 ff ff       	call   80105263 <myproc>
80107f0a:	8b 98 b0 02 00 00    	mov    0x2b0(%eax),%ebx
80107f10:	e8 7b e0 ff ff       	call   80105f90 <proc_unlock>
80107f15:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107f18:	89 d8                	mov    %ebx,%eax
80107f1a:	5b                   	pop    %ebx
80107f1b:	5e                   	pop    %esi
80107f1c:	5d                   	pop    %ebp
80107f1d:	c3                   	ret    
80107f1e:	66 90                	xchg   %ax,%ax
80107f20:	83 ec 08             	sub    $0x8,%esp
80107f23:	ff 75 f4             	pushl  -0xc(%ebp)
80107f26:	53                   	push   %ebx
80107f27:	e8 b4 8e ff ff       	call   80100de0 <tty_gets>
80107f2c:	89 1c 24             	mov    %ebx,(%esp)
80107f2f:	89 c6                	mov    %eax,%esi
80107f31:	e8 7a a0 ff ff       	call   80101fb0 <iunlock>
80107f36:	83 c4 10             	add    $0x10,%esp
80107f39:	8d 65 f8             	lea    -0x8(%ebp),%esp
80107f3c:	89 f0                	mov    %esi,%eax
80107f3e:	5b                   	pop    %ebx
80107f3f:	5e                   	pop    %esi
80107f40:	5d                   	pop    %ebp
80107f41:	c3                   	ret    
80107f42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107f48:	83 ec 0c             	sub    $0xc,%esp
80107f4b:	53                   	push   %ebx
80107f4c:	e8 1f a2 ff ff       	call   80102170 <iunlockput>
80107f51:	83 c4 10             	add    $0x10,%esp
80107f54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107f59:	e9 77 ff ff ff       	jmp    80107ed5 <sys_ioctl+0x145>
80107f5e:	66 90                	xchg   %ax,%ax
80107f60:	83 ec 0c             	sub    $0xc,%esp
80107f63:	53                   	push   %ebx
80107f64:	e8 57 8d ff ff       	call   80100cc0 <tty_disconnect>
80107f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107f6c:	83 c4 10             	add    $0x10,%esp
80107f6f:	e9 2d ff ff ff       	jmp    80107ea1 <sys_ioctl+0x111>
80107f74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107f78:	83 ec 0c             	sub    $0xc,%esp
80107f7b:	53                   	push   %ebx
80107f7c:	e8 3f 8e ff ff       	call   80100dc0 <tty_detach>
80107f81:	83 c4 10             	add    $0x10,%esp
80107f84:	e9 31 ff ff ff       	jmp    80107eba <sys_ioctl+0x12a>
80107f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80107f90:	83 ec 0c             	sub    $0xc,%esp
80107f93:	53                   	push   %ebx
80107f94:	e8 e7 8d ff ff       	call   80100d80 <tty_attach>
80107f99:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107f9c:	83 c4 10             	add    $0x10,%esp
80107f9f:	e9 0e ff ff ff       	jmp    80107eb2 <sys_ioctl+0x122>
80107fa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80107fa8:	83 ec 0c             	sub    $0xc,%esp
80107fab:	53                   	push   %ebx
80107fac:	e8 5f 8d ff ff       	call   80100d10 <tty_connect>
80107fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107fb4:	83 c4 10             	add    $0x10,%esp
80107fb7:	e9 ee fe ff ff       	jmp    80107eaa <sys_ioctl+0x11a>
80107fbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107fc0 <sys_uptime>:
80107fc0:	55                   	push   %ebp
80107fc1:	89 e5                	mov    %esp,%ebp
80107fc3:	53                   	push   %ebx
80107fc4:	83 ec 10             	sub    $0x10,%esp
80107fc7:	68 c0 bb 13 80       	push   $0x8013bbc0
80107fcc:	e8 9f e2 ff ff       	call   80106270 <acquire>
80107fd1:	8b 1d 00 c4 13 80    	mov    0x8013c400,%ebx
80107fd7:	c7 04 24 c0 bb 13 80 	movl   $0x8013bbc0,(%esp)
80107fde:	e8 ad e3 ff ff       	call   80106390 <release>
80107fe3:	89 d8                	mov    %ebx,%eax
80107fe5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107fe8:	c9                   	leave  
80107fe9:	c3                   	ret    
80107fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107ff0 <sys_getppid>:
80107ff0:	55                   	push   %ebp
80107ff1:	89 e5                	mov    %esp,%ebp
80107ff3:	83 ec 08             	sub    $0x8,%esp
80107ff6:	e8 68 d2 ff ff       	call   80105263 <myproc>
80107ffb:	8b 40 34             	mov    0x34(%eax),%eax
80107ffe:	8b 40 10             	mov    0x10(%eax),%eax
80108001:	c9                   	leave  
80108002:	c3                   	ret    
80108003:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80108009:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80108010 <sys_getcpu>:
80108010:	55                   	push   %ebp
80108011:	89 e5                	mov    %esp,%ebp
80108013:	83 ec 08             	sub    $0x8,%esp
}

static inline void
cli(void)
{
  asm volatile("cli");
80108016:	fa                   	cli    
80108017:	e8 2c d2 ff ff       	call   80105248 <cpuid>
}

static inline void
sti(void)
{
  asm volatile("sti");
8010801c:	fb                   	sti    
8010801d:	c9                   	leave  
8010801e:	c3                   	ret    
8010801f:	90                   	nop

80108020 <sys_getmem>:
80108020:	55                   	push   %ebp
80108021:	89 e5                	mov    %esp,%ebp
80108023:	83 ec 08             	sub    $0x8,%esp
80108026:	e8 38 d2 ff ff       	call   80105263 <myproc>
8010802b:	8b 00                	mov    (%eax),%eax
8010802d:	c9                   	leave  
8010802e:	c3                   	ret    
8010802f:	90                   	nop

80108030 <sys_kmemtest>:
80108030:	55                   	push   %ebp
80108031:	89 e5                	mov    %esp,%ebp
80108033:	5d                   	pop    %ebp
80108034:	e9 37 b0 ff ff       	jmp    80103070 <kmemtest>

80108039 <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
80108039:	1e                   	push   %ds
  pushl %es
8010803a:	06                   	push   %es
  pushl %fs
8010803b:	0f a0                	push   %fs
  pushl %gs
8010803d:	0f a8                	push   %gs
  pushal
8010803f:	60                   	pusha  
  
  # Set up data segments.
  movw $(SEG_KDATA<<3), %ax
80108040:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80108044:	8e d8                	mov    %eax,%ds
  movw %ax, %es
80108046:	8e c0                	mov    %eax,%es

  # Call trap(tf), where tf=%esp
  pushl %esp
80108048:	54                   	push   %esp
  call trap
80108049:	e8 e2 00 00 00       	call   80108130 <trap>
  addl $4, %esp
8010804e:	83 c4 04             	add    $0x4,%esp

80108051 <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80108051:	61                   	popa   
  popl %gs
80108052:	0f a9                	pop    %gs
  popl %fs
80108054:	0f a1                	pop    %fs
  popl %es
80108056:	07                   	pop    %es
  popl %ds
80108057:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
80108058:	83 c4 08             	add    $0x8,%esp
  iret
8010805b:	cf                   	iret   
8010805c:	66 90                	xchg   %ax,%ax
8010805e:	66 90                	xchg   %ax,%ax

80108060 <tvinit>:
80108060:	31 c0                	xor    %eax,%eax
80108062:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80108068:	8b 14 85 04 00 12 80 	mov    -0x7fedfffc(,%eax,4),%edx
8010806f:	b9 08 00 00 00       	mov    $0x8,%ecx
80108074:	c6 04 c5 04 bc 13 80 	movb   $0x0,-0x7fec43fc(,%eax,8)
8010807b:	00 
8010807c:	66 89 0c c5 02 bc 13 	mov    %cx,-0x7fec43fe(,%eax,8)
80108083:	80 
80108084:	c6 04 c5 05 bc 13 80 	movb   $0x8e,-0x7fec43fb(,%eax,8)
8010808b:	8e 
8010808c:	66 89 14 c5 00 bc 13 	mov    %dx,-0x7fec4400(,%eax,8)
80108093:	80 
80108094:	c1 ea 10             	shr    $0x10,%edx
80108097:	66 89 14 c5 06 bc 13 	mov    %dx,-0x7fec43fa(,%eax,8)
8010809e:	80 
8010809f:	83 c0 01             	add    $0x1,%eax
801080a2:	3d 00 01 00 00       	cmp    $0x100,%eax
801080a7:	75 bf                	jne    80108068 <tvinit+0x8>
801080a9:	55                   	push   %ebp
801080aa:	ba 08 00 00 00       	mov    $0x8,%edx
801080af:	89 e5                	mov    %esp,%ebp
801080b1:	83 ec 10             	sub    $0x10,%esp
801080b4:	a1 04 01 12 80       	mov    0x80120104,%eax
801080b9:	68 13 f2 10 80       	push   $0x8010f213
801080be:	68 c0 bb 13 80       	push   $0x8013bbc0
801080c3:	66 89 15 02 be 13 80 	mov    %dx,0x8013be02
801080ca:	c6 05 04 be 13 80 00 	movb   $0x0,0x8013be04
801080d1:	66 a3 00 be 13 80    	mov    %ax,0x8013be00
801080d7:	c1 e8 10             	shr    $0x10,%eax
801080da:	c6 05 05 be 13 80 ef 	movb   $0xef,0x8013be05
801080e1:	66 a3 06 be 13 80    	mov    %ax,0x8013be06
801080e7:	e8 84 e0 ff ff       	call   80106170 <initlock>
801080ec:	83 c4 10             	add    $0x10,%esp
801080ef:	c9                   	leave  
801080f0:	c3                   	ret    
801080f1:	eb 0d                	jmp    80108100 <idtinit>
801080f3:	90                   	nop
801080f4:	90                   	nop
801080f5:	90                   	nop
801080f6:	90                   	nop
801080f7:	90                   	nop
801080f8:	90                   	nop
801080f9:	90                   	nop
801080fa:	90                   	nop
801080fb:	90                   	nop
801080fc:	90                   	nop
801080fd:	90                   	nop
801080fe:	90                   	nop
801080ff:	90                   	nop

80108100 <idtinit>:
80108100:	55                   	push   %ebp
static inline void
lidt(struct gatedesc *p, int size)
{
  volatile ushort pd[3];

  pd[0] = size-1;
80108101:	b8 ff 07 00 00       	mov    $0x7ff,%eax
80108106:	89 e5                	mov    %esp,%ebp
80108108:	83 ec 10             	sub    $0x10,%esp
8010810b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
8010810f:	b8 00 bc 13 80       	mov    $0x8013bc00,%eax
80108114:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
80108118:	c1 e8 10             	shr    $0x10,%eax
8010811b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
8010811f:	8d 45 fa             	lea    -0x6(%ebp),%eax
80108122:	0f 01 18             	lidtl  (%eax)
80108125:	c9                   	leave  
80108126:	c3                   	ret    
80108127:	89 f6                	mov    %esi,%esi
80108129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80108130 <trap>:
80108130:	55                   	push   %ebp
80108131:	89 e5                	mov    %esp,%ebp
80108133:	57                   	push   %edi
80108134:	56                   	push   %esi
80108135:	53                   	push   %ebx
80108136:	83 ec 1c             	sub    $0x1c,%esp
80108139:	8b 7d 08             	mov    0x8(%ebp),%edi
8010813c:	8b 47 30             	mov    0x30(%edi),%eax
8010813f:	83 f8 40             	cmp    $0x40,%eax
80108142:	0f 84 a8 01 00 00    	je     801082f0 <trap+0x1c0>
80108148:	83 e8 20             	sub    $0x20,%eax
8010814b:	83 f8 1f             	cmp    $0x1f,%eax
8010814e:	77 10                	ja     80108160 <trap+0x30>
80108150:	ff 24 85 bc f2 10 80 	jmp    *-0x7fef0d44(,%eax,4)
80108157:	89 f6                	mov    %esi,%esi
80108159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80108160:	e8 fe d0 ff ff       	call   80105263 <myproc>
80108165:	85 c0                	test   %eax,%eax
80108167:	0f 84 21 02 00 00    	je     8010838e <trap+0x25e>
8010816d:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
80108171:	0f 84 17 02 00 00    	je     8010838e <trap+0x25e>

static inline uint
rcr2(void)
{
  uint val;
  asm volatile("movl %%cr2,%0" : "=r" (val));
80108177:	0f 20 d1             	mov    %cr2,%ecx
8010817a:	8b 57 38             	mov    0x38(%edi),%edx
8010817d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
80108180:	89 55 dc             	mov    %edx,-0x24(%ebp)
80108183:	e8 c0 d0 ff ff       	call   80105248 <cpuid>
80108188:	8b 77 34             	mov    0x34(%edi),%esi
8010818b:	8b 5f 30             	mov    0x30(%edi),%ebx
8010818e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80108191:	e8 cd d0 ff ff       	call   80105263 <myproc>
80108196:	89 45 e0             	mov    %eax,-0x20(%ebp)
80108199:	e8 c5 d0 ff ff       	call   80105263 <myproc>
8010819e:	8b 55 dc             	mov    -0x24(%ebp),%edx
801081a1:	8b 4d d8             	mov    -0x28(%ebp),%ecx
801081a4:	51                   	push   %ecx
801081a5:	52                   	push   %edx
801081a6:	8b 55 e0             	mov    -0x20(%ebp),%edx
801081a9:	ff 75 e4             	pushl  -0x1c(%ebp)
801081ac:	56                   	push   %esi
801081ad:	53                   	push   %ebx
801081ae:	81 c2 90 00 00 00    	add    $0x90,%edx
801081b4:	52                   	push   %edx
801081b5:	ff 70 10             	pushl  0x10(%eax)
801081b8:	68 78 f2 10 80       	push   $0x8010f278
801081bd:	e8 9e 84 ff ff       	call   80100660 <cprintf>
801081c2:	83 c4 20             	add    $0x20,%esp
801081c5:	83 7f 30 0e          	cmpl   $0xe,0x30(%edi)
801081c9:	0f 84 a9 01 00 00    	je     80108378 <trap+0x248>
801081cf:	e8 8f d0 ff ff       	call   80105263 <myproc>
801081d4:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
801081db:	90                   	nop
801081dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801081e0:	e8 7e d0 ff ff       	call   80105263 <myproc>
801081e5:	85 c0                	test   %eax,%eax
801081e7:	74 0c                	je     801081f5 <trap+0xc5>
801081e9:	e8 75 d0 ff ff       	call   80105263 <myproc>
801081ee:	8b 50 44             	mov    0x44(%eax),%edx
801081f1:	85 d2                	test   %edx,%edx
801081f3:	75 4b                	jne    80108240 <trap+0x110>
801081f5:	e8 69 d0 ff ff       	call   80105263 <myproc>
801081fa:	85 c0                	test   %eax,%eax
801081fc:	74 0b                	je     80108209 <trap+0xd9>
801081fe:	e8 60 d0 ff ff       	call   80105263 <myproc>
80108203:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
80108207:	74 57                	je     80108260 <trap+0x130>
80108209:	e8 55 d0 ff ff       	call   80105263 <myproc>
8010820e:	85 c0                	test   %eax,%eax
80108210:	74 1d                	je     8010822f <trap+0xff>
80108212:	e8 4c d0 ff ff       	call   80105263 <myproc>
80108217:	8b 40 44             	mov    0x44(%eax),%eax
8010821a:	85 c0                	test   %eax,%eax
8010821c:	74 11                	je     8010822f <trap+0xff>
8010821e:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
80108222:	83 e0 03             	and    $0x3,%eax
80108225:	66 83 f8 03          	cmp    $0x3,%ax
80108229:	0f 84 ea 00 00 00    	je     80108319 <trap+0x1e9>
8010822f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108232:	5b                   	pop    %ebx
80108233:	5e                   	pop    %esi
80108234:	5f                   	pop    %edi
80108235:	5d                   	pop    %ebp
80108236:	c3                   	ret    
80108237:	89 f6                	mov    %esi,%esi
80108239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80108240:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
80108244:	83 e0 03             	and    $0x3,%eax
80108247:	66 83 f8 03          	cmp    $0x3,%ax
8010824b:	75 a8                	jne    801081f5 <trap+0xc5>
8010824d:	83 ec 0c             	sub    $0xc,%esp
80108250:	6a 00                	push   $0x0
80108252:	e8 0d d8 ff ff       	call   80105a64 <exit>
80108257:	83 c4 10             	add    $0x10,%esp
8010825a:	eb 99                	jmp    801081f5 <trap+0xc5>
8010825c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108260:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
80108264:	75 a3                	jne    80108209 <trap+0xd9>
80108266:	e8 84 d9 ff ff       	call   80105bef <yield>
8010826b:	eb 9c                	jmp    80108209 <trap+0xd9>
8010826d:	8d 76 00             	lea    0x0(%esi),%esi
80108270:	e8 d3 cf ff ff       	call   80105248 <cpuid>
80108275:	85 c0                	test   %eax,%eax
80108277:	0f 84 c3 00 00 00    	je     80108340 <trap+0x210>
8010827d:	e8 0e b1 ff ff       	call   80103390 <lapiceoi>
80108282:	e9 59 ff ff ff       	jmp    801081e0 <trap+0xb0>
80108287:	89 f6                	mov    %esi,%esi
80108289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80108290:	e8 bb af ff ff       	call   80103250 <kbdintr>
80108295:	e8 f6 b0 ff ff       	call   80103390 <lapiceoi>
8010829a:	e9 41 ff ff ff       	jmp    801081e0 <trap+0xb0>
8010829f:	90                   	nop
801082a0:	e8 8b 02 00 00       	call   80108530 <uartintr>
801082a5:	e8 e6 b0 ff ff       	call   80103390 <lapiceoi>
801082aa:	e9 31 ff ff ff       	jmp    801081e0 <trap+0xb0>
801082af:	90                   	nop
801082b0:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
801082b4:	8b 77 38             	mov    0x38(%edi),%esi
801082b7:	e8 8c cf ff ff       	call   80105248 <cpuid>
801082bc:	56                   	push   %esi
801082bd:	53                   	push   %ebx
801082be:	50                   	push   %eax
801082bf:	68 20 f2 10 80       	push   $0x8010f220
801082c4:	e8 97 83 ff ff       	call   80100660 <cprintf>
801082c9:	e8 c2 b0 ff ff       	call   80103390 <lapiceoi>
801082ce:	83 c4 10             	add    $0x10,%esp
801082d1:	e9 0a ff ff ff       	jmp    801081e0 <trap+0xb0>
801082d6:	8d 76 00             	lea    0x0(%esi),%esi
801082d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801082e0:	e8 8b a7 ff ff       	call   80102a70 <ideintr>
801082e5:	eb 96                	jmp    8010827d <trap+0x14d>
801082e7:	89 f6                	mov    %esi,%esi
801082e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801082f0:	e8 6e cf ff ff       	call   80105263 <myproc>
801082f5:	8b 58 44             	mov    0x44(%eax),%ebx
801082f8:	85 db                	test   %ebx,%ebx
801082fa:	75 34                	jne    80108330 <trap+0x200>
801082fc:	e8 62 cf ff ff       	call   80105263 <myproc>
80108301:	89 78 38             	mov    %edi,0x38(%eax)
80108304:	e8 27 e5 ff ff       	call   80106830 <syscall>
80108309:	e8 55 cf ff ff       	call   80105263 <myproc>
8010830e:	8b 48 44             	mov    0x44(%eax),%ecx
80108311:	85 c9                	test   %ecx,%ecx
80108313:	0f 84 16 ff ff ff    	je     8010822f <trap+0xff>
80108319:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
80108320:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108323:	5b                   	pop    %ebx
80108324:	5e                   	pop    %esi
80108325:	5f                   	pop    %edi
80108326:	5d                   	pop    %ebp
80108327:	e9 38 d7 ff ff       	jmp    80105a64 <exit>
8010832c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108330:	83 ec 0c             	sub    $0xc,%esp
80108333:	6a 00                	push   $0x0
80108335:	e8 2a d7 ff ff       	call   80105a64 <exit>
8010833a:	83 c4 10             	add    $0x10,%esp
8010833d:	eb bd                	jmp    801082fc <trap+0x1cc>
8010833f:	90                   	nop
80108340:	83 ec 0c             	sub    $0xc,%esp
80108343:	68 c0 bb 13 80       	push   $0x8013bbc0
80108348:	e8 23 df ff ff       	call   80106270 <acquire>
8010834d:	c7 04 24 00 c4 13 80 	movl   $0x8013c400,(%esp)
80108354:	83 05 00 c4 13 80 01 	addl   $0x1,0x8013c400
8010835b:	e8 8e da ff ff       	call   80105dee <wakeup>
80108360:	c7 04 24 c0 bb 13 80 	movl   $0x8013bbc0,(%esp)
80108367:	e8 24 e0 ff ff       	call   80106390 <release>
8010836c:	83 c4 10             	add    $0x10,%esp
8010836f:	e9 09 ff ff ff       	jmp    8010827d <trap+0x14d>
80108374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80108378:	e8 b7 dc ff ff       	call   80106034 <proc_get_cgroup>
8010837d:	83 ec 0c             	sub    $0xc,%esp
80108380:	50                   	push   %eax
80108381:	e8 1a 60 00 00       	call   8010e3a0 <cgroup_mem_stat_pgfault_incr>
80108386:	83 c4 10             	add    $0x10,%esp
80108389:	e9 41 fe ff ff       	jmp    801081cf <trap+0x9f>
8010838e:	0f 20 d6             	mov    %cr2,%esi
80108391:	8b 5f 38             	mov    0x38(%edi),%ebx
80108394:	e8 af ce ff ff       	call   80105248 <cpuid>
80108399:	83 ec 0c             	sub    $0xc,%esp
8010839c:	56                   	push   %esi
8010839d:	53                   	push   %ebx
8010839e:	50                   	push   %eax
8010839f:	ff 77 30             	pushl  0x30(%edi)
801083a2:	68 44 f2 10 80       	push   $0x8010f244
801083a7:	e8 b4 82 ff ff       	call   80100660 <cprintf>
801083ac:	83 c4 14             	add    $0x14,%esp
801083af:	68 18 f2 10 80       	push   $0x8010f218
801083b4:	e8 17 80 ff ff       	call   801003d0 <panic>
801083b9:	66 90                	xchg   %ax,%ax
801083bb:	66 90                	xchg   %ax,%ax
801083bd:	66 90                	xchg   %ax,%ax
801083bf:	90                   	nop

801083c0 <uartgetc>:
801083c0:	a1 bc 05 12 80       	mov    0x801205bc,%eax
801083c5:	55                   	push   %ebp
801083c6:	89 e5                	mov    %esp,%ebp
801083c8:	85 c0                	test   %eax,%eax
801083ca:	74 1c                	je     801083e8 <uartgetc+0x28>
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801083cc:	ba fd 03 00 00       	mov    $0x3fd,%edx
801083d1:	ec                   	in     (%dx),%al
801083d2:	a8 01                	test   $0x1,%al
801083d4:	74 12                	je     801083e8 <uartgetc+0x28>
801083d6:	ba f8 03 00 00       	mov    $0x3f8,%edx
801083db:	ec                   	in     (%dx),%al
801083dc:	0f b6 c0             	movzbl %al,%eax
801083df:	5d                   	pop    %ebp
801083e0:	c3                   	ret    
801083e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801083e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801083ed:	5d                   	pop    %ebp
801083ee:	c3                   	ret    
801083ef:	90                   	nop

801083f0 <uartputc.part.0>:
801083f0:	55                   	push   %ebp
801083f1:	89 e5                	mov    %esp,%ebp
801083f3:	57                   	push   %edi
801083f4:	56                   	push   %esi
801083f5:	53                   	push   %ebx
801083f6:	89 c7                	mov    %eax,%edi
801083f8:	bb 80 00 00 00       	mov    $0x80,%ebx
801083fd:	be fd 03 00 00       	mov    $0x3fd,%esi
80108402:	83 ec 0c             	sub    $0xc,%esp
80108405:	eb 1b                	jmp    80108422 <uartputc.part.0+0x32>
80108407:	89 f6                	mov    %esi,%esi
80108409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80108410:	83 ec 0c             	sub    $0xc,%esp
80108413:	6a 0a                	push   $0xa
80108415:	e8 96 af ff ff       	call   801033b0 <microdelay>
8010841a:	83 c4 10             	add    $0x10,%esp
8010841d:	83 eb 01             	sub    $0x1,%ebx
80108420:	74 07                	je     80108429 <uartputc.part.0+0x39>
80108422:	89 f2                	mov    %esi,%edx
80108424:	ec                   	in     (%dx),%al
80108425:	a8 20                	test   $0x20,%al
80108427:	74 e7                	je     80108410 <uartputc.part.0+0x20>
}

static inline void
outb(ushort port, uchar data)
{
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80108429:	ba f8 03 00 00       	mov    $0x3f8,%edx
8010842e:	89 f8                	mov    %edi,%eax
80108430:	ee                   	out    %al,(%dx)
80108431:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108434:	5b                   	pop    %ebx
80108435:	5e                   	pop    %esi
80108436:	5f                   	pop    %edi
80108437:	5d                   	pop    %ebp
80108438:	c3                   	ret    
80108439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80108440 <uartinit>:
80108440:	55                   	push   %ebp
80108441:	31 c9                	xor    %ecx,%ecx
80108443:	89 c8                	mov    %ecx,%eax
80108445:	89 e5                	mov    %esp,%ebp
80108447:	57                   	push   %edi
80108448:	56                   	push   %esi
80108449:	53                   	push   %ebx
8010844a:	bb fa 03 00 00       	mov    $0x3fa,%ebx
8010844f:	89 da                	mov    %ebx,%edx
80108451:	83 ec 0c             	sub    $0xc,%esp
80108454:	ee                   	out    %al,(%dx)
80108455:	bf fb 03 00 00       	mov    $0x3fb,%edi
8010845a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
8010845f:	89 fa                	mov    %edi,%edx
80108461:	ee                   	out    %al,(%dx)
80108462:	b8 0c 00 00 00       	mov    $0xc,%eax
80108467:	ba f8 03 00 00       	mov    $0x3f8,%edx
8010846c:	ee                   	out    %al,(%dx)
8010846d:	be f9 03 00 00       	mov    $0x3f9,%esi
80108472:	89 c8                	mov    %ecx,%eax
80108474:	89 f2                	mov    %esi,%edx
80108476:	ee                   	out    %al,(%dx)
80108477:	b8 03 00 00 00       	mov    $0x3,%eax
8010847c:	89 fa                	mov    %edi,%edx
8010847e:	ee                   	out    %al,(%dx)
8010847f:	ba fc 03 00 00       	mov    $0x3fc,%edx
80108484:	89 c8                	mov    %ecx,%eax
80108486:	ee                   	out    %al,(%dx)
80108487:	b8 01 00 00 00       	mov    $0x1,%eax
8010848c:	89 f2                	mov    %esi,%edx
8010848e:	ee                   	out    %al,(%dx)
static inline uchar
inb(ushort port)
{
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010848f:	ba fd 03 00 00       	mov    $0x3fd,%edx
80108494:	ec                   	in     (%dx),%al
80108495:	3c ff                	cmp    $0xff,%al
80108497:	74 5a                	je     801084f3 <uartinit+0xb3>
80108499:	c7 05 bc 05 12 80 01 	movl   $0x1,0x801205bc
801084a0:	00 00 00 
801084a3:	89 da                	mov    %ebx,%edx
801084a5:	ec                   	in     (%dx),%al
801084a6:	ba f8 03 00 00       	mov    $0x3f8,%edx
801084ab:	ec                   	in     (%dx),%al
801084ac:	83 ec 08             	sub    $0x8,%esp
801084af:	bb 3c f3 10 80       	mov    $0x8010f33c,%ebx
801084b4:	6a 00                	push   $0x0
801084b6:	6a 04                	push   $0x4
801084b8:	e8 03 a8 ff ff       	call   80102cc0 <ioapicenable>
801084bd:	83 c4 10             	add    $0x10,%esp
801084c0:	b8 78 00 00 00       	mov    $0x78,%eax
801084c5:	eb 13                	jmp    801084da <uartinit+0x9a>
801084c7:	89 f6                	mov    %esi,%esi
801084c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
801084d0:	83 c3 01             	add    $0x1,%ebx
801084d3:	0f be 03             	movsbl (%ebx),%eax
801084d6:	84 c0                	test   %al,%al
801084d8:	74 19                	je     801084f3 <uartinit+0xb3>
801084da:	8b 15 bc 05 12 80    	mov    0x801205bc,%edx
801084e0:	85 d2                	test   %edx,%edx
801084e2:	74 ec                	je     801084d0 <uartinit+0x90>
801084e4:	83 c3 01             	add    $0x1,%ebx
801084e7:	e8 04 ff ff ff       	call   801083f0 <uartputc.part.0>
801084ec:	0f be 03             	movsbl (%ebx),%eax
801084ef:	84 c0                	test   %al,%al
801084f1:	75 e7                	jne    801084da <uartinit+0x9a>
801084f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
801084f6:	5b                   	pop    %ebx
801084f7:	5e                   	pop    %esi
801084f8:	5f                   	pop    %edi
801084f9:	5d                   	pop    %ebp
801084fa:	c3                   	ret    
801084fb:	90                   	nop
801084fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80108500 <uartputc>:
80108500:	8b 15 bc 05 12 80    	mov    0x801205bc,%edx
80108506:	55                   	push   %ebp
80108507:	89 e5                	mov    %esp,%ebp
80108509:	85 d2                	test   %edx,%edx
8010850b:	8b 45 08             	mov    0x8(%ebp),%eax
8010850e:	74 10                	je     80108520 <uartputc+0x20>
80108510:	5d                   	pop    %ebp
80108511:	e9 da fe ff ff       	jmp    801083f0 <uartputc.part.0>
80108516:	8d 76 00             	lea    0x0(%esi),%esi
80108519:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80108520:	5d                   	pop    %ebp
80108521:	c3                   	ret    
80108522:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80108529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80108530 <uartintr>:
80108530:	55                   	push   %ebp
80108531:	89 e5                	mov    %esp,%ebp
80108533:	83 ec 14             	sub    $0x14,%esp
80108536:	68 c0 83 10 80       	push   $0x801083c0
8010853b:	e8 00 83 ff ff       	call   80100840 <consoleintr>
80108540:	83 c4 10             	add    $0x10,%esp
80108543:	c9                   	leave  
80108544:	c3                   	ret    

80108545 <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
80108545:	6a 00                	push   $0x0
  pushl $0
80108547:	6a 00                	push   $0x0
  jmp alltraps
80108549:	e9 eb fa ff ff       	jmp    80108039 <alltraps>

8010854e <vector1>:
.globl vector1
vector1:
  pushl $0
8010854e:	6a 00                	push   $0x0
  pushl $1
80108550:	6a 01                	push   $0x1
  jmp alltraps
80108552:	e9 e2 fa ff ff       	jmp    80108039 <alltraps>

80108557 <vector2>:
.globl vector2
vector2:
  pushl $0
80108557:	6a 00                	push   $0x0
  pushl $2
80108559:	6a 02                	push   $0x2
  jmp alltraps
8010855b:	e9 d9 fa ff ff       	jmp    80108039 <alltraps>

80108560 <vector3>:
.globl vector3
vector3:
  pushl $0
80108560:	6a 00                	push   $0x0
  pushl $3
80108562:	6a 03                	push   $0x3
  jmp alltraps
80108564:	e9 d0 fa ff ff       	jmp    80108039 <alltraps>

80108569 <vector4>:
.globl vector4
vector4:
  pushl $0
80108569:	6a 00                	push   $0x0
  pushl $4
8010856b:	6a 04                	push   $0x4
  jmp alltraps
8010856d:	e9 c7 fa ff ff       	jmp    80108039 <alltraps>

80108572 <vector5>:
.globl vector5
vector5:
  pushl $0
80108572:	6a 00                	push   $0x0
  pushl $5
80108574:	6a 05                	push   $0x5
  jmp alltraps
80108576:	e9 be fa ff ff       	jmp    80108039 <alltraps>

8010857b <vector6>:
.globl vector6
vector6:
  pushl $0
8010857b:	6a 00                	push   $0x0
  pushl $6
8010857d:	6a 06                	push   $0x6
  jmp alltraps
8010857f:	e9 b5 fa ff ff       	jmp    80108039 <alltraps>

80108584 <vector7>:
.globl vector7
vector7:
  pushl $0
80108584:	6a 00                	push   $0x0
  pushl $7
80108586:	6a 07                	push   $0x7
  jmp alltraps
80108588:	e9 ac fa ff ff       	jmp    80108039 <alltraps>

8010858d <vector8>:
.globl vector8
vector8:
  pushl $8
8010858d:	6a 08                	push   $0x8
  jmp alltraps
8010858f:	e9 a5 fa ff ff       	jmp    80108039 <alltraps>

80108594 <vector9>:
.globl vector9
vector9:
  pushl $0
80108594:	6a 00                	push   $0x0
  pushl $9
80108596:	6a 09                	push   $0x9
  jmp alltraps
80108598:	e9 9c fa ff ff       	jmp    80108039 <alltraps>

8010859d <vector10>:
.globl vector10
vector10:
  pushl $10
8010859d:	6a 0a                	push   $0xa
  jmp alltraps
8010859f:	e9 95 fa ff ff       	jmp    80108039 <alltraps>

801085a4 <vector11>:
.globl vector11
vector11:
  pushl $11
801085a4:	6a 0b                	push   $0xb
  jmp alltraps
801085a6:	e9 8e fa ff ff       	jmp    80108039 <alltraps>

801085ab <vector12>:
.globl vector12
vector12:
  pushl $12
801085ab:	6a 0c                	push   $0xc
  jmp alltraps
801085ad:	e9 87 fa ff ff       	jmp    80108039 <alltraps>

801085b2 <vector13>:
.globl vector13
vector13:
  pushl $13
801085b2:	6a 0d                	push   $0xd
  jmp alltraps
801085b4:	e9 80 fa ff ff       	jmp    80108039 <alltraps>

801085b9 <vector14>:
.globl vector14
vector14:
  pushl $14
801085b9:	6a 0e                	push   $0xe
  jmp alltraps
801085bb:	e9 79 fa ff ff       	jmp    80108039 <alltraps>

801085c0 <vector15>:
.globl vector15
vector15:
  pushl $0
801085c0:	6a 00                	push   $0x0
  pushl $15
801085c2:	6a 0f                	push   $0xf
  jmp alltraps
801085c4:	e9 70 fa ff ff       	jmp    80108039 <alltraps>

801085c9 <vector16>:
.globl vector16
vector16:
  pushl $0
801085c9:	6a 00                	push   $0x0
  pushl $16
801085cb:	6a 10                	push   $0x10
  jmp alltraps
801085cd:	e9 67 fa ff ff       	jmp    80108039 <alltraps>

801085d2 <vector17>:
.globl vector17
vector17:
  pushl $17
801085d2:	6a 11                	push   $0x11
  jmp alltraps
801085d4:	e9 60 fa ff ff       	jmp    80108039 <alltraps>

801085d9 <vector18>:
.globl vector18
vector18:
  pushl $0
801085d9:	6a 00                	push   $0x0
  pushl $18
801085db:	6a 12                	push   $0x12
  jmp alltraps
801085dd:	e9 57 fa ff ff       	jmp    80108039 <alltraps>

801085e2 <vector19>:
.globl vector19
vector19:
  pushl $0
801085e2:	6a 00                	push   $0x0
  pushl $19
801085e4:	6a 13                	push   $0x13
  jmp alltraps
801085e6:	e9 4e fa ff ff       	jmp    80108039 <alltraps>

801085eb <vector20>:
.globl vector20
vector20:
  pushl $0
801085eb:	6a 00                	push   $0x0
  pushl $20
801085ed:	6a 14                	push   $0x14
  jmp alltraps
801085ef:	e9 45 fa ff ff       	jmp    80108039 <alltraps>

801085f4 <vector21>:
.globl vector21
vector21:
  pushl $0
801085f4:	6a 00                	push   $0x0
  pushl $21
801085f6:	6a 15                	push   $0x15
  jmp alltraps
801085f8:	e9 3c fa ff ff       	jmp    80108039 <alltraps>

801085fd <vector22>:
.globl vector22
vector22:
  pushl $0
801085fd:	6a 00                	push   $0x0
  pushl $22
801085ff:	6a 16                	push   $0x16
  jmp alltraps
80108601:	e9 33 fa ff ff       	jmp    80108039 <alltraps>

80108606 <vector23>:
.globl vector23
vector23:
  pushl $0
80108606:	6a 00                	push   $0x0
  pushl $23
80108608:	6a 17                	push   $0x17
  jmp alltraps
8010860a:	e9 2a fa ff ff       	jmp    80108039 <alltraps>

8010860f <vector24>:
.globl vector24
vector24:
  pushl $0
8010860f:	6a 00                	push   $0x0
  pushl $24
80108611:	6a 18                	push   $0x18
  jmp alltraps
80108613:	e9 21 fa ff ff       	jmp    80108039 <alltraps>

80108618 <vector25>:
.globl vector25
vector25:
  pushl $0
80108618:	6a 00                	push   $0x0
  pushl $25
8010861a:	6a 19                	push   $0x19
  jmp alltraps
8010861c:	e9 18 fa ff ff       	jmp    80108039 <alltraps>

80108621 <vector26>:
.globl vector26
vector26:
  pushl $0
80108621:	6a 00                	push   $0x0
  pushl $26
80108623:	6a 1a                	push   $0x1a
  jmp alltraps
80108625:	e9 0f fa ff ff       	jmp    80108039 <alltraps>

8010862a <vector27>:
.globl vector27
vector27:
  pushl $0
8010862a:	6a 00                	push   $0x0
  pushl $27
8010862c:	6a 1b                	push   $0x1b
  jmp alltraps
8010862e:	e9 06 fa ff ff       	jmp    80108039 <alltraps>

80108633 <vector28>:
.globl vector28
vector28:
  pushl $0
80108633:	6a 00                	push   $0x0
  pushl $28
80108635:	6a 1c                	push   $0x1c
  jmp alltraps
80108637:	e9 fd f9 ff ff       	jmp    80108039 <alltraps>

8010863c <vector29>:
.globl vector29
vector29:
  pushl $0
8010863c:	6a 00                	push   $0x0
  pushl $29
8010863e:	6a 1d                	push   $0x1d
  jmp alltraps
80108640:	e9 f4 f9 ff ff       	jmp    80108039 <alltraps>

80108645 <vector30>:
.globl vector30
vector30:
  pushl $0
80108645:	6a 00                	push   $0x0
  pushl $30
80108647:	6a 1e                	push   $0x1e
  jmp alltraps
80108649:	e9 eb f9 ff ff       	jmp    80108039 <alltraps>

8010864e <vector31>:
.globl vector31
vector31:
  pushl $0
8010864e:	6a 00                	push   $0x0
  pushl $31
80108650:	6a 1f                	push   $0x1f
  jmp alltraps
80108652:	e9 e2 f9 ff ff       	jmp    80108039 <alltraps>

80108657 <vector32>:
.globl vector32
vector32:
  pushl $0
80108657:	6a 00                	push   $0x0
  pushl $32
80108659:	6a 20                	push   $0x20
  jmp alltraps
8010865b:	e9 d9 f9 ff ff       	jmp    80108039 <alltraps>

80108660 <vector33>:
.globl vector33
vector33:
  pushl $0
80108660:	6a 00                	push   $0x0
  pushl $33
80108662:	6a 21                	push   $0x21
  jmp alltraps
80108664:	e9 d0 f9 ff ff       	jmp    80108039 <alltraps>

80108669 <vector34>:
.globl vector34
vector34:
  pushl $0
80108669:	6a 00                	push   $0x0
  pushl $34
8010866b:	6a 22                	push   $0x22
  jmp alltraps
8010866d:	e9 c7 f9 ff ff       	jmp    80108039 <alltraps>

80108672 <vector35>:
.globl vector35
vector35:
  pushl $0
80108672:	6a 00                	push   $0x0
  pushl $35
80108674:	6a 23                	push   $0x23
  jmp alltraps
80108676:	e9 be f9 ff ff       	jmp    80108039 <alltraps>

8010867b <vector36>:
.globl vector36
vector36:
  pushl $0
8010867b:	6a 00                	push   $0x0
  pushl $36
8010867d:	6a 24                	push   $0x24
  jmp alltraps
8010867f:	e9 b5 f9 ff ff       	jmp    80108039 <alltraps>

80108684 <vector37>:
.globl vector37
vector37:
  pushl $0
80108684:	6a 00                	push   $0x0
  pushl $37
80108686:	6a 25                	push   $0x25
  jmp alltraps
80108688:	e9 ac f9 ff ff       	jmp    80108039 <alltraps>

8010868d <vector38>:
.globl vector38
vector38:
  pushl $0
8010868d:	6a 00                	push   $0x0
  pushl $38
8010868f:	6a 26                	push   $0x26
  jmp alltraps
80108691:	e9 a3 f9 ff ff       	jmp    80108039 <alltraps>

80108696 <vector39>:
.globl vector39
vector39:
  pushl $0
80108696:	6a 00                	push   $0x0
  pushl $39
80108698:	6a 27                	push   $0x27
  jmp alltraps
8010869a:	e9 9a f9 ff ff       	jmp    80108039 <alltraps>

8010869f <vector40>:
.globl vector40
vector40:
  pushl $0
8010869f:	6a 00                	push   $0x0
  pushl $40
801086a1:	6a 28                	push   $0x28
  jmp alltraps
801086a3:	e9 91 f9 ff ff       	jmp    80108039 <alltraps>

801086a8 <vector41>:
.globl vector41
vector41:
  pushl $0
801086a8:	6a 00                	push   $0x0
  pushl $41
801086aa:	6a 29                	push   $0x29
  jmp alltraps
801086ac:	e9 88 f9 ff ff       	jmp    80108039 <alltraps>

801086b1 <vector42>:
.globl vector42
vector42:
  pushl $0
801086b1:	6a 00                	push   $0x0
  pushl $42
801086b3:	6a 2a                	push   $0x2a
  jmp alltraps
801086b5:	e9 7f f9 ff ff       	jmp    80108039 <alltraps>

801086ba <vector43>:
.globl vector43
vector43:
  pushl $0
801086ba:	6a 00                	push   $0x0
  pushl $43
801086bc:	6a 2b                	push   $0x2b
  jmp alltraps
801086be:	e9 76 f9 ff ff       	jmp    80108039 <alltraps>

801086c3 <vector44>:
.globl vector44
vector44:
  pushl $0
801086c3:	6a 00                	push   $0x0
  pushl $44
801086c5:	6a 2c                	push   $0x2c
  jmp alltraps
801086c7:	e9 6d f9 ff ff       	jmp    80108039 <alltraps>

801086cc <vector45>:
.globl vector45
vector45:
  pushl $0
801086cc:	6a 00                	push   $0x0
  pushl $45
801086ce:	6a 2d                	push   $0x2d
  jmp alltraps
801086d0:	e9 64 f9 ff ff       	jmp    80108039 <alltraps>

801086d5 <vector46>:
.globl vector46
vector46:
  pushl $0
801086d5:	6a 00                	push   $0x0
  pushl $46
801086d7:	6a 2e                	push   $0x2e
  jmp alltraps
801086d9:	e9 5b f9 ff ff       	jmp    80108039 <alltraps>

801086de <vector47>:
.globl vector47
vector47:
  pushl $0
801086de:	6a 00                	push   $0x0
  pushl $47
801086e0:	6a 2f                	push   $0x2f
  jmp alltraps
801086e2:	e9 52 f9 ff ff       	jmp    80108039 <alltraps>

801086e7 <vector48>:
.globl vector48
vector48:
  pushl $0
801086e7:	6a 00                	push   $0x0
  pushl $48
801086e9:	6a 30                	push   $0x30
  jmp alltraps
801086eb:	e9 49 f9 ff ff       	jmp    80108039 <alltraps>

801086f0 <vector49>:
.globl vector49
vector49:
  pushl $0
801086f0:	6a 00                	push   $0x0
  pushl $49
801086f2:	6a 31                	push   $0x31
  jmp alltraps
801086f4:	e9 40 f9 ff ff       	jmp    80108039 <alltraps>

801086f9 <vector50>:
.globl vector50
vector50:
  pushl $0
801086f9:	6a 00                	push   $0x0
  pushl $50
801086fb:	6a 32                	push   $0x32
  jmp alltraps
801086fd:	e9 37 f9 ff ff       	jmp    80108039 <alltraps>

80108702 <vector51>:
.globl vector51
vector51:
  pushl $0
80108702:	6a 00                	push   $0x0
  pushl $51
80108704:	6a 33                	push   $0x33
  jmp alltraps
80108706:	e9 2e f9 ff ff       	jmp    80108039 <alltraps>

8010870b <vector52>:
.globl vector52
vector52:
  pushl $0
8010870b:	6a 00                	push   $0x0
  pushl $52
8010870d:	6a 34                	push   $0x34
  jmp alltraps
8010870f:	e9 25 f9 ff ff       	jmp    80108039 <alltraps>

80108714 <vector53>:
.globl vector53
vector53:
  pushl $0
80108714:	6a 00                	push   $0x0
  pushl $53
80108716:	6a 35                	push   $0x35
  jmp alltraps
80108718:	e9 1c f9 ff ff       	jmp    80108039 <alltraps>

8010871d <vector54>:
.globl vector54
vector54:
  pushl $0
8010871d:	6a 00                	push   $0x0
  pushl $54
8010871f:	6a 36                	push   $0x36
  jmp alltraps
80108721:	e9 13 f9 ff ff       	jmp    80108039 <alltraps>

80108726 <vector55>:
.globl vector55
vector55:
  pushl $0
80108726:	6a 00                	push   $0x0
  pushl $55
80108728:	6a 37                	push   $0x37
  jmp alltraps
8010872a:	e9 0a f9 ff ff       	jmp    80108039 <alltraps>

8010872f <vector56>:
.globl vector56
vector56:
  pushl $0
8010872f:	6a 00                	push   $0x0
  pushl $56
80108731:	6a 38                	push   $0x38
  jmp alltraps
80108733:	e9 01 f9 ff ff       	jmp    80108039 <alltraps>

80108738 <vector57>:
.globl vector57
vector57:
  pushl $0
80108738:	6a 00                	push   $0x0
  pushl $57
8010873a:	6a 39                	push   $0x39
  jmp alltraps
8010873c:	e9 f8 f8 ff ff       	jmp    80108039 <alltraps>

80108741 <vector58>:
.globl vector58
vector58:
  pushl $0
80108741:	6a 00                	push   $0x0
  pushl $58
80108743:	6a 3a                	push   $0x3a
  jmp alltraps
80108745:	e9 ef f8 ff ff       	jmp    80108039 <alltraps>

8010874a <vector59>:
.globl vector59
vector59:
  pushl $0
8010874a:	6a 00                	push   $0x0
  pushl $59
8010874c:	6a 3b                	push   $0x3b
  jmp alltraps
8010874e:	e9 e6 f8 ff ff       	jmp    80108039 <alltraps>

80108753 <vector60>:
.globl vector60
vector60:
  pushl $0
80108753:	6a 00                	push   $0x0
  pushl $60
80108755:	6a 3c                	push   $0x3c
  jmp alltraps
80108757:	e9 dd f8 ff ff       	jmp    80108039 <alltraps>

8010875c <vector61>:
.globl vector61
vector61:
  pushl $0
8010875c:	6a 00                	push   $0x0
  pushl $61
8010875e:	6a 3d                	push   $0x3d
  jmp alltraps
80108760:	e9 d4 f8 ff ff       	jmp    80108039 <alltraps>

80108765 <vector62>:
.globl vector62
vector62:
  pushl $0
80108765:	6a 00                	push   $0x0
  pushl $62
80108767:	6a 3e                	push   $0x3e
  jmp alltraps
80108769:	e9 cb f8 ff ff       	jmp    80108039 <alltraps>

8010876e <vector63>:
.globl vector63
vector63:
  pushl $0
8010876e:	6a 00                	push   $0x0
  pushl $63
80108770:	6a 3f                	push   $0x3f
  jmp alltraps
80108772:	e9 c2 f8 ff ff       	jmp    80108039 <alltraps>

80108777 <vector64>:
.globl vector64
vector64:
  pushl $0
80108777:	6a 00                	push   $0x0
  pushl $64
80108779:	6a 40                	push   $0x40
  jmp alltraps
8010877b:	e9 b9 f8 ff ff       	jmp    80108039 <alltraps>

80108780 <vector65>:
.globl vector65
vector65:
  pushl $0
80108780:	6a 00                	push   $0x0
  pushl $65
80108782:	6a 41                	push   $0x41
  jmp alltraps
80108784:	e9 b0 f8 ff ff       	jmp    80108039 <alltraps>

80108789 <vector66>:
.globl vector66
vector66:
  pushl $0
80108789:	6a 00                	push   $0x0
  pushl $66
8010878b:	6a 42                	push   $0x42
  jmp alltraps
8010878d:	e9 a7 f8 ff ff       	jmp    80108039 <alltraps>

80108792 <vector67>:
.globl vector67
vector67:
  pushl $0
80108792:	6a 00                	push   $0x0
  pushl $67
80108794:	6a 43                	push   $0x43
  jmp alltraps
80108796:	e9 9e f8 ff ff       	jmp    80108039 <alltraps>

8010879b <vector68>:
.globl vector68
vector68:
  pushl $0
8010879b:	6a 00                	push   $0x0
  pushl $68
8010879d:	6a 44                	push   $0x44
  jmp alltraps
8010879f:	e9 95 f8 ff ff       	jmp    80108039 <alltraps>

801087a4 <vector69>:
.globl vector69
vector69:
  pushl $0
801087a4:	6a 00                	push   $0x0
  pushl $69
801087a6:	6a 45                	push   $0x45
  jmp alltraps
801087a8:	e9 8c f8 ff ff       	jmp    80108039 <alltraps>

801087ad <vector70>:
.globl vector70
vector70:
  pushl $0
801087ad:	6a 00                	push   $0x0
  pushl $70
801087af:	6a 46                	push   $0x46
  jmp alltraps
801087b1:	e9 83 f8 ff ff       	jmp    80108039 <alltraps>

801087b6 <vector71>:
.globl vector71
vector71:
  pushl $0
801087b6:	6a 00                	push   $0x0
  pushl $71
801087b8:	6a 47                	push   $0x47
  jmp alltraps
801087ba:	e9 7a f8 ff ff       	jmp    80108039 <alltraps>

801087bf <vector72>:
.globl vector72
vector72:
  pushl $0
801087bf:	6a 00                	push   $0x0
  pushl $72
801087c1:	6a 48                	push   $0x48
  jmp alltraps
801087c3:	e9 71 f8 ff ff       	jmp    80108039 <alltraps>

801087c8 <vector73>:
.globl vector73
vector73:
  pushl $0
801087c8:	6a 00                	push   $0x0
  pushl $73
801087ca:	6a 49                	push   $0x49
  jmp alltraps
801087cc:	e9 68 f8 ff ff       	jmp    80108039 <alltraps>

801087d1 <vector74>:
.globl vector74
vector74:
  pushl $0
801087d1:	6a 00                	push   $0x0
  pushl $74
801087d3:	6a 4a                	push   $0x4a
  jmp alltraps
801087d5:	e9 5f f8 ff ff       	jmp    80108039 <alltraps>

801087da <vector75>:
.globl vector75
vector75:
  pushl $0
801087da:	6a 00                	push   $0x0
  pushl $75
801087dc:	6a 4b                	push   $0x4b
  jmp alltraps
801087de:	e9 56 f8 ff ff       	jmp    80108039 <alltraps>

801087e3 <vector76>:
.globl vector76
vector76:
  pushl $0
801087e3:	6a 00                	push   $0x0
  pushl $76
801087e5:	6a 4c                	push   $0x4c
  jmp alltraps
801087e7:	e9 4d f8 ff ff       	jmp    80108039 <alltraps>

801087ec <vector77>:
.globl vector77
vector77:
  pushl $0
801087ec:	6a 00                	push   $0x0
  pushl $77
801087ee:	6a 4d                	push   $0x4d
  jmp alltraps
801087f0:	e9 44 f8 ff ff       	jmp    80108039 <alltraps>

801087f5 <vector78>:
.globl vector78
vector78:
  pushl $0
801087f5:	6a 00                	push   $0x0
  pushl $78
801087f7:	6a 4e                	push   $0x4e
  jmp alltraps
801087f9:	e9 3b f8 ff ff       	jmp    80108039 <alltraps>

801087fe <vector79>:
.globl vector79
vector79:
  pushl $0
801087fe:	6a 00                	push   $0x0
  pushl $79
80108800:	6a 4f                	push   $0x4f
  jmp alltraps
80108802:	e9 32 f8 ff ff       	jmp    80108039 <alltraps>

80108807 <vector80>:
.globl vector80
vector80:
  pushl $0
80108807:	6a 00                	push   $0x0
  pushl $80
80108809:	6a 50                	push   $0x50
  jmp alltraps
8010880b:	e9 29 f8 ff ff       	jmp    80108039 <alltraps>

80108810 <vector81>:
.globl vector81
vector81:
  pushl $0
80108810:	6a 00                	push   $0x0
  pushl $81
80108812:	6a 51                	push   $0x51
  jmp alltraps
80108814:	e9 20 f8 ff ff       	jmp    80108039 <alltraps>

80108819 <vector82>:
.globl vector82
vector82:
  pushl $0
80108819:	6a 00                	push   $0x0
  pushl $82
8010881b:	6a 52                	push   $0x52
  jmp alltraps
8010881d:	e9 17 f8 ff ff       	jmp    80108039 <alltraps>

80108822 <vector83>:
.globl vector83
vector83:
  pushl $0
80108822:	6a 00                	push   $0x0
  pushl $83
80108824:	6a 53                	push   $0x53
  jmp alltraps
80108826:	e9 0e f8 ff ff       	jmp    80108039 <alltraps>

8010882b <vector84>:
.globl vector84
vector84:
  pushl $0
8010882b:	6a 00                	push   $0x0
  pushl $84
8010882d:	6a 54                	push   $0x54
  jmp alltraps
8010882f:	e9 05 f8 ff ff       	jmp    80108039 <alltraps>

80108834 <vector85>:
.globl vector85
vector85:
  pushl $0
80108834:	6a 00                	push   $0x0
  pushl $85
80108836:	6a 55                	push   $0x55
  jmp alltraps
80108838:	e9 fc f7 ff ff       	jmp    80108039 <alltraps>

8010883d <vector86>:
.globl vector86
vector86:
  pushl $0
8010883d:	6a 00                	push   $0x0
  pushl $86
8010883f:	6a 56                	push   $0x56
  jmp alltraps
80108841:	e9 f3 f7 ff ff       	jmp    80108039 <alltraps>

80108846 <vector87>:
.globl vector87
vector87:
  pushl $0
80108846:	6a 00                	push   $0x0
  pushl $87
80108848:	6a 57                	push   $0x57
  jmp alltraps
8010884a:	e9 ea f7 ff ff       	jmp    80108039 <alltraps>

8010884f <vector88>:
.globl vector88
vector88:
  pushl $0
8010884f:	6a 00                	push   $0x0
  pushl $88
80108851:	6a 58                	push   $0x58
  jmp alltraps
80108853:	e9 e1 f7 ff ff       	jmp    80108039 <alltraps>

80108858 <vector89>:
.globl vector89
vector89:
  pushl $0
80108858:	6a 00                	push   $0x0
  pushl $89
8010885a:	6a 59                	push   $0x59
  jmp alltraps
8010885c:	e9 d8 f7 ff ff       	jmp    80108039 <alltraps>

80108861 <vector90>:
.globl vector90
vector90:
  pushl $0
80108861:	6a 00                	push   $0x0
  pushl $90
80108863:	6a 5a                	push   $0x5a
  jmp alltraps
80108865:	e9 cf f7 ff ff       	jmp    80108039 <alltraps>

8010886a <vector91>:
.globl vector91
vector91:
  pushl $0
8010886a:	6a 00                	push   $0x0
  pushl $91
8010886c:	6a 5b                	push   $0x5b
  jmp alltraps
8010886e:	e9 c6 f7 ff ff       	jmp    80108039 <alltraps>

80108873 <vector92>:
.globl vector92
vector92:
  pushl $0
80108873:	6a 00                	push   $0x0
  pushl $92
80108875:	6a 5c                	push   $0x5c
  jmp alltraps
80108877:	e9 bd f7 ff ff       	jmp    80108039 <alltraps>

8010887c <vector93>:
.globl vector93
vector93:
  pushl $0
8010887c:	6a 00                	push   $0x0
  pushl $93
8010887e:	6a 5d                	push   $0x5d
  jmp alltraps
80108880:	e9 b4 f7 ff ff       	jmp    80108039 <alltraps>

80108885 <vector94>:
.globl vector94
vector94:
  pushl $0
80108885:	6a 00                	push   $0x0
  pushl $94
80108887:	6a 5e                	push   $0x5e
  jmp alltraps
80108889:	e9 ab f7 ff ff       	jmp    80108039 <alltraps>

8010888e <vector95>:
.globl vector95
vector95:
  pushl $0
8010888e:	6a 00                	push   $0x0
  pushl $95
80108890:	6a 5f                	push   $0x5f
  jmp alltraps
80108892:	e9 a2 f7 ff ff       	jmp    80108039 <alltraps>

80108897 <vector96>:
.globl vector96
vector96:
  pushl $0
80108897:	6a 00                	push   $0x0
  pushl $96
80108899:	6a 60                	push   $0x60
  jmp alltraps
8010889b:	e9 99 f7 ff ff       	jmp    80108039 <alltraps>

801088a0 <vector97>:
.globl vector97
vector97:
  pushl $0
801088a0:	6a 00                	push   $0x0
  pushl $97
801088a2:	6a 61                	push   $0x61
  jmp alltraps
801088a4:	e9 90 f7 ff ff       	jmp    80108039 <alltraps>

801088a9 <vector98>:
.globl vector98
vector98:
  pushl $0
801088a9:	6a 00                	push   $0x0
  pushl $98
801088ab:	6a 62                	push   $0x62
  jmp alltraps
801088ad:	e9 87 f7 ff ff       	jmp    80108039 <alltraps>

801088b2 <vector99>:
.globl vector99
vector99:
  pushl $0
801088b2:	6a 00                	push   $0x0
  pushl $99
801088b4:	6a 63                	push   $0x63
  jmp alltraps
801088b6:	e9 7e f7 ff ff       	jmp    80108039 <alltraps>

801088bb <vector100>:
.globl vector100
vector100:
  pushl $0
801088bb:	6a 00                	push   $0x0
  pushl $100
801088bd:	6a 64                	push   $0x64
  jmp alltraps
801088bf:	e9 75 f7 ff ff       	jmp    80108039 <alltraps>

801088c4 <vector101>:
.globl vector101
vector101:
  pushl $0
801088c4:	6a 00                	push   $0x0
  pushl $101
801088c6:	6a 65                	push   $0x65
  jmp alltraps
801088c8:	e9 6c f7 ff ff       	jmp    80108039 <alltraps>

801088cd <vector102>:
.globl vector102
vector102:
  pushl $0
801088cd:	6a 00                	push   $0x0
  pushl $102
801088cf:	6a 66                	push   $0x66
  jmp alltraps
801088d1:	e9 63 f7 ff ff       	jmp    80108039 <alltraps>

801088d6 <vector103>:
.globl vector103
vector103:
  pushl $0
801088d6:	6a 00                	push   $0x0
  pushl $103
801088d8:	6a 67                	push   $0x67
  jmp alltraps
801088da:	e9 5a f7 ff ff       	jmp    80108039 <alltraps>

801088df <vector104>:
.globl vector104
vector104:
  pushl $0
801088df:	6a 00                	push   $0x0
  pushl $104
801088e1:	6a 68                	push   $0x68
  jmp alltraps
801088e3:	e9 51 f7 ff ff       	jmp    80108039 <alltraps>

801088e8 <vector105>:
.globl vector105
vector105:
  pushl $0
801088e8:	6a 00                	push   $0x0
  pushl $105
801088ea:	6a 69                	push   $0x69
  jmp alltraps
801088ec:	e9 48 f7 ff ff       	jmp    80108039 <alltraps>

801088f1 <vector106>:
.globl vector106
vector106:
  pushl $0
801088f1:	6a 00                	push   $0x0
  pushl $106
801088f3:	6a 6a                	push   $0x6a
  jmp alltraps
801088f5:	e9 3f f7 ff ff       	jmp    80108039 <alltraps>

801088fa <vector107>:
.globl vector107
vector107:
  pushl $0
801088fa:	6a 00                	push   $0x0
  pushl $107
801088fc:	6a 6b                	push   $0x6b
  jmp alltraps
801088fe:	e9 36 f7 ff ff       	jmp    80108039 <alltraps>

80108903 <vector108>:
.globl vector108
vector108:
  pushl $0
80108903:	6a 00                	push   $0x0
  pushl $108
80108905:	6a 6c                	push   $0x6c
  jmp alltraps
80108907:	e9 2d f7 ff ff       	jmp    80108039 <alltraps>

8010890c <vector109>:
.globl vector109
vector109:
  pushl $0
8010890c:	6a 00                	push   $0x0
  pushl $109
8010890e:	6a 6d                	push   $0x6d
  jmp alltraps
80108910:	e9 24 f7 ff ff       	jmp    80108039 <alltraps>

80108915 <vector110>:
.globl vector110
vector110:
  pushl $0
80108915:	6a 00                	push   $0x0
  pushl $110
80108917:	6a 6e                	push   $0x6e
  jmp alltraps
80108919:	e9 1b f7 ff ff       	jmp    80108039 <alltraps>

8010891e <vector111>:
.globl vector111
vector111:
  pushl $0
8010891e:	6a 00                	push   $0x0
  pushl $111
80108920:	6a 6f                	push   $0x6f
  jmp alltraps
80108922:	e9 12 f7 ff ff       	jmp    80108039 <alltraps>

80108927 <vector112>:
.globl vector112
vector112:
  pushl $0
80108927:	6a 00                	push   $0x0
  pushl $112
80108929:	6a 70                	push   $0x70
  jmp alltraps
8010892b:	e9 09 f7 ff ff       	jmp    80108039 <alltraps>

80108930 <vector113>:
.globl vector113
vector113:
  pushl $0
80108930:	6a 00                	push   $0x0
  pushl $113
80108932:	6a 71                	push   $0x71
  jmp alltraps
80108934:	e9 00 f7 ff ff       	jmp    80108039 <alltraps>

80108939 <vector114>:
.globl vector114
vector114:
  pushl $0
80108939:	6a 00                	push   $0x0
  pushl $114
8010893b:	6a 72                	push   $0x72
  jmp alltraps
8010893d:	e9 f7 f6 ff ff       	jmp    80108039 <alltraps>

80108942 <vector115>:
.globl vector115
vector115:
  pushl $0
80108942:	6a 00                	push   $0x0
  pushl $115
80108944:	6a 73                	push   $0x73
  jmp alltraps
80108946:	e9 ee f6 ff ff       	jmp    80108039 <alltraps>

8010894b <vector116>:
.globl vector116
vector116:
  pushl $0
8010894b:	6a 00                	push   $0x0
  pushl $116
8010894d:	6a 74                	push   $0x74
  jmp alltraps
8010894f:	e9 e5 f6 ff ff       	jmp    80108039 <alltraps>

80108954 <vector117>:
.globl vector117
vector117:
  pushl $0
80108954:	6a 00                	push   $0x0
  pushl $117
80108956:	6a 75                	push   $0x75
  jmp alltraps
80108958:	e9 dc f6 ff ff       	jmp    80108039 <alltraps>

8010895d <vector118>:
.globl vector118
vector118:
  pushl $0
8010895d:	6a 00                	push   $0x0
  pushl $118
8010895f:	6a 76                	push   $0x76
  jmp alltraps
80108961:	e9 d3 f6 ff ff       	jmp    80108039 <alltraps>

80108966 <vector119>:
.globl vector119
vector119:
  pushl $0
80108966:	6a 00                	push   $0x0
  pushl $119
80108968:	6a 77                	push   $0x77
  jmp alltraps
8010896a:	e9 ca f6 ff ff       	jmp    80108039 <alltraps>

8010896f <vector120>:
.globl vector120
vector120:
  pushl $0
8010896f:	6a 00                	push   $0x0
  pushl $120
80108971:	6a 78                	push   $0x78
  jmp alltraps
80108973:	e9 c1 f6 ff ff       	jmp    80108039 <alltraps>

80108978 <vector121>:
.globl vector121
vector121:
  pushl $0
80108978:	6a 00                	push   $0x0
  pushl $121
8010897a:	6a 79                	push   $0x79
  jmp alltraps
8010897c:	e9 b8 f6 ff ff       	jmp    80108039 <alltraps>

80108981 <vector122>:
.globl vector122
vector122:
  pushl $0
80108981:	6a 00                	push   $0x0
  pushl $122
80108983:	6a 7a                	push   $0x7a
  jmp alltraps
80108985:	e9 af f6 ff ff       	jmp    80108039 <alltraps>

8010898a <vector123>:
.globl vector123
vector123:
  pushl $0
8010898a:	6a 00                	push   $0x0
  pushl $123
8010898c:	6a 7b                	push   $0x7b
  jmp alltraps
8010898e:	e9 a6 f6 ff ff       	jmp    80108039 <alltraps>

80108993 <vector124>:
.globl vector124
vector124:
  pushl $0
80108993:	6a 00                	push   $0x0
  pushl $124
80108995:	6a 7c                	push   $0x7c
  jmp alltraps
80108997:	e9 9d f6 ff ff       	jmp    80108039 <alltraps>

8010899c <vector125>:
.globl vector125
vector125:
  pushl $0
8010899c:	6a 00                	push   $0x0
  pushl $125
8010899e:	6a 7d                	push   $0x7d
  jmp alltraps
801089a0:	e9 94 f6 ff ff       	jmp    80108039 <alltraps>

801089a5 <vector126>:
.globl vector126
vector126:
  pushl $0
801089a5:	6a 00                	push   $0x0
  pushl $126
801089a7:	6a 7e                	push   $0x7e
  jmp alltraps
801089a9:	e9 8b f6 ff ff       	jmp    80108039 <alltraps>

801089ae <vector127>:
.globl vector127
vector127:
  pushl $0
801089ae:	6a 00                	push   $0x0
  pushl $127
801089b0:	6a 7f                	push   $0x7f
  jmp alltraps
801089b2:	e9 82 f6 ff ff       	jmp    80108039 <alltraps>

801089b7 <vector128>:
.globl vector128
vector128:
  pushl $0
801089b7:	6a 00                	push   $0x0
  pushl $128
801089b9:	68 80 00 00 00       	push   $0x80
  jmp alltraps
801089be:	e9 76 f6 ff ff       	jmp    80108039 <alltraps>

801089c3 <vector129>:
.globl vector129
vector129:
  pushl $0
801089c3:	6a 00                	push   $0x0
  pushl $129
801089c5:	68 81 00 00 00       	push   $0x81
  jmp alltraps
801089ca:	e9 6a f6 ff ff       	jmp    80108039 <alltraps>

801089cf <vector130>:
.globl vector130
vector130:
  pushl $0
801089cf:	6a 00                	push   $0x0
  pushl $130
801089d1:	68 82 00 00 00       	push   $0x82
  jmp alltraps
801089d6:	e9 5e f6 ff ff       	jmp    80108039 <alltraps>

801089db <vector131>:
.globl vector131
vector131:
  pushl $0
801089db:	6a 00                	push   $0x0
  pushl $131
801089dd:	68 83 00 00 00       	push   $0x83
  jmp alltraps
801089e2:	e9 52 f6 ff ff       	jmp    80108039 <alltraps>

801089e7 <vector132>:
.globl vector132
vector132:
  pushl $0
801089e7:	6a 00                	push   $0x0
  pushl $132
801089e9:	68 84 00 00 00       	push   $0x84
  jmp alltraps
801089ee:	e9 46 f6 ff ff       	jmp    80108039 <alltraps>

801089f3 <vector133>:
.globl vector133
vector133:
  pushl $0
801089f3:	6a 00                	push   $0x0
  pushl $133
801089f5:	68 85 00 00 00       	push   $0x85
  jmp alltraps
801089fa:	e9 3a f6 ff ff       	jmp    80108039 <alltraps>

801089ff <vector134>:
.globl vector134
vector134:
  pushl $0
801089ff:	6a 00                	push   $0x0
  pushl $134
80108a01:	68 86 00 00 00       	push   $0x86
  jmp alltraps
80108a06:	e9 2e f6 ff ff       	jmp    80108039 <alltraps>

80108a0b <vector135>:
.globl vector135
vector135:
  pushl $0
80108a0b:	6a 00                	push   $0x0
  pushl $135
80108a0d:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80108a12:	e9 22 f6 ff ff       	jmp    80108039 <alltraps>

80108a17 <vector136>:
.globl vector136
vector136:
  pushl $0
80108a17:	6a 00                	push   $0x0
  pushl $136
80108a19:	68 88 00 00 00       	push   $0x88
  jmp alltraps
80108a1e:	e9 16 f6 ff ff       	jmp    80108039 <alltraps>

80108a23 <vector137>:
.globl vector137
vector137:
  pushl $0
80108a23:	6a 00                	push   $0x0
  pushl $137
80108a25:	68 89 00 00 00       	push   $0x89
  jmp alltraps
80108a2a:	e9 0a f6 ff ff       	jmp    80108039 <alltraps>

80108a2f <vector138>:
.globl vector138
vector138:
  pushl $0
80108a2f:	6a 00                	push   $0x0
  pushl $138
80108a31:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
80108a36:	e9 fe f5 ff ff       	jmp    80108039 <alltraps>

80108a3b <vector139>:
.globl vector139
vector139:
  pushl $0
80108a3b:	6a 00                	push   $0x0
  pushl $139
80108a3d:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80108a42:	e9 f2 f5 ff ff       	jmp    80108039 <alltraps>

80108a47 <vector140>:
.globl vector140
vector140:
  pushl $0
80108a47:	6a 00                	push   $0x0
  pushl $140
80108a49:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80108a4e:	e9 e6 f5 ff ff       	jmp    80108039 <alltraps>

80108a53 <vector141>:
.globl vector141
vector141:
  pushl $0
80108a53:	6a 00                	push   $0x0
  pushl $141
80108a55:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
80108a5a:	e9 da f5 ff ff       	jmp    80108039 <alltraps>

80108a5f <vector142>:
.globl vector142
vector142:
  pushl $0
80108a5f:	6a 00                	push   $0x0
  pushl $142
80108a61:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
80108a66:	e9 ce f5 ff ff       	jmp    80108039 <alltraps>

80108a6b <vector143>:
.globl vector143
vector143:
  pushl $0
80108a6b:	6a 00                	push   $0x0
  pushl $143
80108a6d:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
80108a72:	e9 c2 f5 ff ff       	jmp    80108039 <alltraps>

80108a77 <vector144>:
.globl vector144
vector144:
  pushl $0
80108a77:	6a 00                	push   $0x0
  pushl $144
80108a79:	68 90 00 00 00       	push   $0x90
  jmp alltraps
80108a7e:	e9 b6 f5 ff ff       	jmp    80108039 <alltraps>

80108a83 <vector145>:
.globl vector145
vector145:
  pushl $0
80108a83:	6a 00                	push   $0x0
  pushl $145
80108a85:	68 91 00 00 00       	push   $0x91
  jmp alltraps
80108a8a:	e9 aa f5 ff ff       	jmp    80108039 <alltraps>

80108a8f <vector146>:
.globl vector146
vector146:
  pushl $0
80108a8f:	6a 00                	push   $0x0
  pushl $146
80108a91:	68 92 00 00 00       	push   $0x92
  jmp alltraps
80108a96:	e9 9e f5 ff ff       	jmp    80108039 <alltraps>

80108a9b <vector147>:
.globl vector147
vector147:
  pushl $0
80108a9b:	6a 00                	push   $0x0
  pushl $147
80108a9d:	68 93 00 00 00       	push   $0x93
  jmp alltraps
80108aa2:	e9 92 f5 ff ff       	jmp    80108039 <alltraps>

80108aa7 <vector148>:
.globl vector148
vector148:
  pushl $0
80108aa7:	6a 00                	push   $0x0
  pushl $148
80108aa9:	68 94 00 00 00       	push   $0x94
  jmp alltraps
80108aae:	e9 86 f5 ff ff       	jmp    80108039 <alltraps>

80108ab3 <vector149>:
.globl vector149
vector149:
  pushl $0
80108ab3:	6a 00                	push   $0x0
  pushl $149
80108ab5:	68 95 00 00 00       	push   $0x95
  jmp alltraps
80108aba:	e9 7a f5 ff ff       	jmp    80108039 <alltraps>

80108abf <vector150>:
.globl vector150
vector150:
  pushl $0
80108abf:	6a 00                	push   $0x0
  pushl $150
80108ac1:	68 96 00 00 00       	push   $0x96
  jmp alltraps
80108ac6:	e9 6e f5 ff ff       	jmp    80108039 <alltraps>

80108acb <vector151>:
.globl vector151
vector151:
  pushl $0
80108acb:	6a 00                	push   $0x0
  pushl $151
80108acd:	68 97 00 00 00       	push   $0x97
  jmp alltraps
80108ad2:	e9 62 f5 ff ff       	jmp    80108039 <alltraps>

80108ad7 <vector152>:
.globl vector152
vector152:
  pushl $0
80108ad7:	6a 00                	push   $0x0
  pushl $152
80108ad9:	68 98 00 00 00       	push   $0x98
  jmp alltraps
80108ade:	e9 56 f5 ff ff       	jmp    80108039 <alltraps>

80108ae3 <vector153>:
.globl vector153
vector153:
  pushl $0
80108ae3:	6a 00                	push   $0x0
  pushl $153
80108ae5:	68 99 00 00 00       	push   $0x99
  jmp alltraps
80108aea:	e9 4a f5 ff ff       	jmp    80108039 <alltraps>

80108aef <vector154>:
.globl vector154
vector154:
  pushl $0
80108aef:	6a 00                	push   $0x0
  pushl $154
80108af1:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
80108af6:	e9 3e f5 ff ff       	jmp    80108039 <alltraps>

80108afb <vector155>:
.globl vector155
vector155:
  pushl $0
80108afb:	6a 00                	push   $0x0
  pushl $155
80108afd:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
80108b02:	e9 32 f5 ff ff       	jmp    80108039 <alltraps>

80108b07 <vector156>:
.globl vector156
vector156:
  pushl $0
80108b07:	6a 00                	push   $0x0
  pushl $156
80108b09:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
80108b0e:	e9 26 f5 ff ff       	jmp    80108039 <alltraps>

80108b13 <vector157>:
.globl vector157
vector157:
  pushl $0
80108b13:	6a 00                	push   $0x0
  pushl $157
80108b15:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
80108b1a:	e9 1a f5 ff ff       	jmp    80108039 <alltraps>

80108b1f <vector158>:
.globl vector158
vector158:
  pushl $0
80108b1f:	6a 00                	push   $0x0
  pushl $158
80108b21:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
80108b26:	e9 0e f5 ff ff       	jmp    80108039 <alltraps>

80108b2b <vector159>:
.globl vector159
vector159:
  pushl $0
80108b2b:	6a 00                	push   $0x0
  pushl $159
80108b2d:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
80108b32:	e9 02 f5 ff ff       	jmp    80108039 <alltraps>

80108b37 <vector160>:
.globl vector160
vector160:
  pushl $0
80108b37:	6a 00                	push   $0x0
  pushl $160
80108b39:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80108b3e:	e9 f6 f4 ff ff       	jmp    80108039 <alltraps>

80108b43 <vector161>:
.globl vector161
vector161:
  pushl $0
80108b43:	6a 00                	push   $0x0
  pushl $161
80108b45:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
80108b4a:	e9 ea f4 ff ff       	jmp    80108039 <alltraps>

80108b4f <vector162>:
.globl vector162
vector162:
  pushl $0
80108b4f:	6a 00                	push   $0x0
  pushl $162
80108b51:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
80108b56:	e9 de f4 ff ff       	jmp    80108039 <alltraps>

80108b5b <vector163>:
.globl vector163
vector163:
  pushl $0
80108b5b:	6a 00                	push   $0x0
  pushl $163
80108b5d:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
80108b62:	e9 d2 f4 ff ff       	jmp    80108039 <alltraps>

80108b67 <vector164>:
.globl vector164
vector164:
  pushl $0
80108b67:	6a 00                	push   $0x0
  pushl $164
80108b69:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
80108b6e:	e9 c6 f4 ff ff       	jmp    80108039 <alltraps>

80108b73 <vector165>:
.globl vector165
vector165:
  pushl $0
80108b73:	6a 00                	push   $0x0
  pushl $165
80108b75:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
80108b7a:	e9 ba f4 ff ff       	jmp    80108039 <alltraps>

80108b7f <vector166>:
.globl vector166
vector166:
  pushl $0
80108b7f:	6a 00                	push   $0x0
  pushl $166
80108b81:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
80108b86:	e9 ae f4 ff ff       	jmp    80108039 <alltraps>

80108b8b <vector167>:
.globl vector167
vector167:
  pushl $0
80108b8b:	6a 00                	push   $0x0
  pushl $167
80108b8d:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
80108b92:	e9 a2 f4 ff ff       	jmp    80108039 <alltraps>

80108b97 <vector168>:
.globl vector168
vector168:
  pushl $0
80108b97:	6a 00                	push   $0x0
  pushl $168
80108b99:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
80108b9e:	e9 96 f4 ff ff       	jmp    80108039 <alltraps>

80108ba3 <vector169>:
.globl vector169
vector169:
  pushl $0
80108ba3:	6a 00                	push   $0x0
  pushl $169
80108ba5:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
80108baa:	e9 8a f4 ff ff       	jmp    80108039 <alltraps>

80108baf <vector170>:
.globl vector170
vector170:
  pushl $0
80108baf:	6a 00                	push   $0x0
  pushl $170
80108bb1:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
80108bb6:	e9 7e f4 ff ff       	jmp    80108039 <alltraps>

80108bbb <vector171>:
.globl vector171
vector171:
  pushl $0
80108bbb:	6a 00                	push   $0x0
  pushl $171
80108bbd:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
80108bc2:	e9 72 f4 ff ff       	jmp    80108039 <alltraps>

80108bc7 <vector172>:
.globl vector172
vector172:
  pushl $0
80108bc7:	6a 00                	push   $0x0
  pushl $172
80108bc9:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
80108bce:	e9 66 f4 ff ff       	jmp    80108039 <alltraps>

80108bd3 <vector173>:
.globl vector173
vector173:
  pushl $0
80108bd3:	6a 00                	push   $0x0
  pushl $173
80108bd5:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
80108bda:	e9 5a f4 ff ff       	jmp    80108039 <alltraps>

80108bdf <vector174>:
.globl vector174
vector174:
  pushl $0
80108bdf:	6a 00                	push   $0x0
  pushl $174
80108be1:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
80108be6:	e9 4e f4 ff ff       	jmp    80108039 <alltraps>

80108beb <vector175>:
.globl vector175
vector175:
  pushl $0
80108beb:	6a 00                	push   $0x0
  pushl $175
80108bed:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
80108bf2:	e9 42 f4 ff ff       	jmp    80108039 <alltraps>

80108bf7 <vector176>:
.globl vector176
vector176:
  pushl $0
80108bf7:	6a 00                	push   $0x0
  pushl $176
80108bf9:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
80108bfe:	e9 36 f4 ff ff       	jmp    80108039 <alltraps>

80108c03 <vector177>:
.globl vector177
vector177:
  pushl $0
80108c03:	6a 00                	push   $0x0
  pushl $177
80108c05:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
80108c0a:	e9 2a f4 ff ff       	jmp    80108039 <alltraps>

80108c0f <vector178>:
.globl vector178
vector178:
  pushl $0
80108c0f:	6a 00                	push   $0x0
  pushl $178
80108c11:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
80108c16:	e9 1e f4 ff ff       	jmp    80108039 <alltraps>

80108c1b <vector179>:
.globl vector179
vector179:
  pushl $0
80108c1b:	6a 00                	push   $0x0
  pushl $179
80108c1d:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80108c22:	e9 12 f4 ff ff       	jmp    80108039 <alltraps>

80108c27 <vector180>:
.globl vector180
vector180:
  pushl $0
80108c27:	6a 00                	push   $0x0
  pushl $180
80108c29:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
80108c2e:	e9 06 f4 ff ff       	jmp    80108039 <alltraps>

80108c33 <vector181>:
.globl vector181
vector181:
  pushl $0
80108c33:	6a 00                	push   $0x0
  pushl $181
80108c35:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
80108c3a:	e9 fa f3 ff ff       	jmp    80108039 <alltraps>

80108c3f <vector182>:
.globl vector182
vector182:
  pushl $0
80108c3f:	6a 00                	push   $0x0
  pushl $182
80108c41:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
80108c46:	e9 ee f3 ff ff       	jmp    80108039 <alltraps>

80108c4b <vector183>:
.globl vector183
vector183:
  pushl $0
80108c4b:	6a 00                	push   $0x0
  pushl $183
80108c4d:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80108c52:	e9 e2 f3 ff ff       	jmp    80108039 <alltraps>

80108c57 <vector184>:
.globl vector184
vector184:
  pushl $0
80108c57:	6a 00                	push   $0x0
  pushl $184
80108c59:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
80108c5e:	e9 d6 f3 ff ff       	jmp    80108039 <alltraps>

80108c63 <vector185>:
.globl vector185
vector185:
  pushl $0
80108c63:	6a 00                	push   $0x0
  pushl $185
80108c65:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
80108c6a:	e9 ca f3 ff ff       	jmp    80108039 <alltraps>

80108c6f <vector186>:
.globl vector186
vector186:
  pushl $0
80108c6f:	6a 00                	push   $0x0
  pushl $186
80108c71:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
80108c76:	e9 be f3 ff ff       	jmp    80108039 <alltraps>

80108c7b <vector187>:
.globl vector187
vector187:
  pushl $0
80108c7b:	6a 00                	push   $0x0
  pushl $187
80108c7d:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
80108c82:	e9 b2 f3 ff ff       	jmp    80108039 <alltraps>

80108c87 <vector188>:
.globl vector188
vector188:
  pushl $0
80108c87:	6a 00                	push   $0x0
  pushl $188
80108c89:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
80108c8e:	e9 a6 f3 ff ff       	jmp    80108039 <alltraps>

80108c93 <vector189>:
.globl vector189
vector189:
  pushl $0
80108c93:	6a 00                	push   $0x0
  pushl $189
80108c95:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
80108c9a:	e9 9a f3 ff ff       	jmp    80108039 <alltraps>

80108c9f <vector190>:
.globl vector190
vector190:
  pushl $0
80108c9f:	6a 00                	push   $0x0
  pushl $190
80108ca1:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
80108ca6:	e9 8e f3 ff ff       	jmp    80108039 <alltraps>

80108cab <vector191>:
.globl vector191
vector191:
  pushl $0
80108cab:	6a 00                	push   $0x0
  pushl $191
80108cad:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
80108cb2:	e9 82 f3 ff ff       	jmp    80108039 <alltraps>

80108cb7 <vector192>:
.globl vector192
vector192:
  pushl $0
80108cb7:	6a 00                	push   $0x0
  pushl $192
80108cb9:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
80108cbe:	e9 76 f3 ff ff       	jmp    80108039 <alltraps>

80108cc3 <vector193>:
.globl vector193
vector193:
  pushl $0
80108cc3:	6a 00                	push   $0x0
  pushl $193
80108cc5:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
80108cca:	e9 6a f3 ff ff       	jmp    80108039 <alltraps>

80108ccf <vector194>:
.globl vector194
vector194:
  pushl $0
80108ccf:	6a 00                	push   $0x0
  pushl $194
80108cd1:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
80108cd6:	e9 5e f3 ff ff       	jmp    80108039 <alltraps>

80108cdb <vector195>:
.globl vector195
vector195:
  pushl $0
80108cdb:	6a 00                	push   $0x0
  pushl $195
80108cdd:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
80108ce2:	e9 52 f3 ff ff       	jmp    80108039 <alltraps>

80108ce7 <vector196>:
.globl vector196
vector196:
  pushl $0
80108ce7:	6a 00                	push   $0x0
  pushl $196
80108ce9:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
80108cee:	e9 46 f3 ff ff       	jmp    80108039 <alltraps>

80108cf3 <vector197>:
.globl vector197
vector197:
  pushl $0
80108cf3:	6a 00                	push   $0x0
  pushl $197
80108cf5:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
80108cfa:	e9 3a f3 ff ff       	jmp    80108039 <alltraps>

80108cff <vector198>:
.globl vector198
vector198:
  pushl $0
80108cff:	6a 00                	push   $0x0
  pushl $198
80108d01:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
80108d06:	e9 2e f3 ff ff       	jmp    80108039 <alltraps>

80108d0b <vector199>:
.globl vector199
vector199:
  pushl $0
80108d0b:	6a 00                	push   $0x0
  pushl $199
80108d0d:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
80108d12:	e9 22 f3 ff ff       	jmp    80108039 <alltraps>

80108d17 <vector200>:
.globl vector200
vector200:
  pushl $0
80108d17:	6a 00                	push   $0x0
  pushl $200
80108d19:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
80108d1e:	e9 16 f3 ff ff       	jmp    80108039 <alltraps>

80108d23 <vector201>:
.globl vector201
vector201:
  pushl $0
80108d23:	6a 00                	push   $0x0
  pushl $201
80108d25:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
80108d2a:	e9 0a f3 ff ff       	jmp    80108039 <alltraps>

80108d2f <vector202>:
.globl vector202
vector202:
  pushl $0
80108d2f:	6a 00                	push   $0x0
  pushl $202
80108d31:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
80108d36:	e9 fe f2 ff ff       	jmp    80108039 <alltraps>

80108d3b <vector203>:
.globl vector203
vector203:
  pushl $0
80108d3b:	6a 00                	push   $0x0
  pushl $203
80108d3d:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80108d42:	e9 f2 f2 ff ff       	jmp    80108039 <alltraps>

80108d47 <vector204>:
.globl vector204
vector204:
  pushl $0
80108d47:	6a 00                	push   $0x0
  pushl $204
80108d49:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80108d4e:	e9 e6 f2 ff ff       	jmp    80108039 <alltraps>

80108d53 <vector205>:
.globl vector205
vector205:
  pushl $0
80108d53:	6a 00                	push   $0x0
  pushl $205
80108d55:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
80108d5a:	e9 da f2 ff ff       	jmp    80108039 <alltraps>

80108d5f <vector206>:
.globl vector206
vector206:
  pushl $0
80108d5f:	6a 00                	push   $0x0
  pushl $206
80108d61:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
80108d66:	e9 ce f2 ff ff       	jmp    80108039 <alltraps>

80108d6b <vector207>:
.globl vector207
vector207:
  pushl $0
80108d6b:	6a 00                	push   $0x0
  pushl $207
80108d6d:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
80108d72:	e9 c2 f2 ff ff       	jmp    80108039 <alltraps>

80108d77 <vector208>:
.globl vector208
vector208:
  pushl $0
80108d77:	6a 00                	push   $0x0
  pushl $208
80108d79:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
80108d7e:	e9 b6 f2 ff ff       	jmp    80108039 <alltraps>

80108d83 <vector209>:
.globl vector209
vector209:
  pushl $0
80108d83:	6a 00                	push   $0x0
  pushl $209
80108d85:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
80108d8a:	e9 aa f2 ff ff       	jmp    80108039 <alltraps>

80108d8f <vector210>:
.globl vector210
vector210:
  pushl $0
80108d8f:	6a 00                	push   $0x0
  pushl $210
80108d91:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
80108d96:	e9 9e f2 ff ff       	jmp    80108039 <alltraps>

80108d9b <vector211>:
.globl vector211
vector211:
  pushl $0
80108d9b:	6a 00                	push   $0x0
  pushl $211
80108d9d:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
80108da2:	e9 92 f2 ff ff       	jmp    80108039 <alltraps>

80108da7 <vector212>:
.globl vector212
vector212:
  pushl $0
80108da7:	6a 00                	push   $0x0
  pushl $212
80108da9:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
80108dae:	e9 86 f2 ff ff       	jmp    80108039 <alltraps>

80108db3 <vector213>:
.globl vector213
vector213:
  pushl $0
80108db3:	6a 00                	push   $0x0
  pushl $213
80108db5:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
80108dba:	e9 7a f2 ff ff       	jmp    80108039 <alltraps>

80108dbf <vector214>:
.globl vector214
vector214:
  pushl $0
80108dbf:	6a 00                	push   $0x0
  pushl $214
80108dc1:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
80108dc6:	e9 6e f2 ff ff       	jmp    80108039 <alltraps>

80108dcb <vector215>:
.globl vector215
vector215:
  pushl $0
80108dcb:	6a 00                	push   $0x0
  pushl $215
80108dcd:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
80108dd2:	e9 62 f2 ff ff       	jmp    80108039 <alltraps>

80108dd7 <vector216>:
.globl vector216
vector216:
  pushl $0
80108dd7:	6a 00                	push   $0x0
  pushl $216
80108dd9:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
80108dde:	e9 56 f2 ff ff       	jmp    80108039 <alltraps>

80108de3 <vector217>:
.globl vector217
vector217:
  pushl $0
80108de3:	6a 00                	push   $0x0
  pushl $217
80108de5:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
80108dea:	e9 4a f2 ff ff       	jmp    80108039 <alltraps>

80108def <vector218>:
.globl vector218
vector218:
  pushl $0
80108def:	6a 00                	push   $0x0
  pushl $218
80108df1:	68 da 00 00 00       	push   $0xda
  jmp alltraps
80108df6:	e9 3e f2 ff ff       	jmp    80108039 <alltraps>

80108dfb <vector219>:
.globl vector219
vector219:
  pushl $0
80108dfb:	6a 00                	push   $0x0
  pushl $219
80108dfd:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
80108e02:	e9 32 f2 ff ff       	jmp    80108039 <alltraps>

80108e07 <vector220>:
.globl vector220
vector220:
  pushl $0
80108e07:	6a 00                	push   $0x0
  pushl $220
80108e09:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
80108e0e:	e9 26 f2 ff ff       	jmp    80108039 <alltraps>

80108e13 <vector221>:
.globl vector221
vector221:
  pushl $0
80108e13:	6a 00                	push   $0x0
  pushl $221
80108e15:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
80108e1a:	e9 1a f2 ff ff       	jmp    80108039 <alltraps>

80108e1f <vector222>:
.globl vector222
vector222:
  pushl $0
80108e1f:	6a 00                	push   $0x0
  pushl $222
80108e21:	68 de 00 00 00       	push   $0xde
  jmp alltraps
80108e26:	e9 0e f2 ff ff       	jmp    80108039 <alltraps>

80108e2b <vector223>:
.globl vector223
vector223:
  pushl $0
80108e2b:	6a 00                	push   $0x0
  pushl $223
80108e2d:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
80108e32:	e9 02 f2 ff ff       	jmp    80108039 <alltraps>

80108e37 <vector224>:
.globl vector224
vector224:
  pushl $0
80108e37:	6a 00                	push   $0x0
  pushl $224
80108e39:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80108e3e:	e9 f6 f1 ff ff       	jmp    80108039 <alltraps>

80108e43 <vector225>:
.globl vector225
vector225:
  pushl $0
80108e43:	6a 00                	push   $0x0
  pushl $225
80108e45:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
80108e4a:	e9 ea f1 ff ff       	jmp    80108039 <alltraps>

80108e4f <vector226>:
.globl vector226
vector226:
  pushl $0
80108e4f:	6a 00                	push   $0x0
  pushl $226
80108e51:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
80108e56:	e9 de f1 ff ff       	jmp    80108039 <alltraps>

80108e5b <vector227>:
.globl vector227
vector227:
  pushl $0
80108e5b:	6a 00                	push   $0x0
  pushl $227
80108e5d:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
80108e62:	e9 d2 f1 ff ff       	jmp    80108039 <alltraps>

80108e67 <vector228>:
.globl vector228
vector228:
  pushl $0
80108e67:	6a 00                	push   $0x0
  pushl $228
80108e69:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
80108e6e:	e9 c6 f1 ff ff       	jmp    80108039 <alltraps>

80108e73 <vector229>:
.globl vector229
vector229:
  pushl $0
80108e73:	6a 00                	push   $0x0
  pushl $229
80108e75:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
80108e7a:	e9 ba f1 ff ff       	jmp    80108039 <alltraps>

80108e7f <vector230>:
.globl vector230
vector230:
  pushl $0
80108e7f:	6a 00                	push   $0x0
  pushl $230
80108e81:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
80108e86:	e9 ae f1 ff ff       	jmp    80108039 <alltraps>

80108e8b <vector231>:
.globl vector231
vector231:
  pushl $0
80108e8b:	6a 00                	push   $0x0
  pushl $231
80108e8d:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
80108e92:	e9 a2 f1 ff ff       	jmp    80108039 <alltraps>

80108e97 <vector232>:
.globl vector232
vector232:
  pushl $0
80108e97:	6a 00                	push   $0x0
  pushl $232
80108e99:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
80108e9e:	e9 96 f1 ff ff       	jmp    80108039 <alltraps>

80108ea3 <vector233>:
.globl vector233
vector233:
  pushl $0
80108ea3:	6a 00                	push   $0x0
  pushl $233
80108ea5:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
80108eaa:	e9 8a f1 ff ff       	jmp    80108039 <alltraps>

80108eaf <vector234>:
.globl vector234
vector234:
  pushl $0
80108eaf:	6a 00                	push   $0x0
  pushl $234
80108eb1:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
80108eb6:	e9 7e f1 ff ff       	jmp    80108039 <alltraps>

80108ebb <vector235>:
.globl vector235
vector235:
  pushl $0
80108ebb:	6a 00                	push   $0x0
  pushl $235
80108ebd:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
80108ec2:	e9 72 f1 ff ff       	jmp    80108039 <alltraps>

80108ec7 <vector236>:
.globl vector236
vector236:
  pushl $0
80108ec7:	6a 00                	push   $0x0
  pushl $236
80108ec9:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
80108ece:	e9 66 f1 ff ff       	jmp    80108039 <alltraps>

80108ed3 <vector237>:
.globl vector237
vector237:
  pushl $0
80108ed3:	6a 00                	push   $0x0
  pushl $237
80108ed5:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
80108eda:	e9 5a f1 ff ff       	jmp    80108039 <alltraps>

80108edf <vector238>:
.globl vector238
vector238:
  pushl $0
80108edf:	6a 00                	push   $0x0
  pushl $238
80108ee1:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
80108ee6:	e9 4e f1 ff ff       	jmp    80108039 <alltraps>

80108eeb <vector239>:
.globl vector239
vector239:
  pushl $0
80108eeb:	6a 00                	push   $0x0
  pushl $239
80108eed:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
80108ef2:	e9 42 f1 ff ff       	jmp    80108039 <alltraps>

80108ef7 <vector240>:
.globl vector240
vector240:
  pushl $0
80108ef7:	6a 00                	push   $0x0
  pushl $240
80108ef9:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
80108efe:	e9 36 f1 ff ff       	jmp    80108039 <alltraps>

80108f03 <vector241>:
.globl vector241
vector241:
  pushl $0
80108f03:	6a 00                	push   $0x0
  pushl $241
80108f05:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
80108f0a:	e9 2a f1 ff ff       	jmp    80108039 <alltraps>

80108f0f <vector242>:
.globl vector242
vector242:
  pushl $0
80108f0f:	6a 00                	push   $0x0
  pushl $242
80108f11:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
80108f16:	e9 1e f1 ff ff       	jmp    80108039 <alltraps>

80108f1b <vector243>:
.globl vector243
vector243:
  pushl $0
80108f1b:	6a 00                	push   $0x0
  pushl $243
80108f1d:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80108f22:	e9 12 f1 ff ff       	jmp    80108039 <alltraps>

80108f27 <vector244>:
.globl vector244
vector244:
  pushl $0
80108f27:	6a 00                	push   $0x0
  pushl $244
80108f29:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
80108f2e:	e9 06 f1 ff ff       	jmp    80108039 <alltraps>

80108f33 <vector245>:
.globl vector245
vector245:
  pushl $0
80108f33:	6a 00                	push   $0x0
  pushl $245
80108f35:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
80108f3a:	e9 fa f0 ff ff       	jmp    80108039 <alltraps>

80108f3f <vector246>:
.globl vector246
vector246:
  pushl $0
80108f3f:	6a 00                	push   $0x0
  pushl $246
80108f41:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
80108f46:	e9 ee f0 ff ff       	jmp    80108039 <alltraps>

80108f4b <vector247>:
.globl vector247
vector247:
  pushl $0
80108f4b:	6a 00                	push   $0x0
  pushl $247
80108f4d:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80108f52:	e9 e2 f0 ff ff       	jmp    80108039 <alltraps>

80108f57 <vector248>:
.globl vector248
vector248:
  pushl $0
80108f57:	6a 00                	push   $0x0
  pushl $248
80108f59:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80108f5e:	e9 d6 f0 ff ff       	jmp    80108039 <alltraps>

80108f63 <vector249>:
.globl vector249
vector249:
  pushl $0
80108f63:	6a 00                	push   $0x0
  pushl $249
80108f65:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
80108f6a:	e9 ca f0 ff ff       	jmp    80108039 <alltraps>

80108f6f <vector250>:
.globl vector250
vector250:
  pushl $0
80108f6f:	6a 00                	push   $0x0
  pushl $250
80108f71:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
80108f76:	e9 be f0 ff ff       	jmp    80108039 <alltraps>

80108f7b <vector251>:
.globl vector251
vector251:
  pushl $0
80108f7b:	6a 00                	push   $0x0
  pushl $251
80108f7d:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80108f82:	e9 b2 f0 ff ff       	jmp    80108039 <alltraps>

80108f87 <vector252>:
.globl vector252
vector252:
  pushl $0
80108f87:	6a 00                	push   $0x0
  pushl $252
80108f89:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80108f8e:	e9 a6 f0 ff ff       	jmp    80108039 <alltraps>

80108f93 <vector253>:
.globl vector253
vector253:
  pushl $0
80108f93:	6a 00                	push   $0x0
  pushl $253
80108f95:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
80108f9a:	e9 9a f0 ff ff       	jmp    80108039 <alltraps>

80108f9f <vector254>:
.globl vector254
vector254:
  pushl $0
80108f9f:	6a 00                	push   $0x0
  pushl $254
80108fa1:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80108fa6:	e9 8e f0 ff ff       	jmp    80108039 <alltraps>

80108fab <vector255>:
.globl vector255
vector255:
  pushl $0
80108fab:	6a 00                	push   $0x0
  pushl $255
80108fad:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80108fb2:	e9 82 f0 ff ff       	jmp    80108039 <alltraps>
80108fb7:	66 90                	xchg   %ax,%ax
80108fb9:	66 90                	xchg   %ax,%ax
80108fbb:	66 90                	xchg   %ax,%ax
80108fbd:	66 90                	xchg   %ax,%ax
80108fbf:	90                   	nop

80108fc0 <walkpgdir>:
80108fc0:	55                   	push   %ebp
80108fc1:	89 e5                	mov    %esp,%ebp
80108fc3:	57                   	push   %edi
80108fc4:	56                   	push   %esi
80108fc5:	53                   	push   %ebx
80108fc6:	89 d3                	mov    %edx,%ebx
80108fc8:	c1 ea 16             	shr    $0x16,%edx
80108fcb:	8d 3c 90             	lea    (%eax,%edx,4),%edi
80108fce:	83 ec 0c             	sub    $0xc,%esp
80108fd1:	8b 07                	mov    (%edi),%eax
80108fd3:	a8 01                	test   $0x1,%al
80108fd5:	74 29                	je     80109000 <walkpgdir+0x40>
80108fd7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108fdc:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
80108fe2:	8d 65 f4             	lea    -0xc(%ebp),%esp
80108fe5:	c1 eb 0a             	shr    $0xa,%ebx
80108fe8:	81 e3 fc 0f 00 00    	and    $0xffc,%ebx
80108fee:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
80108ff1:	5b                   	pop    %ebx
80108ff2:	5e                   	pop    %esi
80108ff3:	5f                   	pop    %edi
80108ff4:	5d                   	pop    %ebp
80108ff5:	c3                   	ret    
80108ff6:	8d 76 00             	lea    0x0(%esi),%esi
80108ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109000:	85 c9                	test   %ecx,%ecx
80109002:	74 2c                	je     80109030 <walkpgdir+0x70>
80109004:	e8 c7 9f ff ff       	call   80102fd0 <kalloc>
80109009:	85 c0                	test   %eax,%eax
8010900b:	89 c6                	mov    %eax,%esi
8010900d:	74 21                	je     80109030 <walkpgdir+0x70>
8010900f:	83 ec 04             	sub    $0x4,%esp
80109012:	68 00 10 00 00       	push   $0x1000
80109017:	6a 00                	push   $0x0
80109019:	50                   	push   %eax
8010901a:	e8 c1 d3 ff ff       	call   801063e0 <memset>
8010901f:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
80109025:	83 c4 10             	add    $0x10,%esp
80109028:	83 c8 07             	or     $0x7,%eax
8010902b:	89 07                	mov    %eax,(%edi)
8010902d:	eb b3                	jmp    80108fe2 <walkpgdir+0x22>
8010902f:	90                   	nop
80109030:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109033:	31 c0                	xor    %eax,%eax
80109035:	5b                   	pop    %ebx
80109036:	5e                   	pop    %esi
80109037:	5f                   	pop    %edi
80109038:	5d                   	pop    %ebp
80109039:	c3                   	ret    
8010903a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80109040 <mappages>:
80109040:	55                   	push   %ebp
80109041:	89 e5                	mov    %esp,%ebp
80109043:	57                   	push   %edi
80109044:	56                   	push   %esi
80109045:	53                   	push   %ebx
80109046:	89 d3                	mov    %edx,%ebx
80109048:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
8010904e:	83 ec 1c             	sub    $0x1c,%esp
80109051:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80109054:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
80109058:	8b 7d 08             	mov    0x8(%ebp),%edi
8010905b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80109060:	89 45 e0             	mov    %eax,-0x20(%ebp)
80109063:	8b 45 0c             	mov    0xc(%ebp),%eax
80109066:	29 df                	sub    %ebx,%edi
80109068:	83 c8 01             	or     $0x1,%eax
8010906b:	89 45 dc             	mov    %eax,-0x24(%ebp)
8010906e:	eb 15                	jmp    80109085 <mappages+0x45>
80109070:	f6 00 01             	testb  $0x1,(%eax)
80109073:	75 45                	jne    801090ba <mappages+0x7a>
80109075:	0b 75 dc             	or     -0x24(%ebp),%esi
80109078:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
8010907b:	89 30                	mov    %esi,(%eax)
8010907d:	74 31                	je     801090b0 <mappages+0x70>
8010907f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80109085:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80109088:	b9 01 00 00 00       	mov    $0x1,%ecx
8010908d:	89 da                	mov    %ebx,%edx
8010908f:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
80109092:	e8 29 ff ff ff       	call   80108fc0 <walkpgdir>
80109097:	85 c0                	test   %eax,%eax
80109099:	75 d5                	jne    80109070 <mappages+0x30>
8010909b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010909e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801090a3:	5b                   	pop    %ebx
801090a4:	5e                   	pop    %esi
801090a5:	5f                   	pop    %edi
801090a6:	5d                   	pop    %ebp
801090a7:	c3                   	ret    
801090a8:	90                   	nop
801090a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801090b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801090b3:	31 c0                	xor    %eax,%eax
801090b5:	5b                   	pop    %ebx
801090b6:	5e                   	pop    %esi
801090b7:	5f                   	pop    %edi
801090b8:	5d                   	pop    %ebp
801090b9:	c3                   	ret    
801090ba:	83 ec 0c             	sub    $0xc,%esp
801090bd:	68 44 f3 10 80       	push   $0x8010f344
801090c2:	e8 09 73 ff ff       	call   801003d0 <panic>
801090c7:	89 f6                	mov    %esi,%esi
801090c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

801090d0 <deallocuvm.part.0>:
801090d0:	55                   	push   %ebp
801090d1:	89 e5                	mov    %esp,%ebp
801090d3:	57                   	push   %edi
801090d4:	56                   	push   %esi
801090d5:	53                   	push   %ebx
801090d6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
801090dc:	89 c7                	mov    %eax,%edi
801090de:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
801090e4:	83 ec 1c             	sub    $0x1c,%esp
801090e7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
801090ea:	39 d3                	cmp    %edx,%ebx
801090ec:	73 66                	jae    80109154 <deallocuvm.part.0+0x84>
801090ee:	89 d6                	mov    %edx,%esi
801090f0:	eb 3d                	jmp    8010912f <deallocuvm.part.0+0x5f>
801090f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801090f8:	8b 10                	mov    (%eax),%edx
801090fa:	f6 c2 01             	test   $0x1,%dl
801090fd:	74 26                	je     80109125 <deallocuvm.part.0+0x55>
801090ff:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
80109105:	74 58                	je     8010915f <deallocuvm.part.0+0x8f>
80109107:	83 ec 0c             	sub    $0xc,%esp
8010910a:	81 c2 00 00 00 80    	add    $0x80000000,%edx
80109110:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80109113:	52                   	push   %edx
80109114:	e8 e7 9b ff ff       	call   80102d00 <kfree>
80109119:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010911c:	83 c4 10             	add    $0x10,%esp
8010911f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80109125:	81 c3 00 10 00 00    	add    $0x1000,%ebx
8010912b:	39 f3                	cmp    %esi,%ebx
8010912d:	73 25                	jae    80109154 <deallocuvm.part.0+0x84>
8010912f:	31 c9                	xor    %ecx,%ecx
80109131:	89 da                	mov    %ebx,%edx
80109133:	89 f8                	mov    %edi,%eax
80109135:	e8 86 fe ff ff       	call   80108fc0 <walkpgdir>
8010913a:	85 c0                	test   %eax,%eax
8010913c:	75 ba                	jne    801090f8 <deallocuvm.part.0+0x28>
8010913e:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
80109144:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
8010914a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80109150:	39 f3                	cmp    %esi,%ebx
80109152:	72 db                	jb     8010912f <deallocuvm.part.0+0x5f>
80109154:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109157:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010915a:	5b                   	pop    %ebx
8010915b:	5e                   	pop    %esi
8010915c:	5f                   	pop    %edi
8010915d:	5d                   	pop    %ebp
8010915e:	c3                   	ret    
8010915f:	83 ec 0c             	sub    $0xc,%esp
80109162:	68 0e ea 10 80       	push   $0x8010ea0e
80109167:	e8 64 72 ff ff       	call   801003d0 <panic>
8010916c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109170 <seginit>:
80109170:	55                   	push   %ebp
80109171:	89 e5                	mov    %esp,%ebp
80109173:	83 ec 18             	sub    $0x18,%esp
80109176:	e8 cd c0 ff ff       	call   80105248 <cpuid>
8010917b:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
80109181:	31 c9                	xor    %ecx,%ecx
80109183:	ba ff ff ff ff       	mov    $0xffffffff,%edx
80109188:	66 89 90 78 05 13 80 	mov    %dx,-0x7fecfa88(%eax)
8010918f:	66 89 88 7a 05 13 80 	mov    %cx,-0x7fecfa86(%eax)
80109196:	ba ff ff ff ff       	mov    $0xffffffff,%edx
8010919b:	31 c9                	xor    %ecx,%ecx
8010919d:	66 89 90 80 05 13 80 	mov    %dx,-0x7fecfa80(%eax)
801091a4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
801091a9:	66 89 88 82 05 13 80 	mov    %cx,-0x7fecfa7e(%eax)
801091b0:	31 c9                	xor    %ecx,%ecx
801091b2:	66 89 90 88 05 13 80 	mov    %dx,-0x7fecfa78(%eax)
801091b9:	66 89 88 8a 05 13 80 	mov    %cx,-0x7fecfa76(%eax)
801091c0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
801091c5:	31 c9                	xor    %ecx,%ecx
801091c7:	66 89 90 90 05 13 80 	mov    %dx,-0x7fecfa70(%eax)
801091ce:	c6 80 7c 05 13 80 00 	movb   $0x0,-0x7fecfa84(%eax)
static inline void
lgdt(struct segdesc *p, int size)
{
  volatile ushort pd[3];

  pd[0] = size-1;
801091d5:	ba 2f 00 00 00       	mov    $0x2f,%edx
801091da:	c6 80 7d 05 13 80 9a 	movb   $0x9a,-0x7fecfa83(%eax)
801091e1:	c6 80 7e 05 13 80 cf 	movb   $0xcf,-0x7fecfa82(%eax)
801091e8:	c6 80 7f 05 13 80 00 	movb   $0x0,-0x7fecfa81(%eax)
801091ef:	c6 80 84 05 13 80 00 	movb   $0x0,-0x7fecfa7c(%eax)
801091f6:	c6 80 85 05 13 80 92 	movb   $0x92,-0x7fecfa7b(%eax)
801091fd:	c6 80 86 05 13 80 cf 	movb   $0xcf,-0x7fecfa7a(%eax)
80109204:	c6 80 87 05 13 80 00 	movb   $0x0,-0x7fecfa79(%eax)
8010920b:	c6 80 8c 05 13 80 00 	movb   $0x0,-0x7fecfa74(%eax)
80109212:	c6 80 8d 05 13 80 fa 	movb   $0xfa,-0x7fecfa73(%eax)
80109219:	c6 80 8e 05 13 80 cf 	movb   $0xcf,-0x7fecfa72(%eax)
80109220:	c6 80 8f 05 13 80 00 	movb   $0x0,-0x7fecfa71(%eax)
80109227:	66 89 88 92 05 13 80 	mov    %cx,-0x7fecfa6e(%eax)
8010922e:	c6 80 94 05 13 80 00 	movb   $0x0,-0x7fecfa6c(%eax)
80109235:	c6 80 95 05 13 80 f2 	movb   $0xf2,-0x7fecfa6b(%eax)
8010923c:	c6 80 96 05 13 80 cf 	movb   $0xcf,-0x7fecfa6a(%eax)
80109243:	c6 80 97 05 13 80 00 	movb   $0x0,-0x7fecfa69(%eax)
8010924a:	05 70 05 13 80       	add    $0x80130570,%eax
8010924f:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
  pd[1] = (uint)p;
80109253:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint)p >> 16;
80109257:	c1 e8 10             	shr    $0x10,%eax
8010925a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

  asm volatile("lgdt (%0)" : : "r" (pd));
8010925e:	8d 45 f2             	lea    -0xe(%ebp),%eax
80109261:	0f 01 10             	lgdtl  (%eax)
80109264:	c9                   	leave  
80109265:	c3                   	ret    
80109266:	8d 76 00             	lea    0x0(%esi),%esi
80109269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80109270 <switchkvm>:
}

static inline void
lcr3(uint val)
{
  asm volatile("movl %0,%%cr3" : : "r" (val));
80109270:	a1 04 c4 13 80       	mov    0x8013c404,%eax
80109275:	55                   	push   %ebp
80109276:	89 e5                	mov    %esp,%ebp
80109278:	05 00 00 00 80       	add    $0x80000000,%eax
8010927d:	0f 22 d8             	mov    %eax,%cr3
80109280:	5d                   	pop    %ebp
80109281:	c3                   	ret    
80109282:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80109290 <switchuvm>:
80109290:	55                   	push   %ebp
80109291:	89 e5                	mov    %esp,%ebp
80109293:	57                   	push   %edi
80109294:	56                   	push   %esi
80109295:	53                   	push   %ebx
80109296:	83 ec 1c             	sub    $0x1c,%esp
80109299:	8b 75 08             	mov    0x8(%ebp),%esi
8010929c:	85 f6                	test   %esi,%esi
8010929e:	0f 84 cd 00 00 00    	je     80109371 <switchuvm+0xe1>
801092a4:	8b 46 08             	mov    0x8(%esi),%eax
801092a7:	85 c0                	test   %eax,%eax
801092a9:	0f 84 dc 00 00 00    	je     8010938b <switchuvm+0xfb>
801092af:	8b 7e 04             	mov    0x4(%esi),%edi
801092b2:	85 ff                	test   %edi,%edi
801092b4:	0f 84 c4 00 00 00    	je     8010937e <switchuvm+0xee>
801092ba:	e8 71 cf ff ff       	call   80106230 <pushcli>
801092bf:	e8 28 bf ff ff       	call   801051ec <mycpu>
801092c4:	89 c3                	mov    %eax,%ebx
801092c6:	e8 21 bf ff ff       	call   801051ec <mycpu>
801092cb:	89 c7                	mov    %eax,%edi
801092cd:	e8 1a bf ff ff       	call   801051ec <mycpu>
801092d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801092d5:	83 c7 08             	add    $0x8,%edi
801092d8:	e8 0f bf ff ff       	call   801051ec <mycpu>
801092dd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801092e0:	83 c0 08             	add    $0x8,%eax
801092e3:	ba 67 00 00 00       	mov    $0x67,%edx
801092e8:	c1 e8 18             	shr    $0x18,%eax
801092eb:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
801092f2:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
801092f9:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
80109300:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
80109307:	83 c1 08             	add    $0x8,%ecx
8010930a:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
80109310:	c1 e9 10             	shr    $0x10,%ecx
80109313:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
80109319:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
8010931e:	e8 c9 be ff ff       	call   801051ec <mycpu>
80109323:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
8010932a:	e8 bd be ff ff       	call   801051ec <mycpu>
8010932f:	b9 10 00 00 00       	mov    $0x10,%ecx
80109334:	66 89 48 10          	mov    %cx,0x10(%eax)
80109338:	e8 af be ff ff       	call   801051ec <mycpu>
8010933d:	8b 56 08             	mov    0x8(%esi),%edx
80109340:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
80109346:	89 48 0c             	mov    %ecx,0xc(%eax)
80109349:	e8 9e be ff ff       	call   801051ec <mycpu>
8010934e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
}

static inline void
ltr(ushort sel)
{
  asm volatile("ltr %0" : : "r" (sel));
80109352:	b8 28 00 00 00       	mov    $0x28,%eax
80109357:	0f 00 d8             	ltr    %ax
}

static inline void
lcr3(uint val)
{
  asm volatile("movl %0,%%cr3" : : "r" (val));
8010935a:	8b 46 04             	mov    0x4(%esi),%eax
8010935d:	05 00 00 00 80       	add    $0x80000000,%eax
80109362:	0f 22 d8             	mov    %eax,%cr3
80109365:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109368:	5b                   	pop    %ebx
80109369:	5e                   	pop    %esi
8010936a:	5f                   	pop    %edi
8010936b:	5d                   	pop    %ebp
8010936c:	e9 af cf ff ff       	jmp    80106320 <popcli>
80109371:	83 ec 0c             	sub    $0xc,%esp
80109374:	68 4a f3 10 80       	push   $0x8010f34a
80109379:	e8 52 70 ff ff       	call   801003d0 <panic>
8010937e:	83 ec 0c             	sub    $0xc,%esp
80109381:	68 75 f3 10 80       	push   $0x8010f375
80109386:	e8 45 70 ff ff       	call   801003d0 <panic>
8010938b:	83 ec 0c             	sub    $0xc,%esp
8010938e:	68 60 f3 10 80       	push   $0x8010f360
80109393:	e8 38 70 ff ff       	call   801003d0 <panic>
80109398:	90                   	nop
80109399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801093a0 <inituvm>:
801093a0:	55                   	push   %ebp
801093a1:	89 e5                	mov    %esp,%ebp
801093a3:	57                   	push   %edi
801093a4:	56                   	push   %esi
801093a5:	53                   	push   %ebx
801093a6:	83 ec 1c             	sub    $0x1c,%esp
801093a9:	8b 75 10             	mov    0x10(%ebp),%esi
801093ac:	8b 45 08             	mov    0x8(%ebp),%eax
801093af:	8b 7d 0c             	mov    0xc(%ebp),%edi
801093b2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
801093b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801093bb:	77 49                	ja     80109406 <inituvm+0x66>
801093bd:	e8 0e 9c ff ff       	call   80102fd0 <kalloc>
801093c2:	83 ec 04             	sub    $0x4,%esp
801093c5:	89 c3                	mov    %eax,%ebx
801093c7:	68 00 10 00 00       	push   $0x1000
801093cc:	6a 00                	push   $0x0
801093ce:	50                   	push   %eax
801093cf:	e8 0c d0 ff ff       	call   801063e0 <memset>
801093d4:	58                   	pop    %eax
801093d5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
801093db:	b9 00 10 00 00       	mov    $0x1000,%ecx
801093e0:	5a                   	pop    %edx
801093e1:	6a 06                	push   $0x6
801093e3:	50                   	push   %eax
801093e4:	31 d2                	xor    %edx,%edx
801093e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801093e9:	e8 52 fc ff ff       	call   80109040 <mappages>
801093ee:	89 75 10             	mov    %esi,0x10(%ebp)
801093f1:	89 7d 0c             	mov    %edi,0xc(%ebp)
801093f4:	83 c4 10             	add    $0x10,%esp
801093f7:	89 5d 08             	mov    %ebx,0x8(%ebp)
801093fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
801093fd:	5b                   	pop    %ebx
801093fe:	5e                   	pop    %esi
801093ff:	5f                   	pop    %edi
80109400:	5d                   	pop    %ebp
80109401:	e9 8a d0 ff ff       	jmp    80106490 <memmove>
80109406:	83 ec 0c             	sub    $0xc,%esp
80109409:	68 89 f3 10 80       	push   $0x8010f389
8010940e:	e8 bd 6f ff ff       	call   801003d0 <panic>
80109413:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80109420 <loaduvm>:
80109420:	55                   	push   %ebp
80109421:	89 e5                	mov    %esp,%ebp
80109423:	57                   	push   %edi
80109424:	56                   	push   %esi
80109425:	53                   	push   %ebx
80109426:	83 ec 0c             	sub    $0xc,%esp
80109429:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
80109430:	0f 85 91 00 00 00    	jne    801094c7 <loaduvm+0xa7>
80109436:	8b 75 18             	mov    0x18(%ebp),%esi
80109439:	31 db                	xor    %ebx,%ebx
8010943b:	85 f6                	test   %esi,%esi
8010943d:	75 1a                	jne    80109459 <loaduvm+0x39>
8010943f:	eb 6f                	jmp    801094b0 <loaduvm+0x90>
80109441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109448:	81 c3 00 10 00 00    	add    $0x1000,%ebx
8010944e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
80109454:	39 5d 18             	cmp    %ebx,0x18(%ebp)
80109457:	76 57                	jbe    801094b0 <loaduvm+0x90>
80109459:	8b 55 0c             	mov    0xc(%ebp),%edx
8010945c:	8b 45 08             	mov    0x8(%ebp),%eax
8010945f:	31 c9                	xor    %ecx,%ecx
80109461:	01 da                	add    %ebx,%edx
80109463:	e8 58 fb ff ff       	call   80108fc0 <walkpgdir>
80109468:	85 c0                	test   %eax,%eax
8010946a:	74 4e                	je     801094ba <loaduvm+0x9a>
8010946c:	8b 00                	mov    (%eax),%eax
8010946e:	8b 4d 14             	mov    0x14(%ebp),%ecx
80109471:	bf 00 10 00 00       	mov    $0x1000,%edi
80109476:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010947b:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
80109481:	0f 46 fe             	cmovbe %esi,%edi
80109484:	01 d9                	add    %ebx,%ecx
80109486:	05 00 00 00 80       	add    $0x80000000,%eax
8010948b:	57                   	push   %edi
8010948c:	51                   	push   %ecx
8010948d:	50                   	push   %eax
8010948e:	ff 75 10             	pushl  0x10(%ebp)
80109491:	e8 2a 8d ff ff       	call   801021c0 <readi>
80109496:	83 c4 10             	add    $0x10,%esp
80109499:	39 c7                	cmp    %eax,%edi
8010949b:	74 ab                	je     80109448 <loaduvm+0x28>
8010949d:	8d 65 f4             	lea    -0xc(%ebp),%esp
801094a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801094a5:	5b                   	pop    %ebx
801094a6:	5e                   	pop    %esi
801094a7:	5f                   	pop    %edi
801094a8:	5d                   	pop    %ebp
801094a9:	c3                   	ret    
801094aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801094b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801094b3:	31 c0                	xor    %eax,%eax
801094b5:	5b                   	pop    %ebx
801094b6:	5e                   	pop    %esi
801094b7:	5f                   	pop    %edi
801094b8:	5d                   	pop    %ebp
801094b9:	c3                   	ret    
801094ba:	83 ec 0c             	sub    $0xc,%esp
801094bd:	68 a3 f3 10 80       	push   $0x8010f3a3
801094c2:	e8 09 6f ff ff       	call   801003d0 <panic>
801094c7:	83 ec 0c             	sub    $0xc,%esp
801094ca:	68 44 f4 10 80       	push   $0x8010f444
801094cf:	e8 fc 6e ff ff       	call   801003d0 <panic>
801094d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801094da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

801094e0 <deallocuvm>:
801094e0:	55                   	push   %ebp
801094e1:	89 e5                	mov    %esp,%ebp
801094e3:	8b 55 0c             	mov    0xc(%ebp),%edx
801094e6:	8b 4d 10             	mov    0x10(%ebp),%ecx
801094e9:	8b 45 08             	mov    0x8(%ebp),%eax
801094ec:	39 d1                	cmp    %edx,%ecx
801094ee:	73 10                	jae    80109500 <deallocuvm+0x20>
801094f0:	5d                   	pop    %ebp
801094f1:	e9 da fb ff ff       	jmp    801090d0 <deallocuvm.part.0>
801094f6:	8d 76 00             	lea    0x0(%esi),%esi
801094f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109500:	89 d0                	mov    %edx,%eax
80109502:	5d                   	pop    %ebp
80109503:	c3                   	ret    
80109504:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010950a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80109510 <dec_protect_mem>:
80109510:	55                   	push   %ebp
80109511:	89 e5                	mov    %esp,%ebp
80109513:	53                   	push   %ebx
80109514:	83 ec 04             	sub    $0x4,%esp
80109517:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010951a:	e8 d1 39 00 00       	call   8010cef0 <cgroup_root>
8010951f:	39 d8                	cmp    %ebx,%eax
80109521:	b8 01 00 00 00       	mov    $0x1,%eax
80109526:	74 13                	je     8010953b <dec_protect_mem+0x2b>
80109528:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
8010952f:	74 0a                	je     8010953b <dec_protect_mem+0x2b>
80109531:	8b 93 58 03 00 00    	mov    0x358(%ebx),%edx
80109537:	85 d2                	test   %edx,%edx
80109539:	75 05                	jne    80109540 <dec_protect_mem+0x30>
8010953b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010953e:	c9                   	leave  
8010953f:	c3                   	ret    
80109540:	83 ec 0c             	sub    $0xc,%esp
80109543:	6a 01                	push   $0x1
80109545:	e8 76 99 ff ff       	call   80102ec0 <decrese_protect_counter>
8010954a:	83 ab 58 03 00 00 01 	subl   $0x1,0x358(%ebx)
80109551:	83 c4 10             	add    $0x10,%esp
80109554:	31 c0                	xor    %eax,%eax
80109556:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80109559:	c9                   	leave  
8010955a:	c3                   	ret    
8010955b:	90                   	nop
8010955c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109560 <allocuvm>:
80109560:	55                   	push   %ebp
80109561:	89 e5                	mov    %esp,%ebp
80109563:	57                   	push   %edi
80109564:	56                   	push   %esi
80109565:	53                   	push   %ebx
80109566:	83 ec 1c             	sub    $0x1c,%esp
80109569:	8b 4d 10             	mov    0x10(%ebp),%ecx
8010956c:	85 c9                	test   %ecx,%ecx
8010956e:	0f 88 e4 00 00 00    	js     80109658 <allocuvm+0xf8>
80109574:	8b 45 0c             	mov    0xc(%ebp),%eax
80109577:	39 45 10             	cmp    %eax,0x10(%ebp)
8010957a:	0f 82 cb 00 00 00    	jb     8010964b <allocuvm+0xeb>
80109580:	8b 45 0c             	mov    0xc(%ebp),%eax
80109583:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80109589:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
8010958f:	39 5d 10             	cmp    %ebx,0x10(%ebp)
80109592:	0f 86 1f 01 00 00    	jbe    801096b7 <allocuvm+0x157>
80109598:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010959f:	31 ff                	xor    %edi,%edi
801095a1:	eb 4d                	jmp    801095f0 <allocuvm+0x90>
801095a3:	90                   	nop
801095a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801095a8:	83 ec 04             	sub    $0x4,%esp
801095ab:	68 00 10 00 00       	push   $0x1000
801095b0:	6a 00                	push   $0x0
801095b2:	50                   	push   %eax
801095b3:	e8 28 ce ff ff       	call   801063e0 <memset>
801095b8:	58                   	pop    %eax
801095b9:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
801095bf:	b9 00 10 00 00       	mov    $0x1000,%ecx
801095c4:	5a                   	pop    %edx
801095c5:	6a 06                	push   $0x6
801095c7:	50                   	push   %eax
801095c8:	89 da                	mov    %ebx,%edx
801095ca:	8b 45 08             	mov    0x8(%ebp),%eax
801095cd:	e8 6e fa ff ff       	call   80109040 <mappages>
801095d2:	83 c4 10             	add    $0x10,%esp
801095d5:	85 c0                	test   %eax,%eax
801095d7:	0f 88 8b 00 00 00    	js     80109668 <allocuvm+0x108>
801095dd:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
801095e1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
801095e7:	39 5d 10             	cmp    %ebx,0x10(%ebp)
801095ea:	0f 86 b0 00 00 00    	jbe    801096a0 <allocuvm+0x140>
801095f0:	83 ec 0c             	sub    $0xc,%esp
801095f3:	ff 75 14             	pushl  0x14(%ebp)
801095f6:	e8 15 ff ff ff       	call   80109510 <dec_protect_mem>
801095fb:	83 c4 10             	add    $0x10,%esp
801095fe:	83 f8 01             	cmp    $0x1,%eax
80109601:	83 d7 00             	adc    $0x0,%edi
80109604:	e8 c7 99 ff ff       	call   80102fd0 <kalloc>
80109609:	85 c0                	test   %eax,%eax
8010960b:	89 c6                	mov    %eax,%esi
8010960d:	75 99                	jne    801095a8 <allocuvm+0x48>
8010960f:	83 ec 0c             	sub    $0xc,%esp
80109612:	68 c1 f3 10 80       	push   $0x8010f3c1
80109617:	e8 44 70 ff ff       	call   80100660 <cprintf>
8010961c:	83 c4 10             	add    $0x10,%esp
8010961f:	8b 45 0c             	mov    0xc(%ebp),%eax
80109622:	39 45 10             	cmp    %eax,0x10(%ebp)
80109625:	76 0d                	jbe    80109634 <allocuvm+0xd4>
80109627:	89 c1                	mov    %eax,%ecx
80109629:	8b 55 10             	mov    0x10(%ebp),%edx
8010962c:	8b 45 08             	mov    0x8(%ebp),%eax
8010962f:	e8 9c fa ff ff       	call   801090d0 <deallocuvm.part.0>
80109634:	83 ec 0c             	sub    $0xc,%esp
80109637:	57                   	push   %edi
80109638:	e8 e3 98 ff ff       	call   80102f20 <increse_protect_counter>
8010963d:	8b 45 14             	mov    0x14(%ebp),%eax
80109640:	83 c4 10             	add    $0x10,%esp
80109643:	01 b8 58 03 00 00    	add    %edi,0x358(%eax)
80109649:	31 c0                	xor    %eax,%eax
8010964b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010964e:	5b                   	pop    %ebx
8010964f:	5e                   	pop    %esi
80109650:	5f                   	pop    %edi
80109651:	5d                   	pop    %ebp
80109652:	c3                   	ret    
80109653:	90                   	nop
80109654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109658:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010965b:	31 c0                	xor    %eax,%eax
8010965d:	5b                   	pop    %ebx
8010965e:	5e                   	pop    %esi
8010965f:	5f                   	pop    %edi
80109660:	5d                   	pop    %ebp
80109661:	c3                   	ret    
80109662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109668:	83 ec 0c             	sub    $0xc,%esp
8010966b:	68 d9 f3 10 80       	push   $0x8010f3d9
80109670:	e8 eb 6f ff ff       	call   80100660 <cprintf>
80109675:	83 c4 10             	add    $0x10,%esp
80109678:	8b 45 0c             	mov    0xc(%ebp),%eax
8010967b:	39 45 10             	cmp    %eax,0x10(%ebp)
8010967e:	76 0d                	jbe    8010968d <allocuvm+0x12d>
80109680:	89 c1                	mov    %eax,%ecx
80109682:	8b 55 10             	mov    0x10(%ebp),%edx
80109685:	8b 45 08             	mov    0x8(%ebp),%eax
80109688:	e8 43 fa ff ff       	call   801090d0 <deallocuvm.part.0>
8010968d:	83 ec 0c             	sub    $0xc,%esp
80109690:	56                   	push   %esi
80109691:	e8 6a 96 ff ff       	call   80102d00 <kfree>
80109696:	89 3c 24             	mov    %edi,(%esp)
80109699:	eb 9d                	jmp    80109638 <allocuvm+0xd8>
8010969b:	90                   	nop
8010969c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801096a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801096a3:	8b 55 14             	mov    0x14(%ebp),%edx
801096a6:	01 82 3c 03 00 00    	add    %eax,0x33c(%edx)
801096ac:	8b 45 10             	mov    0x10(%ebp),%eax
801096af:	8d 65 f4             	lea    -0xc(%ebp),%esp
801096b2:	5b                   	pop    %ebx
801096b3:	5e                   	pop    %esi
801096b4:	5f                   	pop    %edi
801096b5:	5d                   	pop    %ebp
801096b6:	c3                   	ret    
801096b7:	31 c0                	xor    %eax,%eax
801096b9:	eb e8                	jmp    801096a3 <allocuvm+0x143>
801096bb:	90                   	nop
801096bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801096c0 <inc_protect_mem>:
801096c0:	55                   	push   %ebp
801096c1:	89 e5                	mov    %esp,%ebp
801096c3:	56                   	push   %esi
801096c4:	53                   	push   %ebx
801096c5:	8b 75 0c             	mov    0xc(%ebp),%esi
801096c8:	8b 5d 08             	mov    0x8(%ebp),%ebx
801096cb:	83 ec 0c             	sub    $0xc,%esp
801096ce:	56                   	push   %esi
801096cf:	e8 4c 98 ff ff       	call   80102f20 <increse_protect_counter>
801096d4:	01 b3 58 03 00 00    	add    %esi,0x358(%ebx)
801096da:	83 c4 10             	add    $0x10,%esp
801096dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
801096e0:	5b                   	pop    %ebx
801096e1:	5e                   	pop    %esi
801096e2:	5d                   	pop    %ebp
801096e3:	c3                   	ret    
801096e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801096ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

801096f0 <freevm>:
801096f0:	55                   	push   %ebp
801096f1:	89 e5                	mov    %esp,%ebp
801096f3:	57                   	push   %edi
801096f4:	56                   	push   %esi
801096f5:	53                   	push   %ebx
801096f6:	83 ec 0c             	sub    $0xc,%esp
801096f9:	8b 75 08             	mov    0x8(%ebp),%esi
801096fc:	85 f6                	test   %esi,%esi
801096fe:	74 59                	je     80109759 <freevm+0x69>
80109700:	31 c9                	xor    %ecx,%ecx
80109702:	ba 00 00 00 80       	mov    $0x80000000,%edx
80109707:	89 f0                	mov    %esi,%eax
80109709:	e8 c2 f9 ff ff       	call   801090d0 <deallocuvm.part.0>
8010970e:	89 f3                	mov    %esi,%ebx
80109710:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
80109716:	eb 0f                	jmp    80109727 <freevm+0x37>
80109718:	90                   	nop
80109719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109720:	83 c3 04             	add    $0x4,%ebx
80109723:	39 fb                	cmp    %edi,%ebx
80109725:	74 23                	je     8010974a <freevm+0x5a>
80109727:	8b 03                	mov    (%ebx),%eax
80109729:	a8 01                	test   $0x1,%al
8010972b:	74 f3                	je     80109720 <freevm+0x30>
8010972d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80109732:	83 ec 0c             	sub    $0xc,%esp
80109735:	83 c3 04             	add    $0x4,%ebx
80109738:	05 00 00 00 80       	add    $0x80000000,%eax
8010973d:	50                   	push   %eax
8010973e:	e8 bd 95 ff ff       	call   80102d00 <kfree>
80109743:	83 c4 10             	add    $0x10,%esp
80109746:	39 fb                	cmp    %edi,%ebx
80109748:	75 dd                	jne    80109727 <freevm+0x37>
8010974a:	89 75 08             	mov    %esi,0x8(%ebp)
8010974d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109750:	5b                   	pop    %ebx
80109751:	5e                   	pop    %esi
80109752:	5f                   	pop    %edi
80109753:	5d                   	pop    %ebp
80109754:	e9 a7 95 ff ff       	jmp    80102d00 <kfree>
80109759:	83 ec 0c             	sub    $0xc,%esp
8010975c:	68 f5 f3 10 80       	push   $0x8010f3f5
80109761:	e8 6a 6c ff ff       	call   801003d0 <panic>
80109766:	8d 76 00             	lea    0x0(%esi),%esi
80109769:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80109770 <setupkvm>:
80109770:	55                   	push   %ebp
80109771:	89 e5                	mov    %esp,%ebp
80109773:	56                   	push   %esi
80109774:	53                   	push   %ebx
80109775:	e8 56 98 ff ff       	call   80102fd0 <kalloc>
8010977a:	85 c0                	test   %eax,%eax
8010977c:	74 6a                	je     801097e8 <setupkvm+0x78>
8010977e:	83 ec 04             	sub    $0x4,%esp
80109781:	89 c6                	mov    %eax,%esi
80109783:	bb 20 04 12 80       	mov    $0x80120420,%ebx
80109788:	68 00 10 00 00       	push   $0x1000
8010978d:	6a 00                	push   $0x0
8010978f:	50                   	push   %eax
80109790:	e8 4b cc ff ff       	call   801063e0 <memset>
80109795:	83 c4 10             	add    $0x10,%esp
80109798:	8b 43 04             	mov    0x4(%ebx),%eax
8010979b:	8b 4b 08             	mov    0x8(%ebx),%ecx
8010979e:	83 ec 08             	sub    $0x8,%esp
801097a1:	8b 13                	mov    (%ebx),%edx
801097a3:	ff 73 0c             	pushl  0xc(%ebx)
801097a6:	50                   	push   %eax
801097a7:	29 c1                	sub    %eax,%ecx
801097a9:	89 f0                	mov    %esi,%eax
801097ab:	e8 90 f8 ff ff       	call   80109040 <mappages>
801097b0:	83 c4 10             	add    $0x10,%esp
801097b3:	85 c0                	test   %eax,%eax
801097b5:	78 19                	js     801097d0 <setupkvm+0x60>
801097b7:	83 c3 10             	add    $0x10,%ebx
801097ba:	81 fb 60 04 12 80    	cmp    $0x80120460,%ebx
801097c0:	75 d6                	jne    80109798 <setupkvm+0x28>
801097c2:	89 f0                	mov    %esi,%eax
801097c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
801097c7:	5b                   	pop    %ebx
801097c8:	5e                   	pop    %esi
801097c9:	5d                   	pop    %ebp
801097ca:	c3                   	ret    
801097cb:	90                   	nop
801097cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801097d0:	83 ec 0c             	sub    $0xc,%esp
801097d3:	56                   	push   %esi
801097d4:	e8 17 ff ff ff       	call   801096f0 <freevm>
801097d9:	83 c4 10             	add    $0x10,%esp
801097dc:	8d 65 f8             	lea    -0x8(%ebp),%esp
801097df:	31 c0                	xor    %eax,%eax
801097e1:	5b                   	pop    %ebx
801097e2:	5e                   	pop    %esi
801097e3:	5d                   	pop    %ebp
801097e4:	c3                   	ret    
801097e5:	8d 76 00             	lea    0x0(%esi),%esi
801097e8:	31 c0                	xor    %eax,%eax
801097ea:	eb d8                	jmp    801097c4 <setupkvm+0x54>
801097ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801097f0 <kvmalloc>:
801097f0:	55                   	push   %ebp
801097f1:	89 e5                	mov    %esp,%ebp
801097f3:	83 ec 08             	sub    $0x8,%esp
801097f6:	e8 75 ff ff ff       	call   80109770 <setupkvm>
801097fb:	a3 04 c4 13 80       	mov    %eax,0x8013c404
80109800:	05 00 00 00 80       	add    $0x80000000,%eax
80109805:	0f 22 d8             	mov    %eax,%cr3
80109808:	c9                   	leave  
80109809:	c3                   	ret    
8010980a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80109810 <clearpteu>:
80109810:	55                   	push   %ebp
80109811:	31 c9                	xor    %ecx,%ecx
80109813:	89 e5                	mov    %esp,%ebp
80109815:	83 ec 08             	sub    $0x8,%esp
80109818:	8b 55 0c             	mov    0xc(%ebp),%edx
8010981b:	8b 45 08             	mov    0x8(%ebp),%eax
8010981e:	e8 9d f7 ff ff       	call   80108fc0 <walkpgdir>
80109823:	85 c0                	test   %eax,%eax
80109825:	74 05                	je     8010982c <clearpteu+0x1c>
80109827:	83 20 fb             	andl   $0xfffffffb,(%eax)
8010982a:	c9                   	leave  
8010982b:	c3                   	ret    
8010982c:	83 ec 0c             	sub    $0xc,%esp
8010982f:	68 06 f4 10 80       	push   $0x8010f406
80109834:	e8 97 6b ff ff       	call   801003d0 <panic>
80109839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80109840 <copyuvm>:
80109840:	55                   	push   %ebp
80109841:	89 e5                	mov    %esp,%ebp
80109843:	57                   	push   %edi
80109844:	56                   	push   %esi
80109845:	53                   	push   %ebx
80109846:	83 ec 1c             	sub    $0x1c,%esp
80109849:	e8 22 ff ff ff       	call   80109770 <setupkvm>
8010984e:	85 c0                	test   %eax,%eax
80109850:	89 45 e0             	mov    %eax,-0x20(%ebp)
80109853:	0f 84 b2 00 00 00    	je     8010990b <copyuvm+0xcb>
80109859:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010985c:	85 c9                	test   %ecx,%ecx
8010985e:	0f 84 9c 00 00 00    	je     80109900 <copyuvm+0xc0>
80109864:	31 f6                	xor    %esi,%esi
80109866:	eb 4a                	jmp    801098b2 <copyuvm+0x72>
80109868:	90                   	nop
80109869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109870:	83 ec 04             	sub    $0x4,%esp
80109873:	81 c7 00 00 00 80    	add    $0x80000000,%edi
80109879:	68 00 10 00 00       	push   $0x1000
8010987e:	57                   	push   %edi
8010987f:	50                   	push   %eax
80109880:	e8 0b cc ff ff       	call   80106490 <memmove>
80109885:	58                   	pop    %eax
80109886:	5a                   	pop    %edx
80109887:	8d 93 00 00 00 80    	lea    -0x80000000(%ebx),%edx
8010988d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109890:	ff 75 e4             	pushl  -0x1c(%ebp)
80109893:	b9 00 10 00 00       	mov    $0x1000,%ecx
80109898:	52                   	push   %edx
80109899:	89 f2                	mov    %esi,%edx
8010989b:	e8 a0 f7 ff ff       	call   80109040 <mappages>
801098a0:	83 c4 10             	add    $0x10,%esp
801098a3:	85 c0                	test   %eax,%eax
801098a5:	78 3e                	js     801098e5 <copyuvm+0xa5>
801098a7:	81 c6 00 10 00 00    	add    $0x1000,%esi
801098ad:	39 75 0c             	cmp    %esi,0xc(%ebp)
801098b0:	76 4e                	jbe    80109900 <copyuvm+0xc0>
801098b2:	8b 45 08             	mov    0x8(%ebp),%eax
801098b5:	31 c9                	xor    %ecx,%ecx
801098b7:	89 f2                	mov    %esi,%edx
801098b9:	e8 02 f7 ff ff       	call   80108fc0 <walkpgdir>
801098be:	85 c0                	test   %eax,%eax
801098c0:	74 5a                	je     8010991c <copyuvm+0xdc>
801098c2:	8b 18                	mov    (%eax),%ebx
801098c4:	f6 c3 01             	test   $0x1,%bl
801098c7:	74 46                	je     8010990f <copyuvm+0xcf>
801098c9:	89 df                	mov    %ebx,%edi
801098cb:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
801098d1:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
801098d4:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
801098da:	e8 f1 96 ff ff       	call   80102fd0 <kalloc>
801098df:	85 c0                	test   %eax,%eax
801098e1:	89 c3                	mov    %eax,%ebx
801098e3:	75 8b                	jne    80109870 <copyuvm+0x30>
801098e5:	83 ec 0c             	sub    $0xc,%esp
801098e8:	ff 75 e0             	pushl  -0x20(%ebp)
801098eb:	e8 00 fe ff ff       	call   801096f0 <freevm>
801098f0:	83 c4 10             	add    $0x10,%esp
801098f3:	31 c0                	xor    %eax,%eax
801098f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
801098f8:	5b                   	pop    %ebx
801098f9:	5e                   	pop    %esi
801098fa:	5f                   	pop    %edi
801098fb:	5d                   	pop    %ebp
801098fc:	c3                   	ret    
801098fd:	8d 76 00             	lea    0x0(%esi),%esi
80109900:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109903:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109906:	5b                   	pop    %ebx
80109907:	5e                   	pop    %esi
80109908:	5f                   	pop    %edi
80109909:	5d                   	pop    %ebp
8010990a:	c3                   	ret    
8010990b:	31 c0                	xor    %eax,%eax
8010990d:	eb e6                	jmp    801098f5 <copyuvm+0xb5>
8010990f:	83 ec 0c             	sub    $0xc,%esp
80109912:	68 2a f4 10 80       	push   $0x8010f42a
80109917:	e8 b4 6a ff ff       	call   801003d0 <panic>
8010991c:	83 ec 0c             	sub    $0xc,%esp
8010991f:	68 10 f4 10 80       	push   $0x8010f410
80109924:	e8 a7 6a ff ff       	call   801003d0 <panic>
80109929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80109930 <uva2ka>:
80109930:	55                   	push   %ebp
80109931:	31 c9                	xor    %ecx,%ecx
80109933:	89 e5                	mov    %esp,%ebp
80109935:	83 ec 08             	sub    $0x8,%esp
80109938:	8b 55 0c             	mov    0xc(%ebp),%edx
8010993b:	8b 45 08             	mov    0x8(%ebp),%eax
8010993e:	e8 7d f6 ff ff       	call   80108fc0 <walkpgdir>
80109943:	8b 00                	mov    (%eax),%eax
80109945:	89 c2                	mov    %eax,%edx
80109947:	83 e2 05             	and    $0x5,%edx
8010994a:	83 fa 05             	cmp    $0x5,%edx
8010994d:	75 11                	jne    80109960 <uva2ka+0x30>
8010994f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80109954:	c9                   	leave  
80109955:	05 00 00 00 80       	add    $0x80000000,%eax
8010995a:	c3                   	ret    
8010995b:	90                   	nop
8010995c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109960:	31 c0                	xor    %eax,%eax
80109962:	c9                   	leave  
80109963:	c3                   	ret    
80109964:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010996a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

80109970 <copyout>:
80109970:	55                   	push   %ebp
80109971:	89 e5                	mov    %esp,%ebp
80109973:	57                   	push   %edi
80109974:	56                   	push   %esi
80109975:	53                   	push   %ebx
80109976:	83 ec 1c             	sub    $0x1c,%esp
80109979:	8b 5d 14             	mov    0x14(%ebp),%ebx
8010997c:	8b 55 0c             	mov    0xc(%ebp),%edx
8010997f:	8b 7d 10             	mov    0x10(%ebp),%edi
80109982:	85 db                	test   %ebx,%ebx
80109984:	75 40                	jne    801099c6 <copyout+0x56>
80109986:	eb 70                	jmp    801099f8 <copyout+0x88>
80109988:	90                   	nop
80109989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109990:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80109993:	89 f1                	mov    %esi,%ecx
80109995:	29 d1                	sub    %edx,%ecx
80109997:	81 c1 00 10 00 00    	add    $0x1000,%ecx
8010999d:	39 d9                	cmp    %ebx,%ecx
8010999f:	0f 47 cb             	cmova  %ebx,%ecx
801099a2:	29 f2                	sub    %esi,%edx
801099a4:	83 ec 04             	sub    $0x4,%esp
801099a7:	01 d0                	add    %edx,%eax
801099a9:	51                   	push   %ecx
801099aa:	57                   	push   %edi
801099ab:	50                   	push   %eax
801099ac:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
801099af:	e8 dc ca ff ff       	call   80106490 <memmove>
801099b4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801099b7:	83 c4 10             	add    $0x10,%esp
801099ba:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
801099c0:	01 cf                	add    %ecx,%edi
801099c2:	29 cb                	sub    %ecx,%ebx
801099c4:	74 32                	je     801099f8 <copyout+0x88>
801099c6:	89 d6                	mov    %edx,%esi
801099c8:	83 ec 08             	sub    $0x8,%esp
801099cb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
801099ce:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
801099d4:	56                   	push   %esi
801099d5:	ff 75 08             	pushl  0x8(%ebp)
801099d8:	e8 53 ff ff ff       	call   80109930 <uva2ka>
801099dd:	83 c4 10             	add    $0x10,%esp
801099e0:	85 c0                	test   %eax,%eax
801099e2:	75 ac                	jne    80109990 <copyout+0x20>
801099e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801099e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801099ec:	5b                   	pop    %ebx
801099ed:	5e                   	pop    %esi
801099ee:	5f                   	pop    %edi
801099ef:	5d                   	pop    %ebp
801099f0:	c3                   	ret    
801099f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801099f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801099fb:	31 c0                	xor    %eax,%eax
801099fd:	5b                   	pop    %ebx
801099fe:	5e                   	pop    %esi
801099ff:	5f                   	pop    %edi
80109a00:	5d                   	pop    %ebp
80109a01:	c3                   	ret    
80109a02:	66 90                	xchg   %ax,%ax
80109a04:	66 90                	xchg   %ax,%ax
80109a06:	66 90                	xchg   %ax,%ax
80109a08:	66 90                	xchg   %ax,%ax
80109a0a:	66 90                	xchg   %ax,%ax
80109a0c:	66 90                	xchg   %ax,%ax
80109a0e:	66 90                	xchg   %ax,%ax

80109a10 <__udivmoddi4>:
80109a10:	55                   	push   %ebp
80109a11:	89 e5                	mov    %esp,%ebp
80109a13:	57                   	push   %edi
80109a14:	56                   	push   %esi
80109a15:	53                   	push   %ebx
80109a16:	83 ec 3c             	sub    $0x3c,%esp
80109a19:	8b 45 0c             	mov    0xc(%ebp),%eax
80109a1c:	8b 55 14             	mov    0x14(%ebp),%edx
80109a1f:	8b 7d 08             	mov    0x8(%ebp),%edi
80109a22:	89 c3                	mov    %eax,%ebx
80109a24:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80109a27:	8b 45 10             	mov    0x10(%ebp),%eax
80109a2a:	85 db                	test   %ebx,%ebx
80109a2c:	89 d1                	mov    %edx,%ecx
80109a2e:	89 55 dc             	mov    %edx,-0x24(%ebp)
80109a31:	89 7d e0             	mov    %edi,-0x20(%ebp)
80109a34:	89 45 d8             	mov    %eax,-0x28(%ebp)
80109a37:	75 3f                	jne    80109a78 <__udivmoddi4+0x68>
80109a39:	85 d2                	test   %edx,%edx
80109a3b:	0f 85 ef 00 00 00    	jne    80109b30 <__udivmoddi4+0x120>
80109a41:	8b 45 18             	mov    0x18(%ebp),%eax
80109a44:	8b 5d d8             	mov    -0x28(%ebp),%ebx
80109a47:	89 f9                	mov    %edi,%ecx
80109a49:	85 c0                	test   %eax,%eax
80109a4b:	74 17                	je     80109a64 <__udivmoddi4+0x54>
80109a4d:	8b 5d d8             	mov    -0x28(%ebp),%ebx
80109a50:	89 f8                	mov    %edi,%eax
80109a52:	31 d2                	xor    %edx,%edx
80109a54:	89 f9                	mov    %edi,%ecx
80109a56:	f7 f3                	div    %ebx
80109a58:	8b 45 18             	mov    0x18(%ebp),%eax
80109a5b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
80109a62:	89 10                	mov    %edx,(%eax)
80109a64:	83 c4 3c             	add    $0x3c,%esp
80109a67:	89 c8                	mov    %ecx,%eax
80109a69:	31 d2                	xor    %edx,%edx
80109a6b:	f7 f3                	div    %ebx
80109a6d:	5b                   	pop    %ebx
80109a6e:	31 d2                	xor    %edx,%edx
80109a70:	5e                   	pop    %esi
80109a71:	5f                   	pop    %edi
80109a72:	5d                   	pop    %ebp
80109a73:	c3                   	ret    
80109a74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109a78:	8b 55 d8             	mov    -0x28(%ebp),%edx
80109a7b:	85 c0                	test   %eax,%eax
80109a7d:	89 de                	mov    %ebx,%esi
80109a7f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80109a82:	75 3c                	jne    80109ac0 <__udivmoddi4+0xb0>
80109a84:	85 c9                	test   %ecx,%ecx
80109a86:	0f 84 d4 00 00 00    	je     80109b60 <__udivmoddi4+0x150>
80109a8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109a8f:	85 c0                	test   %eax,%eax
80109a91:	0f 85 c9 02 00 00    	jne    80109d60 <__udivmoddi4+0x350>
80109a97:	8b 75 18             	mov    0x18(%ebp),%esi
80109a9a:	85 f6                	test   %esi,%esi
80109a9c:	74 12                	je     80109ab0 <__udivmoddi4+0xa0>
80109a9e:	89 d8                	mov    %ebx,%eax
80109aa0:	31 d2                	xor    %edx,%edx
80109aa2:	f7 f1                	div    %ecx
80109aa4:	8b 45 18             	mov    0x18(%ebp),%eax
80109aa7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80109aad:	89 50 04             	mov    %edx,0x4(%eax)
80109ab0:	89 d8                	mov    %ebx,%eax
80109ab2:	31 d2                	xor    %edx,%edx
80109ab4:	f7 f1                	div    %ecx
80109ab6:	31 d2                	xor    %edx,%edx
80109ab8:	e9 91 00 00 00       	jmp    80109b4e <__udivmoddi4+0x13e>
80109abd:	8d 76 00             	lea    0x0(%esi),%esi
80109ac0:	85 c9                	test   %ecx,%ecx
80109ac2:	89 c8                	mov    %ecx,%eax
80109ac4:	0f 85 c6 00 00 00    	jne    80109b90 <__udivmoddi4+0x180>
80109aca:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80109acd:	8d 51 ff             	lea    -0x1(%ecx),%edx
80109ad0:	85 d1                	test   %edx,%ecx
80109ad2:	0f 85 48 01 00 00    	jne    80109c20 <__udivmoddi4+0x210>
80109ad8:	8b 75 18             	mov    0x18(%ebp),%esi
80109adb:	85 f6                	test   %esi,%esi
80109add:	74 0f                	je     80109aee <__udivmoddi4+0xde>
80109adf:	23 55 e0             	and    -0x20(%ebp),%edx
80109ae2:	8b 45 18             	mov    0x18(%ebp),%eax
80109ae5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
80109aec:	89 10                	mov    %edx,(%eax)
80109aee:	89 f8                	mov    %edi,%eax
80109af0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80109af3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
80109af6:	83 ff 01             	cmp    $0x1,%edi
80109af9:	74 53                	je     80109b4e <__udivmoddi4+0x13e>
80109afb:	31 f6                	xor    %esi,%esi
80109afd:	89 d8                	mov    %ebx,%eax
80109aff:	f3 0f bc f7          	tzcnt  %edi,%esi
80109b03:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109b06:	89 f1                	mov    %esi,%ecx
80109b08:	d3 e8                	shr    %cl,%eax
80109b0a:	b9 20 00 00 00       	mov    $0x20,%ecx
80109b0f:	89 45 bc             	mov    %eax,-0x44(%ebp)
80109b12:	29 f1                	sub    %esi,%ecx
80109b14:	89 d8                	mov    %ebx,%eax
80109b16:	d3 e0                	shl    %cl,%eax
80109b18:	89 f1                	mov    %esi,%ecx
80109b1a:	8b 55 bc             	mov    -0x44(%ebp),%edx
80109b1d:	d3 ef                	shr    %cl,%edi
80109b1f:	09 f8                	or     %edi,%eax
80109b21:	89 45 b8             	mov    %eax,-0x48(%ebp)
80109b24:	8b 45 b8             	mov    -0x48(%ebp),%eax
80109b27:	eb 25                	jmp    80109b4e <__udivmoddi4+0x13e>
80109b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109b30:	8b 45 18             	mov    0x18(%ebp),%eax
80109b33:	85 c0                	test   %eax,%eax
80109b35:	0f 84 bc 00 00 00    	je     80109bf7 <__udivmoddi4+0x1e7>
80109b3b:	8b 45 18             	mov    0x18(%ebp),%eax
80109b3e:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109b41:	31 d2                	xor    %edx,%edx
80109b43:	89 38                	mov    %edi,(%eax)
80109b45:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
80109b4c:	31 c0                	xor    %eax,%eax
80109b4e:	83 c4 3c             	add    $0x3c,%esp
80109b51:	5b                   	pop    %ebx
80109b52:	5e                   	pop    %esi
80109b53:	5f                   	pop    %edi
80109b54:	5d                   	pop    %ebp
80109b55:	c3                   	ret    
80109b56:	8d 76 00             	lea    0x0(%esi),%esi
80109b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109b60:	8b 45 18             	mov    0x18(%ebp),%eax
80109b63:	85 c0                	test   %eax,%eax
80109b65:	74 12                	je     80109b79 <__udivmoddi4+0x169>
80109b67:	89 d8                	mov    %ebx,%eax
80109b69:	31 d2                	xor    %edx,%edx
80109b6b:	f7 f1                	div    %ecx
80109b6d:	8b 45 18             	mov    0x18(%ebp),%eax
80109b70:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
80109b77:	89 10                	mov    %edx,(%eax)
80109b79:	83 c4 3c             	add    $0x3c,%esp
80109b7c:	89 d8                	mov    %ebx,%eax
80109b7e:	31 c9                	xor    %ecx,%ecx
80109b80:	31 d2                	xor    %edx,%edx
80109b82:	5b                   	pop    %ebx
80109b83:	f7 f1                	div    %ecx
80109b85:	5e                   	pop    %esi
80109b86:	31 d2                	xor    %edx,%edx
80109b88:	5f                   	pop    %edi
80109b89:	5d                   	pop    %ebp
80109b8a:	c3                   	ret    
80109b8b:	90                   	nop
80109b8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109b90:	0f bd c9             	bsr    %ecx,%ecx
80109b93:	0f bd c3             	bsr    %ebx,%eax
80109b96:	83 f1 1f             	xor    $0x1f,%ecx
80109b99:	83 f0 1f             	xor    $0x1f,%eax
80109b9c:	29 c1                	sub    %eax,%ecx
80109b9e:	83 f9 1f             	cmp    $0x1f,%ecx
80109ba1:	77 4d                	ja     80109bf0 <__udivmoddi4+0x1e0>
80109ba3:	8d 41 01             	lea    0x1(%ecx),%eax
80109ba6:	83 f8 20             	cmp    $0x20,%eax
80109ba9:	89 45 cc             	mov    %eax,-0x34(%ebp)
80109bac:	0f 84 26 02 00 00    	je     80109dd8 <__udivmoddi4+0x3c8>
80109bb2:	8b 45 cc             	mov    -0x34(%ebp),%eax
80109bb5:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109bb8:	ba 20 00 00 00       	mov    $0x20,%edx
80109bbd:	29 c2                	sub    %eax,%edx
80109bbf:	89 fb                	mov    %edi,%ebx
80109bc1:	89 d1                	mov    %edx,%ecx
80109bc3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80109bc6:	89 f2                	mov    %esi,%edx
80109bc8:	d3 e3                	shl    %cl,%ebx
80109bca:	89 c1                	mov    %eax,%ecx
80109bcc:	d3 ea                	shr    %cl,%edx
80109bce:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
80109bd2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109bd9:	89 d0                	mov    %edx,%eax
80109bdb:	89 fa                	mov    %edi,%edx
80109bdd:	d3 e6                	shl    %cl,%esi
80109bdf:	0f b6 4d cc          	movzbl -0x34(%ebp),%ecx
80109be3:	d3 ea                	shr    %cl,%edx
80109be5:	09 d6                	or     %edx,%esi
80109be7:	e9 94 00 00 00       	jmp    80109c80 <__udivmoddi4+0x270>
80109bec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109bf0:	8b 45 18             	mov    0x18(%ebp),%eax
80109bf3:	85 c0                	test   %eax,%eax
80109bf5:	75 0c                	jne    80109c03 <__udivmoddi4+0x1f3>
80109bf7:	83 c4 3c             	add    $0x3c,%esp
80109bfa:	31 c0                	xor    %eax,%eax
80109bfc:	31 d2                	xor    %edx,%edx
80109bfe:	5b                   	pop    %ebx
80109bff:	5e                   	pop    %esi
80109c00:	5f                   	pop    %edi
80109c01:	5d                   	pop    %ebp
80109c02:	c3                   	ret    
80109c03:	8b 45 18             	mov    0x18(%ebp),%eax
80109c06:	31 d2                	xor    %edx,%edx
80109c08:	89 38                	mov    %edi,(%eax)
80109c0a:	8b 7d d4             	mov    -0x2c(%ebp),%edi
80109c0d:	89 78 04             	mov    %edi,0x4(%eax)
80109c10:	31 c0                	xor    %eax,%eax
80109c12:	e9 37 ff ff ff       	jmp    80109b4e <__udivmoddi4+0x13e>
80109c17:	89 f6                	mov    %esi,%esi
80109c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109c20:	0f bd 4d e4          	bsr    -0x1c(%ebp),%ecx
80109c24:	0f bd d3             	bsr    %ebx,%edx
80109c27:	83 f2 1f             	xor    $0x1f,%edx
80109c2a:	83 f1 1f             	xor    $0x1f,%ecx
80109c2d:	89 cb                	mov    %ecx,%ebx
80109c2f:	29 d3                	sub    %edx,%ebx
80109c31:	8d 4b 21             	lea    0x21(%ebx),%ecx
80109c34:	83 f9 20             	cmp    $0x20,%ecx
80109c37:	89 4d cc             	mov    %ecx,-0x34(%ebp)
80109c3a:	0f 84 b0 01 00 00    	je     80109df0 <__udivmoddi4+0x3e0>
80109c40:	8b 7d cc             	mov    -0x34(%ebp),%edi
80109c43:	83 ff 1f             	cmp    $0x1f,%edi
80109c46:	0f 87 b4 01 00 00    	ja     80109e00 <__udivmoddi4+0x3f0>
80109c4c:	b8 20 00 00 00       	mov    $0x20,%eax
80109c51:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80109c54:	89 f2                	mov    %esi,%edx
80109c56:	29 f8                	sub    %edi,%eax
80109c58:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109c5f:	89 c1                	mov    %eax,%ecx
80109c61:	d3 e3                	shl    %cl,%ebx
80109c63:	89 f9                	mov    %edi,%ecx
80109c65:	d3 ea                	shr    %cl,%edx
80109c67:	89 c1                	mov    %eax,%ecx
80109c69:	8b 45 e0             	mov    -0x20(%ebp),%eax
80109c6c:	d3 e6                	shl    %cl,%esi
80109c6e:	89 f9                	mov    %edi,%ecx
80109c70:	d3 e8                	shr    %cl,%eax
80109c72:	09 c6                	or     %eax,%esi
80109c74:	89 d0                	mov    %edx,%eax
80109c76:	8d 76 00             	lea    0x0(%esi),%esi
80109c79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109c80:	8b 55 d8             	mov    -0x28(%ebp),%edx
80109c83:	8b 4d dc             	mov    -0x24(%ebp),%ecx
80109c86:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
80109c8d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
80109c90:	83 c2 ff             	add    $0xffffffff,%edx
80109c93:	83 d1 ff             	adc    $0xffffffff,%ecx
80109c96:	89 55 c0             	mov    %edx,-0x40(%ebp)
80109c99:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
80109c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109ca0:	89 f7                	mov    %esi,%edi
80109ca2:	8d 14 36             	lea    (%esi,%esi,1),%edx
80109ca5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80109ca8:	c1 ef 1f             	shr    $0x1f,%edi
80109cab:	01 c0                	add    %eax,%eax
80109cad:	89 7d d0             	mov    %edi,-0x30(%ebp)
80109cb0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
80109cb3:	89 fe                	mov    %edi,%esi
80109cb5:	01 ff                	add    %edi,%edi
80109cb7:	c1 ee 1f             	shr    $0x1f,%esi
80109cba:	89 f1                	mov    %esi,%ecx
80109cbc:	89 de                	mov    %ebx,%esi
80109cbe:	09 d1                	or     %edx,%ecx
80109cc0:	8b 55 d0             	mov    -0x30(%ebp),%edx
80109cc3:	c1 ee 1f             	shr    $0x1f,%esi
80109cc6:	09 f7                	or     %esi,%edi
80109cc8:	89 de                	mov    %ebx,%esi
80109cca:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80109ccd:	89 7d d4             	mov    %edi,-0x2c(%ebp)
80109cd0:	01 f6                	add    %esi,%esi
80109cd2:	09 c2                	or     %eax,%edx
80109cd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
80109cd7:	89 d7                	mov    %edx,%edi
80109cd9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
80109cdc:	09 f3                	or     %esi,%ebx
80109cde:	89 ce                	mov    %ecx,%esi
80109ce0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
80109ce3:	29 c8                	sub    %ecx,%eax
80109ce5:	19 fa                	sbb    %edi,%edx
80109ce7:	89 d0                	mov    %edx,%eax
80109ce9:	8b 55 d8             	mov    -0x28(%ebp),%edx
80109cec:	c1 f8 1f             	sar    $0x1f,%eax
80109cef:	89 c1                	mov    %eax,%ecx
80109cf1:	83 e1 01             	and    $0x1,%ecx
80109cf4:	89 d3                	mov    %edx,%ebx
80109cf6:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80109cf9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
80109cfc:	21 c3                	and    %eax,%ebx
80109cfe:	89 5d e8             	mov    %ebx,-0x18(%ebp)
80109d01:	21 c8                	and    %ecx,%eax
80109d03:	2b 75 e8             	sub    -0x18(%ebp),%esi
80109d06:	89 45 ec             	mov    %eax,-0x14(%ebp)
80109d09:	1b 7d ec             	sbb    -0x14(%ebp),%edi
80109d0c:	83 6d cc 01          	subl   $0x1,-0x34(%ebp)
80109d10:	89 f8                	mov    %edi,%eax
80109d12:	75 8c                	jne    80109ca0 <__udivmoddi4+0x290>
80109d14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80109d17:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
80109d1a:	89 7d ec             	mov    %edi,-0x14(%ebp)
80109d1d:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109d20:	89 75 e8             	mov    %esi,-0x18(%ebp)
80109d23:	89 45 b8             	mov    %eax,-0x48(%ebp)
80109d26:	89 5d bc             	mov    %ebx,-0x44(%ebp)
80109d29:	8b 4d b8             	mov    -0x48(%ebp),%ecx
80109d2c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
80109d2f:	0f a4 cb 01          	shld   $0x1,%ecx,%ebx
80109d33:	01 c9                	add    %ecx,%ecx
80109d35:	09 cf                	or     %ecx,%edi
80109d37:	8b 4d 18             	mov    0x18(%ebp),%ecx
80109d3a:	89 da                	mov    %ebx,%edx
80109d3c:	89 f8                	mov    %edi,%eax
80109d3e:	85 c9                	test   %ecx,%ecx
80109d40:	0f 84 08 fe ff ff    	je     80109b4e <__udivmoddi4+0x13e>
80109d46:	8b 7d 18             	mov    0x18(%ebp),%edi
80109d49:	8b 5d e8             	mov    -0x18(%ebp),%ebx
80109d4c:	8b 75 ec             	mov    -0x14(%ebp),%esi
80109d4f:	89 1f                	mov    %ebx,(%edi)
80109d51:	89 77 04             	mov    %esi,0x4(%edi)
80109d54:	83 c4 3c             	add    $0x3c,%esp
80109d57:	5b                   	pop    %ebx
80109d58:	5e                   	pop    %esi
80109d59:	5f                   	pop    %edi
80109d5a:	5d                   	pop    %ebp
80109d5b:	c3                   	ret    
80109d5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109d60:	8d 41 ff             	lea    -0x1(%ecx),%eax
80109d63:	85 c1                	test   %eax,%ecx
80109d65:	75 29                	jne    80109d90 <__udivmoddi4+0x380>
80109d67:	8b 55 18             	mov    0x18(%ebp),%edx
80109d6a:	85 d2                	test   %edx,%edx
80109d6c:	74 0a                	je     80109d78 <__udivmoddi4+0x368>
80109d6e:	8b 55 18             	mov    0x18(%ebp),%edx
80109d71:	21 d8                	and    %ebx,%eax
80109d73:	89 3a                	mov    %edi,(%edx)
80109d75:	89 42 04             	mov    %eax,0x4(%edx)
80109d78:	f3 0f bc c9          	tzcnt  %ecx,%ecx
80109d7c:	89 d8                	mov    %ebx,%eax
80109d7e:	31 d2                	xor    %edx,%edx
80109d80:	d3 e8                	shr    %cl,%eax
80109d82:	e9 c7 fd ff ff       	jmp    80109b4e <__udivmoddi4+0x13e>
80109d87:	89 f6                	mov    %esi,%esi
80109d89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
80109d90:	0f bd c9             	bsr    %ecx,%ecx
80109d93:	0f bd c3             	bsr    %ebx,%eax
80109d96:	83 f1 1f             	xor    $0x1f,%ecx
80109d99:	83 f0 1f             	xor    $0x1f,%eax
80109d9c:	29 c1                	sub    %eax,%ecx
80109d9e:	83 f9 1e             	cmp    $0x1e,%ecx
80109da1:	0f 87 49 fe ff ff    	ja     80109bf0 <__udivmoddi4+0x1e0>
80109da7:	8d 41 01             	lea    0x1(%ecx),%eax
80109daa:	ba 20 00 00 00       	mov    $0x20,%edx
80109daf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80109db2:	29 c2                	sub    %eax,%edx
80109db4:	89 c7                	mov    %eax,%edi
80109db6:	89 45 cc             	mov    %eax,-0x34(%ebp)
80109db9:	89 d1                	mov    %edx,%ecx
80109dbb:	89 f0                	mov    %esi,%eax
80109dbd:	d3 e3                	shl    %cl,%ebx
80109dbf:	89 f9                	mov    %edi,%ecx
80109dc1:	d3 e8                	shr    %cl,%eax
80109dc3:	89 d1                	mov    %edx,%ecx
80109dc5:	8b 55 e0             	mov    -0x20(%ebp),%edx
80109dc8:	d3 e6                	shl    %cl,%esi
80109dca:	89 f9                	mov    %edi,%ecx
80109dcc:	d3 ea                	shr    %cl,%edx
80109dce:	09 d6                	or     %edx,%esi
80109dd0:	e9 ab fe ff ff       	jmp    80109c80 <__udivmoddi4+0x270>
80109dd5:	8d 76 00             	lea    0x0(%esi),%esi
80109dd8:	89 fb                	mov    %edi,%ebx
80109dda:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109de1:	31 c0                	xor    %eax,%eax
80109de3:	e9 98 fe ff ff       	jmp    80109c80 <__udivmoddi4+0x270>
80109de8:	90                   	nop
80109de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109df0:	89 fb                	mov    %edi,%ebx
80109df2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80109df9:	e9 82 fe ff ff       	jmp    80109c80 <__udivmoddi4+0x270>
80109dfe:	66 90                	xchg   %ax,%ax
80109e00:	b9 40 00 00 00       	mov    $0x40,%ecx
80109e05:	2b 4d cc             	sub    -0x34(%ebp),%ecx
80109e08:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109e0b:	8d 53 01             	lea    0x1(%ebx),%edx
80109e0e:	89 f3                	mov    %esi,%ebx
80109e10:	d3 e7                	shl    %cl,%edi
80109e12:	d3 e3                	shl    %cl,%ebx
80109e14:	89 d1                	mov    %edx,%ecx
80109e16:	89 7d e4             	mov    %edi,-0x1c(%ebp)
80109e19:	8b 7d e0             	mov    -0x20(%ebp),%edi
80109e1c:	d3 ee                	shr    %cl,%esi
80109e1e:	d3 ef                	shr    %cl,%edi
80109e20:	09 fb                	or     %edi,%ebx
80109e22:	e9 59 fe ff ff       	jmp    80109c80 <__udivmoddi4+0x270>
80109e27:	89 f6                	mov    %esi,%esi
80109e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

80109e30 <__udivdi3>:
80109e30:	55                   	push   %ebp
80109e31:	89 e5                	mov    %esp,%ebp
80109e33:	83 ec 04             	sub    $0x4,%esp
80109e36:	6a 00                	push   $0x0
80109e38:	ff 75 14             	pushl  0x14(%ebp)
80109e3b:	ff 75 10             	pushl  0x10(%ebp)
80109e3e:	ff 75 0c             	pushl  0xc(%ebp)
80109e41:	ff 75 08             	pushl  0x8(%ebp)
80109e44:	e8 c7 fb ff ff       	call   80109a10 <__udivmoddi4>
80109e49:	c9                   	leave  
80109e4a:	c3                   	ret    
80109e4b:	90                   	nop
80109e4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109e50 <__umoddi3>:
80109e50:	55                   	push   %ebp
80109e51:	89 e5                	mov    %esp,%ebp
80109e53:	83 ec 14             	sub    $0x14,%esp
80109e56:	8d 45 f8             	lea    -0x8(%ebp),%eax
80109e59:	50                   	push   %eax
80109e5a:	ff 75 14             	pushl  0x14(%ebp)
80109e5d:	ff 75 10             	pushl  0x10(%ebp)
80109e60:	ff 75 0c             	pushl  0xc(%ebp)
80109e63:	ff 75 08             	pushl  0x8(%ebp)
80109e66:	e8 a5 fb ff ff       	call   80109a10 <__udivmoddi4>
80109e6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
80109e6e:	8b 55 fc             	mov    -0x4(%ebp),%edx
80109e71:	c9                   	leave  
80109e72:	c3                   	ret    
80109e73:	66 90                	xchg   %ax,%ax
80109e75:	66 90                	xchg   %ax,%ax
80109e77:	66 90                	xchg   %ax,%ax
80109e79:	66 90                	xchg   %ax,%ax
80109e7b:	66 90                	xchg   %ax,%ax
80109e7d:	66 90                	xchg   %ax,%ax
80109e7f:	90                   	nop

80109e80 <steady_clock_now>:
80109e80:	55                   	push   %ebp
80109e81:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
80109e86:	0f 31                	rdtsc  
80109e88:	89 e5                	mov    %esp,%ebp
80109e8a:	57                   	push   %edi
80109e8b:	56                   	push   %esi
80109e8c:	69 f2 e8 03 00 00    	imul   $0x3e8,%edx,%esi
80109e92:	53                   	push   %ebx
80109e93:	f7 e1                	mul    %ecx
80109e95:	83 ec 0c             	sub    $0xc,%esp
80109e98:	6a 00                	push   $0x0
80109e9a:	68 98 0e 31 00       	push   $0x310e98
80109e9f:	01 f2                	add    %esi,%edx
80109ea1:	52                   	push   %edx
80109ea2:	50                   	push   %eax
80109ea3:	e8 88 ff ff ff       	call   80109e30 <__udivdi3>
80109ea8:	83 c4 10             	add    $0x10,%esp
80109eab:	8d 65 f4             	lea    -0xc(%ebp),%esp
80109eae:	5b                   	pop    %ebx
80109eaf:	5e                   	pop    %esi
80109eb0:	5f                   	pop    %edi
80109eb1:	5d                   	pop    %ebp
80109eb2:	c3                   	ret    
80109eb3:	66 90                	xchg   %ax,%ax
80109eb5:	66 90                	xchg   %ax,%ax
80109eb7:	66 90                	xchg   %ax,%ax
80109eb9:	66 90                	xchg   %ax,%ax
80109ebb:	66 90                	xchg   %ax,%ax
80109ebd:	66 90                	xchg   %ax,%ax
80109ebf:	90                   	nop

80109ec0 <atoi>:
80109ec0:	55                   	push   %ebp
80109ec1:	89 e5                	mov    %esp,%ebp
80109ec3:	53                   	push   %ebx
80109ec4:	8b 4d 08             	mov    0x8(%ebp),%ecx
80109ec7:	0f be 11             	movsbl (%ecx),%edx
80109eca:	84 d2                	test   %dl,%dl
80109ecc:	74 3a                	je     80109f08 <atoi+0x48>
80109ece:	8d 42 d0             	lea    -0x30(%edx),%eax
80109ed1:	3c 09                	cmp    $0x9,%al
80109ed3:	77 2b                	ja     80109f00 <atoi+0x40>
80109ed5:	83 c1 01             	add    $0x1,%ecx
80109ed8:	31 c0                	xor    %eax,%eax
80109eda:	eb 0f                	jmp    80109eeb <atoi+0x2b>
80109edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109ee0:	8d 5a d0             	lea    -0x30(%edx),%ebx
80109ee3:	83 c1 01             	add    $0x1,%ecx
80109ee6:	80 fb 09             	cmp    $0x9,%bl
80109ee9:	77 15                	ja     80109f00 <atoi+0x40>
80109eeb:	8d 04 80             	lea    (%eax,%eax,4),%eax
80109eee:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
80109ef2:	0f be 11             	movsbl (%ecx),%edx
80109ef5:	84 d2                	test   %dl,%dl
80109ef7:	75 e7                	jne    80109ee0 <atoi+0x20>
80109ef9:	5b                   	pop    %ebx
80109efa:	5d                   	pop    %ebp
80109efb:	c3                   	ret    
80109efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80109f00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80109f05:	5b                   	pop    %ebx
80109f06:	5d                   	pop    %ebp
80109f07:	c3                   	ret    
80109f08:	31 c0                	xor    %eax,%eax
80109f0a:	eb ed                	jmp    80109ef9 <atoi+0x39>
80109f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80109f10 <itoa>:
80109f10:	55                   	push   %ebp
80109f11:	89 e5                	mov    %esp,%ebp
80109f13:	57                   	push   %edi
80109f14:	56                   	push   %esi
80109f15:	53                   	push   %ebx
80109f16:	83 ec 04             	sub    $0x4,%esp
80109f19:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80109f1c:	83 f9 00             	cmp    $0x0,%ecx
80109f1f:	7e 76                	jle    80109f97 <itoa+0x87>
80109f21:	89 cb                	mov    %ecx,%ebx
80109f23:	31 f6                	xor    %esi,%esi
80109f25:	bf 67 66 66 66       	mov    $0x66666667,%edi
80109f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109f30:	89 d8                	mov    %ebx,%eax
80109f32:	c1 fb 1f             	sar    $0x1f,%ebx
80109f35:	83 c6 01             	add    $0x1,%esi
80109f38:	f7 ef                	imul   %edi
80109f3a:	c1 fa 02             	sar    $0x2,%edx
80109f3d:	29 da                	sub    %ebx,%edx
80109f3f:	89 d3                	mov    %edx,%ebx
80109f41:	75 ed                	jne    80109f30 <itoa+0x20>
80109f43:	89 f3                	mov    %esi,%ebx
80109f45:	89 75 f0             	mov    %esi,-0x10(%ebp)
80109f48:	bf 67 66 66 66       	mov    $0x66666667,%edi
80109f4d:	8b 75 08             	mov    0x8(%ebp),%esi
80109f50:	eb 0a                	jmp    80109f5c <itoa+0x4c>
80109f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109f58:	85 db                	test   %ebx,%ebx
80109f5a:	7e 25                	jle    80109f81 <itoa+0x71>
80109f5c:	89 c8                	mov    %ecx,%eax
80109f5e:	f7 ef                	imul   %edi
80109f60:	89 c8                	mov    %ecx,%eax
80109f62:	c1 f8 1f             	sar    $0x1f,%eax
80109f65:	c1 fa 02             	sar    $0x2,%edx
80109f68:	29 c2                	sub    %eax,%edx
80109f6a:	8d 04 92             	lea    (%edx,%edx,4),%eax
80109f6d:	01 c0                	add    %eax,%eax
80109f6f:	29 c1                	sub    %eax,%ecx
80109f71:	83 c1 30             	add    $0x30,%ecx
80109f74:	88 4c 1e ff          	mov    %cl,-0x1(%esi,%ebx,1)
80109f78:	83 eb 01             	sub    $0x1,%ebx
80109f7b:	85 d2                	test   %edx,%edx
80109f7d:	89 d1                	mov    %edx,%ecx
80109f7f:	7f d7                	jg     80109f58 <itoa+0x48>
80109f81:	8b 75 f0             	mov    -0x10(%ebp),%esi
80109f84:	89 f0                	mov    %esi,%eax
80109f86:	8b 7d 08             	mov    0x8(%ebp),%edi
80109f89:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
80109f8d:	83 c4 04             	add    $0x4,%esp
80109f90:	89 f0                	mov    %esi,%eax
80109f92:	5b                   	pop    %ebx
80109f93:	5e                   	pop    %esi
80109f94:	5f                   	pop    %edi
80109f95:	5d                   	pop    %ebp
80109f96:	c3                   	ret    
80109f97:	75 12                	jne    80109fab <itoa+0x9b>
80109f99:	8b 45 08             	mov    0x8(%ebp),%eax
80109f9c:	be 01 00 00 00       	mov    $0x1,%esi
80109fa1:	c6 00 30             	movb   $0x30,(%eax)
80109fa4:	b8 01 00 00 00       	mov    $0x1,%eax
80109fa9:	eb db                	jmp    80109f86 <itoa+0x76>
80109fab:	31 c0                	xor    %eax,%eax
80109fad:	31 f6                	xor    %esi,%esi
80109faf:	eb d5                	jmp    80109f86 <itoa+0x76>
80109fb1:	eb 0d                	jmp    80109fc0 <utoa>
80109fb3:	90                   	nop
80109fb4:	90                   	nop
80109fb5:	90                   	nop
80109fb6:	90                   	nop
80109fb7:	90                   	nop
80109fb8:	90                   	nop
80109fb9:	90                   	nop
80109fba:	90                   	nop
80109fbb:	90                   	nop
80109fbc:	90                   	nop
80109fbd:	90                   	nop
80109fbe:	90                   	nop
80109fbf:	90                   	nop

80109fc0 <utoa>:
80109fc0:	55                   	push   %ebp
80109fc1:	89 e5                	mov    %esp,%ebp
80109fc3:	57                   	push   %edi
80109fc4:	56                   	push   %esi
80109fc5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80109fc8:	53                   	push   %ebx
80109fc9:	8b 7d 08             	mov    0x8(%ebp),%edi
80109fcc:	85 c9                	test   %ecx,%ecx
80109fce:	74 5a                	je     8010a02a <utoa+0x6a>
80109fd0:	89 ca                	mov    %ecx,%edx
80109fd2:	31 f6                	xor    %esi,%esi
80109fd4:	bb cd cc cc cc       	mov    $0xcccccccd,%ebx
80109fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80109fe0:	89 d0                	mov    %edx,%eax
80109fe2:	83 c6 01             	add    $0x1,%esi
80109fe5:	f7 e3                	mul    %ebx
80109fe7:	c1 ea 03             	shr    $0x3,%edx
80109fea:	85 d2                	test   %edx,%edx
80109fec:	75 f2                	jne    80109fe0 <utoa+0x20>
80109fee:	89 f3                	mov    %esi,%ebx
80109ff0:	eb 0a                	jmp    80109ffc <utoa+0x3c>
80109ff2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80109ff8:	85 db                	test   %ebx,%ebx
80109ffa:	7e 21                	jle    8010a01d <utoa+0x5d>
80109ffc:	b8 cd cc cc cc       	mov    $0xcccccccd,%eax
8010a001:	f7 e1                	mul    %ecx
8010a003:	c1 ea 03             	shr    $0x3,%edx
8010a006:	8d 04 92             	lea    (%edx,%edx,4),%eax
8010a009:	01 c0                	add    %eax,%eax
8010a00b:	29 c1                	sub    %eax,%ecx
8010a00d:	83 c1 30             	add    $0x30,%ecx
8010a010:	88 4c 1f ff          	mov    %cl,-0x1(%edi,%ebx,1)
8010a014:	83 eb 01             	sub    $0x1,%ebx
8010a017:	85 d2                	test   %edx,%edx
8010a019:	89 d1                	mov    %edx,%ecx
8010a01b:	75 db                	jne    80109ff8 <utoa+0x38>
8010a01d:	89 f0                	mov    %esi,%eax
8010a01f:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
8010a023:	89 f0                	mov    %esi,%eax
8010a025:	5b                   	pop    %ebx
8010a026:	5e                   	pop    %esi
8010a027:	5f                   	pop    %edi
8010a028:	5d                   	pop    %ebp
8010a029:	c3                   	ret    
8010a02a:	b8 01 00 00 00       	mov    $0x1,%eax
8010a02f:	be 01 00 00 00       	mov    $0x1,%esi
8010a034:	c6 07 30             	movb   $0x30,(%edi)
8010a037:	c6 04 07 00          	movb   $0x0,(%edi,%eax,1)
8010a03b:	89 f0                	mov    %esi,%eax
8010a03d:	5b                   	pop    %ebx
8010a03e:	5e                   	pop    %esi
8010a03f:	5f                   	pop    %edi
8010a040:	5d                   	pop    %ebp
8010a041:	c3                   	ret    
8010a042:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a049:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010a050 <intlen>:
8010a050:	55                   	push   %ebp
8010a051:	89 e5                	mov    %esp,%ebp
8010a053:	56                   	push   %esi
8010a054:	53                   	push   %ebx
8010a055:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010a058:	bb 01 00 00 00       	mov    $0x1,%ebx
8010a05d:	8d 41 09             	lea    0x9(%ecx),%eax
8010a060:	83 f8 12             	cmp    $0x12,%eax
8010a063:	76 24                	jbe    8010a089 <intlen+0x39>
8010a065:	be 67 66 66 66       	mov    $0x66666667,%esi
8010a06a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010a070:	89 c8                	mov    %ecx,%eax
8010a072:	c1 f9 1f             	sar    $0x1f,%ecx
8010a075:	83 c3 01             	add    $0x1,%ebx
8010a078:	f7 ee                	imul   %esi
8010a07a:	c1 fa 02             	sar    $0x2,%edx
8010a07d:	29 ca                	sub    %ecx,%edx
8010a07f:	8d 42 09             	lea    0x9(%edx),%eax
8010a082:	89 d1                	mov    %edx,%ecx
8010a084:	83 f8 12             	cmp    $0x12,%eax
8010a087:	77 e7                	ja     8010a070 <intlen+0x20>
8010a089:	89 d8                	mov    %ebx,%eax
8010a08b:	5b                   	pop    %ebx
8010a08c:	5e                   	pop    %esi
8010a08d:	5d                   	pop    %ebp
8010a08e:	c3                   	ret    
8010a08f:	90                   	nop

8010a090 <get_file_name_constant>:
8010a090:	55                   	push   %ebp
8010a091:	89 e5                	mov    %esp,%ebp
8010a093:	53                   	push   %ebx
8010a094:	89 c3                	mov    %eax,%ebx
8010a096:	83 ec 0c             	sub    $0xc,%esp
8010a099:	68 67 f4 10 80       	push   $0x8010f467
8010a09e:	50                   	push   %eax
8010a09f:	e8 dc c4 ff ff       	call   80106580 <strcmp>
8010a0a4:	83 c4 10             	add    $0x10,%esp
8010a0a7:	85 c0                	test   %eax,%eax
8010a0a9:	75 0d                	jne    8010a0b8 <get_file_name_constant+0x28>
8010a0ab:	b8 01 00 00 00       	mov    $0x1,%eax
8010a0b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010a0b3:	c9                   	leave  
8010a0b4:	c3                   	ret    
8010a0b5:	8d 76 00             	lea    0x0(%esi),%esi
8010a0b8:	83 ec 08             	sub    $0x8,%esp
8010a0bb:	68 74 f4 10 80       	push   $0x8010f474
8010a0c0:	53                   	push   %ebx
8010a0c1:	e8 ba c4 ff ff       	call   80106580 <strcmp>
8010a0c6:	89 c2                	mov    %eax,%edx
8010a0c8:	83 c4 10             	add    $0x10,%esp
8010a0cb:	b8 02 00 00 00       	mov    $0x2,%eax
8010a0d0:	85 d2                	test   %edx,%edx
8010a0d2:	74 dc                	je     8010a0b0 <get_file_name_constant+0x20>
8010a0d4:	83 ec 08             	sub    $0x8,%esp
8010a0d7:	68 8b f4 10 80       	push   $0x8010f48b
8010a0dc:	53                   	push   %ebx
8010a0dd:	e8 9e c4 ff ff       	call   80106580 <strcmp>
8010a0e2:	89 c2                	mov    %eax,%edx
8010a0e4:	83 c4 10             	add    $0x10,%esp
8010a0e7:	b8 03 00 00 00       	mov    $0x3,%eax
8010a0ec:	85 d2                	test   %edx,%edx
8010a0ee:	74 c0                	je     8010a0b0 <get_file_name_constant+0x20>
8010a0f0:	83 ec 08             	sub    $0x8,%esp
8010a0f3:	68 a2 f4 10 80       	push   $0x8010f4a2
8010a0f8:	53                   	push   %ebx
8010a0f9:	e8 82 c4 ff ff       	call   80106580 <strcmp>
8010a0fe:	89 c2                	mov    %eax,%edx
8010a100:	83 c4 10             	add    $0x10,%esp
8010a103:	b8 04 00 00 00       	mov    $0x4,%eax
8010a108:	85 d2                	test   %edx,%edx
8010a10a:	74 a4                	je     8010a0b0 <get_file_name_constant+0x20>
8010a10c:	83 ec 08             	sub    $0x8,%esp
8010a10f:	68 b3 f4 10 80       	push   $0x8010f4b3
8010a114:	53                   	push   %ebx
8010a115:	e8 66 c4 ff ff       	call   80106580 <strcmp>
8010a11a:	89 c2                	mov    %eax,%edx
8010a11c:	83 c4 10             	add    $0x10,%esp
8010a11f:	b8 0d 00 00 00       	mov    $0xd,%eax
8010a124:	85 d2                	test   %edx,%edx
8010a126:	74 88                	je     8010a0b0 <get_file_name_constant+0x20>
8010a128:	50                   	push   %eax
8010a129:	50                   	push   %eax
8010a12a:	68 c6 f4 10 80       	push   $0x8010f4c6
8010a12f:	53                   	push   %ebx
8010a130:	e8 4b c4 ff ff       	call   80106580 <strcmp>
8010a135:	89 c2                	mov    %eax,%edx
8010a137:	83 c4 10             	add    $0x10,%esp
8010a13a:	b8 0e 00 00 00       	mov    $0xe,%eax
8010a13f:	85 d2                	test   %edx,%edx
8010a141:	0f 84 69 ff ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a147:	50                   	push   %eax
8010a148:	50                   	push   %eax
8010a149:	68 d4 f4 10 80       	push   $0x8010f4d4
8010a14e:	53                   	push   %ebx
8010a14f:	e8 2c c4 ff ff       	call   80106580 <strcmp>
8010a154:	89 c2                	mov    %eax,%edx
8010a156:	83 c4 10             	add    $0x10,%esp
8010a159:	b8 0f 00 00 00       	mov    $0xf,%eax
8010a15e:	85 d2                	test   %edx,%edx
8010a160:	0f 84 4a ff ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a166:	51                   	push   %ecx
8010a167:	51                   	push   %ecx
8010a168:	68 e0 f4 10 80       	push   $0x8010f4e0
8010a16d:	53                   	push   %ebx
8010a16e:	e8 0d c4 ff ff       	call   80106580 <strcmp>
8010a173:	89 c2                	mov    %eax,%edx
8010a175:	83 c4 10             	add    $0x10,%esp
8010a178:	b8 05 00 00 00       	mov    $0x5,%eax
8010a17d:	85 d2                	test   %edx,%edx
8010a17f:	0f 84 2b ff ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a185:	52                   	push   %edx
8010a186:	52                   	push   %edx
8010a187:	68 eb f4 10 80       	push   $0x8010f4eb
8010a18c:	53                   	push   %ebx
8010a18d:	e8 ee c3 ff ff       	call   80106580 <strcmp>
8010a192:	89 c2                	mov    %eax,%edx
8010a194:	83 c4 10             	add    $0x10,%esp
8010a197:	b8 06 00 00 00       	mov    $0x6,%eax
8010a19c:	85 d2                	test   %edx,%edx
8010a19e:	0f 84 0c ff ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a1a4:	50                   	push   %eax
8010a1a5:	50                   	push   %eax
8010a1a6:	68 f3 f4 10 80       	push   $0x8010f4f3
8010a1ab:	53                   	push   %ebx
8010a1ac:	e8 cf c3 ff ff       	call   80106580 <strcmp>
8010a1b1:	89 c2                	mov    %eax,%edx
8010a1b3:	83 c4 10             	add    $0x10,%esp
8010a1b6:	b8 10 00 00 00       	mov    $0x10,%eax
8010a1bb:	85 d2                	test   %edx,%edx
8010a1bd:	0f 84 ed fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a1c3:	50                   	push   %eax
8010a1c4:	50                   	push   %eax
8010a1c5:	68 fc f4 10 80       	push   $0x8010f4fc
8010a1ca:	53                   	push   %ebx
8010a1cb:	e8 b0 c3 ff ff       	call   80106580 <strcmp>
8010a1d0:	89 c2                	mov    %eax,%edx
8010a1d2:	83 c4 10             	add    $0x10,%esp
8010a1d5:	b8 07 00 00 00       	mov    $0x7,%eax
8010a1da:	85 d2                	test   %edx,%edx
8010a1dc:	0f 84 ce fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a1e2:	50                   	push   %eax
8010a1e3:	50                   	push   %eax
8010a1e4:	68 04 f5 10 80       	push   $0x8010f504
8010a1e9:	53                   	push   %ebx
8010a1ea:	e8 91 c3 ff ff       	call   80106580 <strcmp>
8010a1ef:	89 c2                	mov    %eax,%edx
8010a1f1:	83 c4 10             	add    $0x10,%esp
8010a1f4:	b8 11 00 00 00       	mov    $0x11,%eax
8010a1f9:	85 d2                	test   %edx,%edx
8010a1fb:	0f 84 af fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a201:	50                   	push   %eax
8010a202:	50                   	push   %eax
8010a203:	68 10 f5 10 80       	push   $0x8010f510
8010a208:	53                   	push   %ebx
8010a209:	e8 72 c3 ff ff       	call   80106580 <strcmp>
8010a20e:	89 c2                	mov    %eax,%edx
8010a210:	83 c4 10             	add    $0x10,%esp
8010a213:	b8 08 00 00 00       	mov    $0x8,%eax
8010a218:	85 d2                	test   %edx,%edx
8010a21a:	0f 84 90 fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a220:	50                   	push   %eax
8010a221:	50                   	push   %eax
8010a222:	68 1c f5 10 80       	push   $0x8010f51c
8010a227:	53                   	push   %ebx
8010a228:	e8 53 c3 ff ff       	call   80106580 <strcmp>
8010a22d:	89 c2                	mov    %eax,%edx
8010a22f:	83 c4 10             	add    $0x10,%esp
8010a232:	b8 09 00 00 00       	mov    $0x9,%eax
8010a237:	85 d2                	test   %edx,%edx
8010a239:	0f 84 71 fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a23f:	50                   	push   %eax
8010a240:	50                   	push   %eax
8010a241:	68 2a f5 10 80       	push   $0x8010f52a
8010a246:	53                   	push   %ebx
8010a247:	e8 34 c3 ff ff       	call   80106580 <strcmp>
8010a24c:	89 c2                	mov    %eax,%edx
8010a24e:	83 c4 10             	add    $0x10,%esp
8010a251:	b8 12 00 00 00       	mov    $0x12,%eax
8010a256:	85 d2                	test   %edx,%edx
8010a258:	0f 84 52 fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a25e:	51                   	push   %ecx
8010a25f:	51                   	push   %ecx
8010a260:	68 39 f5 10 80       	push   $0x8010f539
8010a265:	53                   	push   %ebx
8010a266:	e8 15 c3 ff ff       	call   80106580 <strcmp>
8010a26b:	89 c2                	mov    %eax,%edx
8010a26d:	83 c4 10             	add    $0x10,%esp
8010a270:	b8 0a 00 00 00       	mov    $0xa,%eax
8010a275:	85 d2                	test   %edx,%edx
8010a277:	0f 84 33 fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a27d:	52                   	push   %edx
8010a27e:	52                   	push   %edx
8010a27f:	68 44 f5 10 80       	push   $0x8010f544
8010a284:	53                   	push   %ebx
8010a285:	e8 f6 c2 ff ff       	call   80106580 <strcmp>
8010a28a:	89 c2                	mov    %eax,%edx
8010a28c:	83 c4 10             	add    $0x10,%esp
8010a28f:	b8 0b 00 00 00       	mov    $0xb,%eax
8010a294:	85 d2                	test   %edx,%edx
8010a296:	0f 84 14 fe ff ff    	je     8010a0b0 <get_file_name_constant+0x20>
8010a29c:	50                   	push   %eax
8010a29d:	50                   	push   %eax
8010a29e:	68 4f f5 10 80       	push   $0x8010f54f
8010a2a3:	53                   	push   %ebx
8010a2a4:	e8 d7 c2 ff ff       	call   80106580 <strcmp>
8010a2a9:	83 c4 10             	add    $0x10,%esp
8010a2ac:	83 f8 01             	cmp    $0x1,%eax
8010a2af:	19 c0                	sbb    %eax,%eax
8010a2b1:	83 e0 14             	and    $0x14,%eax
8010a2b4:	83 e8 01             	sub    $0x1,%eax
8010a2b7:	e9 f4 fd ff ff       	jmp    8010a0b0 <get_file_name_constant+0x20>
8010a2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010a2c0 <read_file_mem_max.isra.14>:
8010a2c0:	55                   	push   %ebp
8010a2c1:	89 e5                	mov    %esp,%ebp
8010a2c3:	57                   	push   %edi
8010a2c4:	56                   	push   %esi
8010a2c5:	53                   	push   %ebx
8010a2c6:	8d 5d de             	lea    -0x22(%ebp),%ebx
8010a2c9:	89 c7                	mov    %eax,%edi
8010a2cb:	31 c0                	xor    %eax,%eax
8010a2cd:	83 ec 34             	sub    $0x34,%esp
8010a2d0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
8010a2d3:	c7 45 de 00 00 00 00 	movl   $0x0,-0x22(%ebp)
8010a2da:	52                   	push   %edx
8010a2db:	53                   	push   %ebx
8010a2dc:	c7 45 e2 00 00 00 00 	movl   $0x0,-0x1e(%ebp)
8010a2e3:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
8010a2e7:	e8 d4 fc ff ff       	call   80109fc0 <utoa>
8010a2ec:	89 1c 24             	mov    %ebx,(%esp)
8010a2ef:	e8 7c c3 ff ff       	call   80106670 <strlen>
8010a2f4:	83 c4 0c             	add    $0xc,%esp
8010a2f7:	89 c6                	mov    %eax,%esi
8010a2f9:	50                   	push   %eax
8010a2fa:	53                   	push   %ebx
8010a2fb:	8d 9e c0 05 12 80    	lea    -0x7fedfa40(%esi),%ebx
8010a301:	68 c0 05 12 80       	push   $0x801205c0
8010a306:	e8 c5 c2 ff ff       	call   801065d0 <strncpy>
8010a30b:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010a312:	e8 59 c3 ff ff       	call   80106670 <strlen>
8010a317:	83 c4 0c             	add    $0xc,%esp
8010a31a:	89 c6                	mov    %eax,%esi
8010a31c:	50                   	push   %eax
8010a31d:	68 f3 f3 10 80       	push   $0x8010f3f3
8010a322:	53                   	push   %ebx
8010a323:	01 f3                	add    %esi,%ebx
8010a325:	81 eb c0 05 12 80    	sub    $0x801205c0,%ebx
8010a32b:	e8 a0 c2 ff ff       	call   801065d0 <strncpy>
8010a330:	8b 3f                	mov    (%edi),%edi
8010a332:	83 c4 10             	add    $0x10,%esp
8010a335:	39 fb                	cmp    %edi,%ebx
8010a337:	74 47                	je     8010a380 <read_file_mem_max.isra.14+0xc0>
8010a339:	29 fb                	sub    %edi,%ebx
8010a33b:	3b 5d 08             	cmp    0x8(%ebp),%ebx
8010a33e:	0f 47 5d 08          	cmova  0x8(%ebp),%ebx
8010a342:	85 db                	test   %ebx,%ebx
8010a344:	89 de                	mov    %ebx,%esi
8010a346:	7e 38                	jle    8010a380 <read_file_mem_max.isra.14+0xc0>
8010a348:	0f b6 97 c0 05 12 80 	movzbl -0x7fedfa40(%edi),%edx
8010a34f:	31 c0                	xor    %eax,%eax
8010a351:	84 d2                	test   %dl,%dl
8010a353:	74 21                	je     8010a376 <read_file_mem_max.isra.14+0xb6>
8010a355:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
8010a358:	eb 12                	jmp    8010a36c <read_file_mem_max.isra.14+0xac>
8010a35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010a360:	0f b6 94 07 c0 05 12 	movzbl -0x7fedfa40(%edi,%eax,1),%edx
8010a367:	80 
8010a368:	84 d2                	test   %dl,%dl
8010a36a:	74 0a                	je     8010a376 <read_file_mem_max.isra.14+0xb6>
8010a36c:	88 14 01             	mov    %dl,(%ecx,%eax,1)
8010a36f:	83 c0 01             	add    $0x1,%eax
8010a372:	39 c6                	cmp    %eax,%esi
8010a374:	75 ea                	jne    8010a360 <read_file_mem_max.isra.14+0xa0>
8010a376:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a379:	5b                   	pop    %ebx
8010a37a:	5e                   	pop    %esi
8010a37b:	5f                   	pop    %edi
8010a37c:	5d                   	pop    %ebp
8010a37d:	c3                   	ret    
8010a37e:	66 90                	xchg   %ax,%ax
8010a380:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a383:	31 c0                	xor    %eax,%eax
8010a385:	5b                   	pop    %ebx
8010a386:	5e                   	pop    %esi
8010a387:	5f                   	pop    %edi
8010a388:	5d                   	pop    %ebp
8010a389:	c3                   	ret    
8010a38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010a390 <unsafe_cg_open>:
8010a390:	55                   	push   %ebp
8010a391:	89 e5                	mov    %esp,%ebp
8010a393:	57                   	push   %edi
8010a394:	56                   	push   %esi
8010a395:	53                   	push   %ebx
8010a396:	83 ec 1c             	sub    $0x1c,%esp
8010a399:	8b 45 08             	mov    0x8(%ebp),%eax
8010a39c:	8b 75 10             	mov    0x10(%ebp),%esi
8010a39f:	85 c0                	test   %eax,%eax
8010a3a1:	0f 84 91 00 00 00    	je     8010a438 <unsafe_cg_open+0xa8>
8010a3a7:	83 f8 01             	cmp    $0x1,%eax
8010a3aa:	75 38                	jne    8010a3e4 <unsafe_cg_open+0x54>
8010a3ac:	80 3e 00             	cmpb   $0x0,(%esi)
8010a3af:	74 33                	je     8010a3e4 <unsafe_cg_open+0x54>
8010a3b1:	e8 aa 71 ff ff       	call   80101560 <filealloc>
8010a3b6:	85 c0                	test   %eax,%eax
8010a3b8:	89 c7                	mov    %eax,%edi
8010a3ba:	74 28                	je     8010a3e4 <unsafe_cg_open+0x54>
8010a3bc:	31 db                	xor    %ebx,%ebx
8010a3be:	e8 a0 ae ff ff       	call   80105263 <myproc>
8010a3c3:	90                   	nop
8010a3c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a3c8:	8b 54 98 48          	mov    0x48(%eax,%ebx,4),%edx
8010a3cc:	85 d2                	test   %edx,%edx
8010a3ce:	74 28                	je     8010a3f8 <unsafe_cg_open+0x68>
8010a3d0:	83 c3 01             	add    $0x1,%ebx
8010a3d3:	83 fb 10             	cmp    $0x10,%ebx
8010a3d6:	75 f0                	jne    8010a3c8 <unsafe_cg_open+0x38>
8010a3d8:	83 ec 0c             	sub    $0xc,%esp
8010a3db:	57                   	push   %edi
8010a3dc:	e8 3f 72 ff ff       	call   80101620 <fileclose>
8010a3e1:	83 c4 10             	add    $0x10,%esp
8010a3e4:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
8010a3e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a3ec:	89 d8                	mov    %ebx,%eax
8010a3ee:	5b                   	pop    %ebx
8010a3ef:	5e                   	pop    %esi
8010a3f0:	5f                   	pop    %edi
8010a3f1:	5d                   	pop    %ebp
8010a3f2:	c3                   	ret    
8010a3f3:	90                   	nop
8010a3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010a3f8:	89 7c 98 48          	mov    %edi,0x48(%eax,%ebx,4)
8010a3fc:	8b 45 14             	mov    0x14(%ebp),%eax
8010a3ff:	c7 07 03 00 00 00    	movl   $0x3,(%edi)
8010a405:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
8010a40c:	c6 47 09 00          	movb   $0x0,0x9(%edi)
8010a410:	89 77 10             	mov    %esi,0x10(%edi)
8010a413:	83 e0 01             	and    $0x1,%eax
8010a416:	c6 47 14 00          	movb   $0x0,0x14(%edi)
8010a41a:	83 f0 01             	xor    $0x1,%eax
8010a41d:	88 47 08             	mov    %al,0x8(%edi)
8010a420:	83 86 00 02 00 00 01 	addl   $0x1,0x200(%esi)
8010a427:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a42a:	89 d8                	mov    %ebx,%eax
8010a42c:	5b                   	pop    %ebx
8010a42d:	5e                   	pop    %esi
8010a42e:	5f                   	pop    %edi
8010a42f:	5d                   	pop    %ebp
8010a430:	c3                   	ret    
8010a431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a438:	8b 45 0c             	mov    0xc(%ebp),%eax
8010a43b:	e8 50 fc ff ff       	call   8010a090 <get_file_name_constant>
8010a440:	83 f8 ff             	cmp    $0xffffffff,%eax
8010a443:	89 c1                	mov    %eax,%ecx
8010a445:	74 9d                	je     8010a3e4 <unsafe_cg_open+0x54>
8010a447:	8d 40 f3             	lea    -0xd(%eax),%eax
8010a44a:	31 ff                	xor    %edi,%edi
8010a44c:	83 f8 06             	cmp    $0x6,%eax
8010a44f:	77 47                	ja     8010a498 <unsafe_cg_open+0x108>
8010a451:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010a454:	e8 07 71 ff ff       	call   80101560 <filealloc>
8010a459:	85 c0                	test   %eax,%eax
8010a45b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010a45e:	74 84                	je     8010a3e4 <unsafe_cg_open+0x54>
8010a460:	e8 fe ad ff ff       	call   80105263 <myproc>
8010a465:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010a468:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a46b:	31 db                	xor    %ebx,%ebx
8010a46d:	8d 76 00             	lea    0x0(%esi),%esi
8010a470:	83 7c 98 48 00       	cmpl   $0x0,0x48(%eax,%ebx,4)
8010a475:	74 49                	je     8010a4c0 <unsafe_cg_open+0x130>
8010a477:	83 c3 01             	add    $0x1,%ebx
8010a47a:	83 fb 10             	cmp    $0x10,%ebx
8010a47d:	75 f1                	jne    8010a470 <unsafe_cg_open+0xe0>
8010a47f:	83 ec 0c             	sub    $0xc,%esp
8010a482:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
8010a487:	52                   	push   %edx
8010a488:	e8 93 71 ff ff       	call   80101620 <fileclose>
8010a48d:	83 c4 10             	add    $0x10,%esp
8010a490:	e9 54 ff ff ff       	jmp    8010a3e9 <unsafe_cg_open+0x59>
8010a495:	8d 76 00             	lea    0x0(%esi),%esi
8010a498:	8d 41 ff             	lea    -0x1(%ecx),%eax
8010a49b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010a49e:	83 f8 0b             	cmp    $0xb,%eax
8010a4a1:	19 ff                	sbb    %edi,%edi
8010a4a3:	83 e7 02             	and    $0x2,%edi
8010a4a6:	e8 b5 70 ff ff       	call   80101560 <filealloc>
8010a4ab:	83 ef 01             	sub    $0x1,%edi
8010a4ae:	85 c0                	test   %eax,%eax
8010a4b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010a4b3:	75 ab                	jne    8010a460 <unsafe_cg_open+0xd0>
8010a4b5:	e9 2a ff ff ff       	jmp    8010a3e4 <unsafe_cg_open+0x54>
8010a4ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010a4c0:	83 e9 05             	sub    $0x5,%ecx
8010a4c3:	89 54 98 48          	mov    %edx,0x48(%eax,%ebx,4)
8010a4c7:	83 f9 0e             	cmp    $0xe,%ecx
8010a4ca:	77 2d                	ja     8010a4f9 <unsafe_cg_open+0x169>
8010a4cc:	ff 24 8d cc f6 10 80 	jmp    *-0x7fef0934(,%ecx,4)
8010a4d3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a4d6:	e8 15 2a 00 00       	call   8010cef0 <cgroup_root>
8010a4db:	39 c6                	cmp    %eax,%esi
8010a4dd:	0f 84 01 ff ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a4e3:	0f b6 86 13 03 00 00 	movzbl 0x313(%esi),%eax
8010a4ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a4ed:	88 42 54             	mov    %al,0x54(%edx)
8010a4f0:	8b 86 50 03 00 00    	mov    0x350(%esi),%eax
8010a4f6:	89 42 58             	mov    %eax,0x58(%edx)
8010a4f9:	8b 45 14             	mov    0x14(%ebp),%eax
8010a4fc:	89 72 10             	mov    %esi,0x10(%edx)
8010a4ff:	c7 02 03 00 00 00    	movl   $0x3,(%edx)
8010a505:	c7 42 0c 00 00 00 00 	movl   $0x0,0xc(%edx)
8010a50c:	83 e0 01             	and    $0x1,%eax
8010a50f:	83 f0 01             	xor    $0x1,%eax
8010a512:	f6 45 14 03          	testb  $0x3,0x14(%ebp)
8010a516:	88 42 08             	mov    %al,0x8(%edx)
8010a519:	0f 95 c1             	setne  %cl
8010a51c:	85 ff                	test   %edi,%edi
8010a51e:	0f 95 c0             	setne  %al
8010a521:	83 ec 04             	sub    $0x4,%esp
8010a524:	83 c2 14             	add    $0x14,%edx
8010a527:	21 c8                	and    %ecx,%eax
8010a529:	88 42 f5             	mov    %al,-0xb(%edx)
8010a52c:	6a 40                	push   $0x40
8010a52e:	ff 75 0c             	pushl  0xc(%ebp)
8010a531:	52                   	push   %edx
8010a532:	e8 99 c0 ff ff       	call   801065d0 <strncpy>
8010a537:	83 86 00 02 00 00 01 	addl   $0x1,0x200(%esi)
8010a53e:	83 c4 10             	add    $0x10,%esp
8010a541:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a544:	89 d8                	mov    %ebx,%eax
8010a546:	5b                   	pop    %ebx
8010a547:	5e                   	pop    %esi
8010a548:	5f                   	pop    %edi
8010a549:	5d                   	pop    %ebp
8010a54a:	c3                   	ret    
8010a54b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a54e:	e8 9d 29 00 00       	call   8010cef0 <cgroup_root>
8010a553:	39 c6                	cmp    %eax,%esi
8010a555:	0f 84 89 fe ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a55b:	0f b6 86 13 03 00 00 	movzbl 0x313(%esi),%eax
8010a562:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a565:	88 42 54             	mov    %al,0x54(%edx)
8010a568:	8b 86 40 03 00 00    	mov    0x340(%esi),%eax
8010a56e:	89 42 58             	mov    %eax,0x58(%edx)
8010a571:	8b 86 44 03 00 00    	mov    0x344(%esi),%eax
8010a577:	89 42 5c             	mov    %eax,0x5c(%edx)
8010a57a:	8b 86 48 03 00 00    	mov    0x348(%esi),%eax
8010a580:	89 42 60             	mov    %eax,0x60(%edx)
8010a583:	8b 86 4c 03 00 00    	mov    0x34c(%esi),%eax
8010a589:	89 42 64             	mov    %eax,0x64(%edx)
8010a58c:	e8 2f 8a ff ff       	call   80102fc0 <get_total_memory>
8010a591:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a594:	c1 e0 0c             	shl    $0xc,%eax
8010a597:	89 42 68             	mov    %eax,0x68(%edx)
8010a59a:	e9 5a ff ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a59f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a5a2:	e8 49 29 00 00       	call   8010cef0 <cgroup_root>
8010a5a7:	39 c6                	cmp    %eax,%esi
8010a5a9:	0f 84 35 fe ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a5af:	0f b6 86 0d 03 00 00 	movzbl 0x30d(%esi),%eax
8010a5b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a5b9:	88 42 54             	mov    %al,0x54(%edx)
8010a5bc:	8b 86 5c 03 00 00    	mov    0x35c(%esi),%eax
8010a5c2:	89 42 58             	mov    %eax,0x58(%edx)
8010a5c5:	8b 86 5c 03 00 00    	mov    0x35c(%esi),%eax
8010a5cb:	c7 42 60 00 00 00 00 	movl   $0x0,0x60(%edx)
8010a5d2:	89 42 5c             	mov    %eax,0x5c(%edx)
8010a5d5:	8b 86 78 03 00 00    	mov    0x378(%esi),%eax
8010a5db:	89 42 64             	mov    %eax,0x64(%edx)
8010a5de:	8b 86 7c 03 00 00    	mov    0x37c(%esi),%eax
8010a5e4:	89 42 68             	mov    %eax,0x68(%edx)
8010a5e7:	8b 86 80 03 00 00    	mov    0x380(%esi),%eax
8010a5ed:	89 42 6c             	mov    %eax,0x6c(%edx)
8010a5f0:	e9 04 ff ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a5f5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a5f8:	e8 f3 28 00 00       	call   8010cef0 <cgroup_root>
8010a5fd:	39 c6                	cmp    %eax,%esi
8010a5ff:	0f 84 df fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a605:	0f b6 86 13 03 00 00 	movzbl 0x313(%esi),%eax
8010a60c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a60f:	88 42 54             	mov    %al,0x54(%edx)
8010a612:	8b 86 54 03 00 00    	mov    0x354(%esi),%eax
8010a618:	89 42 58             	mov    %eax,0x58(%edx)
8010a61b:	e9 d9 fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a620:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a623:	e8 c8 28 00 00       	call   8010cef0 <cgroup_root>
8010a628:	39 c6                	cmp    %eax,%esi
8010a62a:	0f 84 b4 fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a630:	8b 86 34 03 00 00    	mov    0x334(%esi),%eax
8010a636:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a639:	89 42 54             	mov    %eax,0x54(%edx)
8010a63c:	e9 b8 fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a641:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a644:	e8 a7 28 00 00       	call   8010cef0 <cgroup_root>
8010a649:	39 c6                	cmp    %eax,%esi
8010a64b:	0f 84 93 fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a651:	0f b6 86 11 03 00 00 	movzbl 0x311(%esi),%eax
8010a658:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a65b:	88 42 54             	mov    %al,0x54(%edx)
8010a65e:	0f b6 86 30 03 00 00 	movzbl 0x330(%esi),%eax
8010a665:	89 42 58             	mov    %eax,0x58(%edx)
8010a668:	e9 8c fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a66d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a670:	e8 7b 28 00 00       	call   8010cef0 <cgroup_root>
8010a675:	39 c6                	cmp    %eax,%esi
8010a677:	0f 84 67 fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a67d:	0f b6 86 0f 03 00 00 	movzbl 0x30f(%esi),%eax
8010a684:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a687:	88 42 54             	mov    %al,0x54(%edx)
8010a68a:	8b 86 2c 03 00 00    	mov    0x32c(%esi),%eax
8010a690:	89 42 58             	mov    %eax,0x58(%edx)
8010a693:	e9 61 fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a698:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a69b:	e8 50 28 00 00       	call   8010cef0 <cgroup_root>
8010a6a0:	39 c6                	cmp    %eax,%esi
8010a6a2:	0f 84 3c fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a6a8:	8b 86 70 03 00 00    	mov    0x370(%esi),%eax
8010a6ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a6b1:	89 42 54             	mov    %eax,0x54(%edx)
8010a6b4:	8b 86 6c 03 00 00    	mov    0x36c(%esi),%eax
8010a6ba:	89 42 58             	mov    %eax,0x58(%edx)
8010a6bd:	e9 37 fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a6c2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010a6c5:	e8 26 28 00 00       	call   8010cef0 <cgroup_root>
8010a6ca:	39 c6                	cmp    %eax,%esi
8010a6cc:	0f 84 12 fd ff ff    	je     8010a3e4 <unsafe_cg_open+0x54>
8010a6d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010a6d5:	c7 42 54 00 00 00 00 	movl   $0x0,0x54(%edx)
8010a6dc:	e9 18 fe ff ff       	jmp    8010a4f9 <unsafe_cg_open+0x169>
8010a6e1:	eb 0d                	jmp    8010a6f0 <unsafe_cg_read>
8010a6e3:	90                   	nop
8010a6e4:	90                   	nop
8010a6e5:	90                   	nop
8010a6e6:	90                   	nop
8010a6e7:	90                   	nop
8010a6e8:	90                   	nop
8010a6e9:	90                   	nop
8010a6ea:	90                   	nop
8010a6eb:	90                   	nop
8010a6ec:	90                   	nop
8010a6ed:	90                   	nop
8010a6ee:	90                   	nop
8010a6ef:	90                   	nop

8010a6f0 <unsafe_cg_read>:
8010a6f0:	55                   	push   %ebp
8010a6f1:	89 e5                	mov    %esp,%ebp
8010a6f3:	57                   	push   %edi
8010a6f4:	56                   	push   %esi
8010a6f5:	53                   	push   %ebx
8010a6f6:	83 ec 7c             	sub    $0x7c,%esp
8010a6f9:	8b 45 08             	mov    0x8(%ebp),%eax
8010a6fc:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010a6ff:	85 c0                	test   %eax,%eax
8010a701:	0f 84 e4 02 00 00    	je     8010a9eb <unsafe_cg_read+0x2fb>
8010a707:	83 f8 01             	cmp    $0x1,%eax
8010a70a:	75 1f                	jne    8010a72b <unsafe_cg_read+0x3b>
8010a70c:	83 ec 04             	sub    $0x4,%esp
8010a70f:	68 00 10 00 00       	push   $0x1000
8010a714:	6a 00                	push   $0x0
8010a716:	68 c0 05 12 80       	push   $0x801205c0
8010a71b:	e8 c0 bc ff ff       	call   801063e0 <memset>
8010a720:	8b 47 10             	mov    0x10(%edi),%eax
8010a723:	83 c4 10             	add    $0x10,%esp
8010a726:	80 38 00             	cmpb   $0x0,(%eax)
8010a729:	75 15                	jne    8010a740 <unsafe_cg_read+0x50>
8010a72b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a72e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010a733:	5b                   	pop    %ebx
8010a734:	5e                   	pop    %esi
8010a735:	5f                   	pop    %edi
8010a736:	5d                   	pop    %ebp
8010a737:	c3                   	ret    
8010a738:	90                   	nop
8010a739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a740:	31 c0                	xor    %eax,%eax
8010a742:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010a748:	c6 80 c0 05 12 80 20 	movb   $0x20,-0x7fedfa40(%eax)
8010a74f:	83 c0 01             	add    $0x1,%eax
8010a752:	3d 00 10 00 00       	cmp    $0x1000,%eax
8010a757:	75 ef                	jne    8010a748 <unsafe_cg_read+0x58>
8010a759:	83 ec 0c             	sub    $0xc,%esp
8010a75c:	be 00 06 12 80       	mov    $0x80120600,%esi
8010a761:	68 11 e9 10 80       	push   $0x8010e911
8010a766:	e8 05 bf ff ff       	call   80106670 <strlen>
8010a76b:	83 c4 0c             	add    $0xc,%esp
8010a76e:	50                   	push   %eax
8010a76f:	68 11 e9 10 80       	push   $0x8010e911
8010a774:	68 c0 05 12 80       	push   $0x801205c0
8010a779:	e8 52 be ff ff       	call   801065d0 <strncpy>
8010a77e:	8b 5f 10             	mov    0x10(%edi),%ebx
8010a781:	e8 6a 27 00 00       	call   8010cef0 <cgroup_root>
8010a786:	83 c4 10             	add    $0x10,%esp
8010a789:	39 c3                	cmp    %eax,%ebx
8010a78b:	74 24                	je     8010a7b1 <unsafe_cg_read+0xc1>
8010a78d:	83 ec 0c             	sub    $0xc,%esp
8010a790:	68 10 e9 10 80       	push   $0x8010e910
8010a795:	e8 d6 be ff ff       	call   80106670 <strlen>
8010a79a:	83 c4 0c             	add    $0xc,%esp
8010a79d:	50                   	push   %eax
8010a79e:	68 10 e9 10 80       	push   $0x8010e910
8010a7a3:	56                   	push   %esi
8010a7a4:	be 40 06 12 80       	mov    $0x80120640,%esi
8010a7a9:	e8 22 be ff ff       	call   801065d0 <strncpy>
8010a7ae:	83 c4 10             	add    $0x10,%esp
8010a7b1:	83 ec 0c             	sub    $0xc,%esp
8010a7b4:	8d 5e 40             	lea    0x40(%esi),%ebx
8010a7b7:	68 67 f4 10 80       	push   $0x8010f467
8010a7bc:	e8 af be ff ff       	call   80106670 <strlen>
8010a7c1:	83 c4 0c             	add    $0xc,%esp
8010a7c4:	50                   	push   %eax
8010a7c5:	68 67 f4 10 80       	push   $0x8010f467
8010a7ca:	56                   	push   %esi
8010a7cb:	e8 00 be ff ff       	call   801065d0 <strncpy>
8010a7d0:	8b 47 10             	mov    0x10(%edi),%eax
8010a7d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010a7d6:	e8 15 27 00 00       	call   8010cef0 <cgroup_root>
8010a7db:	83 c4 10             	add    $0x10,%esp
8010a7de:	39 45 84             	cmp    %eax,-0x7c(%ebp)
8010a7e1:	0f 84 88 00 00 00    	je     8010a86f <unsafe_cg_read+0x17f>
8010a7e7:	83 ec 0c             	sub    $0xc,%esp
8010a7ea:	68 b3 f4 10 80       	push   $0x8010f4b3
8010a7ef:	e8 7c be ff ff       	call   80106670 <strlen>
8010a7f4:	83 c4 0c             	add    $0xc,%esp
8010a7f7:	50                   	push   %eax
8010a7f8:	68 b3 f4 10 80       	push   $0x8010f4b3
8010a7fd:	53                   	push   %ebx
8010a7fe:	8d 9e 40 01 00 00    	lea    0x140(%esi),%ebx
8010a804:	e8 c7 bd ff ff       	call   801065d0 <strncpy>
8010a809:	c7 04 24 74 f4 10 80 	movl   $0x8010f474,(%esp)
8010a810:	e8 5b be ff ff       	call   80106670 <strlen>
8010a815:	83 c4 0c             	add    $0xc,%esp
8010a818:	50                   	push   %eax
8010a819:	8d 86 80 00 00 00    	lea    0x80(%esi),%eax
8010a81f:	68 74 f4 10 80       	push   $0x8010f474
8010a824:	50                   	push   %eax
8010a825:	e8 a6 bd ff ff       	call   801065d0 <strncpy>
8010a82a:	c7 04 24 c6 f4 10 80 	movl   $0x8010f4c6,(%esp)
8010a831:	e8 3a be ff ff       	call   80106670 <strlen>
8010a836:	83 c4 0c             	add    $0xc,%esp
8010a839:	50                   	push   %eax
8010a83a:	8d 86 c0 00 00 00    	lea    0xc0(%esi),%eax
8010a840:	68 c6 f4 10 80       	push   $0x8010f4c6
8010a845:	50                   	push   %eax
8010a846:	e8 85 bd ff ff       	call   801065d0 <strncpy>
8010a84b:	c7 04 24 1c f5 10 80 	movl   $0x8010f51c,(%esp)
8010a852:	e8 19 be ff ff       	call   80106670 <strlen>
8010a857:	83 c4 0c             	add    $0xc,%esp
8010a85a:	50                   	push   %eax
8010a85b:	8d 86 00 01 00 00    	lea    0x100(%esi),%eax
8010a861:	68 1c f5 10 80       	push   $0x8010f51c
8010a866:	50                   	push   %eax
8010a867:	e8 64 bd ff ff       	call   801065d0 <strncpy>
8010a86c:	83 c4 10             	add    $0x10,%esp
8010a86f:	83 ec 0c             	sub    $0xc,%esp
8010a872:	8d b3 c0 00 00 00    	lea    0xc0(%ebx),%esi
8010a878:	68 8b f4 10 80       	push   $0x8010f48b
8010a87d:	e8 ee bd ff ff       	call   80106670 <strlen>
8010a882:	83 c4 0c             	add    $0xc,%esp
8010a885:	50                   	push   %eax
8010a886:	68 8b f4 10 80       	push   $0x8010f48b
8010a88b:	53                   	push   %ebx
8010a88c:	e8 3f bd ff ff       	call   801065d0 <strncpy>
8010a891:	c7 04 24 a2 f4 10 80 	movl   $0x8010f4a2,(%esp)
8010a898:	e8 d3 bd ff ff       	call   80106670 <strlen>
8010a89d:	83 c4 0c             	add    $0xc,%esp
8010a8a0:	50                   	push   %eax
8010a8a1:	8d 43 40             	lea    0x40(%ebx),%eax
8010a8a4:	68 a2 f4 10 80       	push   $0x8010f4a2
8010a8a9:	50                   	push   %eax
8010a8aa:	e8 21 bd ff ff       	call   801065d0 <strncpy>
8010a8af:	c7 04 24 d4 f4 10 80 	movl   $0x8010f4d4,(%esp)
8010a8b6:	e8 b5 bd ff ff       	call   80106670 <strlen>
8010a8bb:	83 c4 0c             	add    $0xc,%esp
8010a8be:	50                   	push   %eax
8010a8bf:	8d 83 80 00 00 00    	lea    0x80(%ebx),%eax
8010a8c5:	68 d4 f4 10 80       	push   $0x8010f4d4
8010a8ca:	50                   	push   %eax
8010a8cb:	e8 00 bd ff ff       	call   801065d0 <strncpy>
8010a8d0:	8b 47 10             	mov    0x10(%edi),%eax
8010a8d3:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010a8d6:	e8 15 26 00 00       	call   8010cef0 <cgroup_root>
8010a8db:	83 c4 10             	add    $0x10,%esp
8010a8de:	39 45 84             	cmp    %eax,-0x7c(%ebp)
8010a8e1:	0f 84 24 02 00 00    	je     8010ab0b <unsafe_cg_read+0x41b>
8010a8e7:	83 ec 0c             	sub    $0xc,%esp
8010a8ea:	68 2a f5 10 80       	push   $0x8010f52a
8010a8ef:	e8 7c bd ff ff       	call   80106670 <strlen>
8010a8f4:	83 c4 0c             	add    $0xc,%esp
8010a8f7:	50                   	push   %eax
8010a8f8:	68 2a f5 10 80       	push   $0x8010f52a
8010a8fd:	56                   	push   %esi
8010a8fe:	8d b3 80 01 00 00    	lea    0x180(%ebx),%esi
8010a904:	e8 c7 bc ff ff       	call   801065d0 <strncpy>
8010a909:	c7 04 24 f3 f4 10 80 	movl   $0x8010f4f3,(%esp)
8010a910:	e8 5b bd ff ff       	call   80106670 <strlen>
8010a915:	83 c4 0c             	add    $0xc,%esp
8010a918:	50                   	push   %eax
8010a919:	8d 83 00 01 00 00    	lea    0x100(%ebx),%eax
8010a91f:	68 f3 f4 10 80       	push   $0x8010f4f3
8010a924:	50                   	push   %eax
8010a925:	e8 a6 bc ff ff       	call   801065d0 <strncpy>
8010a92a:	c7 04 24 4f f5 10 80 	movl   $0x8010f54f,(%esp)
8010a931:	e8 3a bd ff ff       	call   80106670 <strlen>
8010a936:	83 c4 0c             	add    $0xc,%esp
8010a939:	50                   	push   %eax
8010a93a:	8d 83 40 01 00 00    	lea    0x140(%ebx),%eax
8010a940:	68 4f f5 10 80       	push   $0x8010f54f
8010a945:	50                   	push   %eax
8010a946:	e8 85 bc ff ff       	call   801065d0 <strncpy>
8010a94b:	8b 47 10             	mov    0x10(%edi),%eax
8010a94e:	83 c4 10             	add    $0x10,%esp
8010a951:	80 b8 0d 03 00 00 00 	cmpb   $0x0,0x30d(%eax)
8010a958:	0f 85 5f 01 00 00    	jne    8010aabd <unsafe_cg_read+0x3cd>
8010a95e:	80 b8 0f 03 00 00 00 	cmpb   $0x0,0x30f(%eax)
8010a965:	0f 85 28 01 00 00    	jne    8010aa93 <unsafe_cg_read+0x3a3>
8010a96b:	80 b8 11 03 00 00 00 	cmpb   $0x0,0x311(%eax)
8010a972:	0f 85 f1 00 00 00    	jne    8010aa69 <unsafe_cg_read+0x379>
8010a978:	80 b8 13 03 00 00 00 	cmpb   $0x0,0x313(%eax)
8010a97f:	0f 85 9c 00 00 00    	jne    8010aa21 <unsafe_cg_read+0x331>
8010a985:	83 ec 08             	sub    $0x8,%esp
8010a988:	50                   	push   %eax
8010a989:	56                   	push   %esi
8010a98a:	e8 31 2b 00 00       	call   8010d4c0 <get_cgroup_names_at_path>
8010a98f:	8b 57 0c             	mov    0xc(%edi),%edx
8010a992:	83 c4 10             	add    $0x10,%esp
8010a995:	81 fa ff 0f 00 00    	cmp    $0xfff,%edx
8010a99b:	89 d1                	mov    %edx,%ecx
8010a99d:	0f 87 d7 14 00 00    	ja     8010be7a <unsafe_cg_read+0x178a>
8010a9a3:	8b 45 14             	mov    0x14(%ebp),%eax
8010a9a6:	85 c0                	test   %eax,%eax
8010a9a8:	0f 84 cc 14 00 00    	je     8010be7a <unsafe_cg_read+0x178a>
8010a9ae:	8b 5d 10             	mov    0x10(%ebp),%ebx
8010a9b1:	8b 75 14             	mov    0x14(%ebp),%esi
8010a9b4:	29 d3                	sub    %edx,%ebx
8010a9b6:	eb 0c                	jmp    8010a9c4 <unsafe_cg_read+0x2d4>
8010a9b8:	90                   	nop
8010a9b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010a9c0:	39 f0                	cmp    %esi,%eax
8010a9c2:	73 1c                	jae    8010a9e0 <unsafe_cg_read+0x2f0>
8010a9c4:	0f b6 82 c0 05 12 80 	movzbl -0x7fedfa40(%edx),%eax
8010a9cb:	88 04 13             	mov    %al,(%ebx,%edx,1)
8010a9ce:	83 c2 01             	add    $0x1,%edx
8010a9d1:	89 d0                	mov    %edx,%eax
8010a9d3:	2b 47 0c             	sub    0xc(%edi),%eax
8010a9d6:	81 fa 00 10 00 00    	cmp    $0x1000,%edx
8010a9dc:	89 d1                	mov    %edx,%ecx
8010a9de:	75 e0                	jne    8010a9c0 <unsafe_cg_read+0x2d0>
8010a9e0:	89 4f 0c             	mov    %ecx,0xc(%edi)
8010a9e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010a9e6:	5b                   	pop    %ebx
8010a9e7:	5e                   	pop    %esi
8010a9e8:	5f                   	pop    %edi
8010a9e9:	5d                   	pop    %ebp
8010a9ea:	c3                   	ret    
8010a9eb:	8d 47 14             	lea    0x14(%edi),%eax
8010a9ee:	e8 9d f6 ff ff       	call   8010a090 <get_file_name_constant>
8010a9f3:	85 c0                	test   %eax,%eax
8010a9f5:	0f 84 30 fd ff ff    	je     8010a72b <unsafe_cg_read+0x3b>
8010a9fb:	80 7f 08 00          	cmpb   $0x0,0x8(%edi)
8010a9ff:	0f 84 26 fd ff ff    	je     8010a72b <unsafe_cg_read+0x3b>
8010aa05:	8b 57 10             	mov    0x10(%edi),%edx
8010aa08:	80 3a 00             	cmpb   $0x0,(%edx)
8010aa0b:	0f 84 1a fd ff ff    	je     8010a72b <unsafe_cg_read+0x3b>
8010aa11:	83 f8 13             	cmp    $0x13,%eax
8010aa14:	0f 87 54 14 00 00    	ja     8010be6e <unsafe_cg_read+0x177e>
8010aa1a:	ff 24 85 08 f7 10 80 	jmp    *-0x7fef08f8(,%eax,4)
8010aa21:	83 ec 0c             	sub    $0xc,%esp
8010aa24:	68 39 f5 10 80       	push   $0x8010f539
8010aa29:	e8 42 bc ff ff       	call   80106670 <strlen>
8010aa2e:	83 c4 0c             	add    $0xc,%esp
8010aa31:	50                   	push   %eax
8010aa32:	68 39 f5 10 80       	push   $0x8010f539
8010aa37:	56                   	push   %esi
8010aa38:	e8 93 bb ff ff       	call   801065d0 <strncpy>
8010aa3d:	c7 04 24 44 f5 10 80 	movl   $0x8010f544,(%esp)
8010aa44:	e8 27 bc ff ff       	call   80106670 <strlen>
8010aa49:	83 c4 0c             	add    $0xc,%esp
8010aa4c:	50                   	push   %eax
8010aa4d:	8d 46 40             	lea    0x40(%esi),%eax
8010aa50:	68 44 f5 10 80       	push   $0x8010f544
8010aa55:	83 ee 80             	sub    $0xffffff80,%esi
8010aa58:	50                   	push   %eax
8010aa59:	e8 72 bb ff ff       	call   801065d0 <strncpy>
8010aa5e:	8b 47 10             	mov    0x10(%edi),%eax
8010aa61:	83 c4 10             	add    $0x10,%esp
8010aa64:	e9 1c ff ff ff       	jmp    8010a985 <unsafe_cg_read+0x295>
8010aa69:	83 ec 0c             	sub    $0xc,%esp
8010aa6c:	68 10 f5 10 80       	push   $0x8010f510
8010aa71:	e8 fa bb ff ff       	call   80106670 <strlen>
8010aa76:	83 c4 0c             	add    $0xc,%esp
8010aa79:	50                   	push   %eax
8010aa7a:	68 10 f5 10 80       	push   $0x8010f510
8010aa7f:	56                   	push   %esi
8010aa80:	83 c6 40             	add    $0x40,%esi
8010aa83:	e8 48 bb ff ff       	call   801065d0 <strncpy>
8010aa88:	8b 47 10             	mov    0x10(%edi),%eax
8010aa8b:	83 c4 10             	add    $0x10,%esp
8010aa8e:	e9 e5 fe ff ff       	jmp    8010a978 <unsafe_cg_read+0x288>
8010aa93:	83 ec 0c             	sub    $0xc,%esp
8010aa96:	68 fc f4 10 80       	push   $0x8010f4fc
8010aa9b:	e8 d0 bb ff ff       	call   80106670 <strlen>
8010aaa0:	83 c4 0c             	add    $0xc,%esp
8010aaa3:	50                   	push   %eax
8010aaa4:	68 fc f4 10 80       	push   $0x8010f4fc
8010aaa9:	56                   	push   %esi
8010aaaa:	83 c6 40             	add    $0x40,%esi
8010aaad:	e8 1e bb ff ff       	call   801065d0 <strncpy>
8010aab2:	8b 47 10             	mov    0x10(%edi),%eax
8010aab5:	83 c4 10             	add    $0x10,%esp
8010aab8:	e9 ae fe ff ff       	jmp    8010a96b <unsafe_cg_read+0x27b>
8010aabd:	83 ec 0c             	sub    $0xc,%esp
8010aac0:	68 e0 f4 10 80       	push   $0x8010f4e0
8010aac5:	e8 a6 bb ff ff       	call   80106670 <strlen>
8010aaca:	83 c4 0c             	add    $0xc,%esp
8010aacd:	50                   	push   %eax
8010aace:	68 e0 f4 10 80       	push   $0x8010f4e0
8010aad3:	56                   	push   %esi
8010aad4:	8d b3 00 02 00 00    	lea    0x200(%ebx),%esi
8010aada:	e8 f1 ba ff ff       	call   801065d0 <strncpy>
8010aadf:	c7 04 24 eb f4 10 80 	movl   $0x8010f4eb,(%esp)
8010aae6:	e8 85 bb ff ff       	call   80106670 <strlen>
8010aaeb:	83 c4 0c             	add    $0xc,%esp
8010aaee:	50                   	push   %eax
8010aaef:	8d 83 c0 01 00 00    	lea    0x1c0(%ebx),%eax
8010aaf5:	68 eb f4 10 80       	push   $0x8010f4eb
8010aafa:	50                   	push   %eax
8010aafb:	e8 d0 ba ff ff       	call   801065d0 <strncpy>
8010ab00:	8b 47 10             	mov    0x10(%edi),%eax
8010ab03:	83 c4 10             	add    $0x10,%esp
8010ab06:	e9 53 fe ff ff       	jmp    8010a95e <unsafe_cg_read+0x26e>
8010ab0b:	8b 47 10             	mov    0x10(%edi),%eax
8010ab0e:	e9 72 fe ff ff       	jmp    8010a985 <unsafe_cg_read+0x295>
8010ab13:	83 ec 0c             	sub    $0xc,%esp
8010ab16:	31 c9                	xor    %ecx,%ecx
8010ab18:	31 d2                	xor    %edx,%edx
8010ab1a:	68 37 f6 10 80       	push   $0x8010f637
8010ab1f:	31 db                	xor    %ebx,%ebx
8010ab21:	31 f6                	xor    %esi,%esi
8010ab23:	31 c0                	xor    %eax,%eax
8010ab25:	66 89 4d b5          	mov    %cx,-0x4b(%ebp)
8010ab29:	66 89 55 aa          	mov    %dx,-0x56(%ebp)
8010ab2d:	66 89 5d c0          	mov    %bx,-0x40(%ebp)
8010ab31:	66 89 75 cb          	mov    %si,-0x35(%ebp)
8010ab35:	c7 45 a2 00 00 00 00 	movl   $0x0,-0x5e(%ebp)
8010ab3c:	c7 45 a6 00 00 00 00 	movl   $0x0,-0x5a(%ebp)
8010ab43:	c7 45 ad 00 00 00 00 	movl   $0x0,-0x53(%ebp)
8010ab4a:	c7 45 b1 00 00 00 00 	movl   $0x0,-0x4f(%ebp)
8010ab51:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
8010ab58:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
8010ab5f:	c7 45 c3 00 00 00 00 	movl   $0x0,-0x3d(%ebp)
8010ab66:	c7 45 c7 00 00 00 00 	movl   $0x0,-0x39(%ebp)
8010ab6d:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010ab74:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010ab7b:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
8010ab7f:	e8 ec ba ff ff       	call   80106670 <strlen>
8010ab84:	89 c3                	mov    %eax,%ebx
8010ab86:	58                   	pop    %eax
8010ab87:	5a                   	pop    %edx
8010ab88:	8d 55 a2             	lea    -0x5e(%ebp),%edx
8010ab8b:	ff 77 58             	pushl  0x58(%edi)
8010ab8e:	52                   	push   %edx
8010ab8f:	89 55 84             	mov    %edx,-0x7c(%ebp)
8010ab92:	e8 29 f4 ff ff       	call   80109fc0 <utoa>
8010ab97:	89 c6                	mov    %eax,%esi
8010ab99:	c7 04 24 45 f6 10 80 	movl   $0x8010f645,(%esp)
8010aba0:	8d 5c 33 01          	lea    0x1(%ebx,%esi,1),%ebx
8010aba4:	e8 c7 ba ff ff       	call   80106670 <strlen>
8010aba9:	59                   	pop    %ecx
8010abaa:	01 c3                	add    %eax,%ebx
8010abac:	8d 45 ad             	lea    -0x53(%ebp),%eax
8010abaf:	5e                   	pop    %esi
8010abb0:	ff 77 5c             	pushl  0x5c(%edi)
8010abb3:	50                   	push   %eax
8010abb4:	e8 07 f4 ff ff       	call   80109fc0 <utoa>
8010abb9:	89 c6                	mov    %eax,%esi
8010abbb:	c7 04 24 5e f6 10 80 	movl   $0x8010f65e,(%esp)
8010abc2:	8d 74 33 01          	lea    0x1(%ebx,%esi,1),%esi
8010abc6:	e8 a5 ba ff ff       	call   80106670 <strlen>
8010abcb:	01 c6                	add    %eax,%esi
8010abcd:	58                   	pop    %eax
8010abce:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010abd1:	5a                   	pop    %edx
8010abd2:	ff 77 60             	pushl  0x60(%edi)
8010abd5:	50                   	push   %eax
8010abd6:	e8 e5 f3 ff ff       	call   80109fc0 <utoa>
8010abdb:	89 c3                	mov    %eax,%ebx
8010abdd:	c7 04 24 69 f6 10 80 	movl   $0x8010f669,(%esp)
8010abe4:	8d 5c 1e 01          	lea    0x1(%esi,%ebx,1),%ebx
8010abe8:	e8 83 ba ff ff       	call   80106670 <strlen>
8010abed:	59                   	pop    %ecx
8010abee:	01 c3                	add    %eax,%ebx
8010abf0:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010abf3:	5e                   	pop    %esi
8010abf4:	ff 77 64             	pushl  0x64(%edi)
8010abf7:	50                   	push   %eax
8010abf8:	e8 c3 f3 ff ff       	call   80109fc0 <utoa>
8010abfd:	89 c6                	mov    %eax,%esi
8010abff:	c7 04 24 77 f6 10 80 	movl   $0x8010f677,(%esp)
8010ac06:	e8 65 ba ff ff       	call   80106670 <strlen>
8010ac0b:	8d 4c 33 02          	lea    0x2(%ebx,%esi,1),%ecx
8010ac0f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
8010ac12:	8d 4d ce             	lea    -0x32(%ebp),%ecx
8010ac15:	58                   	pop    %eax
8010ac16:	5a                   	pop    %edx
8010ac17:	ff 77 68             	pushl  0x68(%edi)
8010ac1a:	51                   	push   %ecx
8010ac1b:	89 4d 80             	mov    %ecx,-0x80(%ebp)
8010ac1e:	e8 9d f3 ff ff       	call   80109fc0 <utoa>
8010ac23:	83 c4 0c             	add    $0xc,%esp
8010ac26:	01 d8                	add    %ebx,%eax
8010ac28:	50                   	push   %eax
8010ac29:	6a 00                	push   $0x0
8010ac2b:	68 c0 05 12 80       	push   $0x801205c0
8010ac30:	e8 ab b7 ff ff       	call   801063e0 <memset>
8010ac35:	c7 04 24 37 f6 10 80 	movl   $0x8010f637,(%esp)
8010ac3c:	e8 2f ba ff ff       	call   80106670 <strlen>
8010ac41:	83 c4 0c             	add    $0xc,%esp
8010ac44:	89 c3                	mov    %eax,%ebx
8010ac46:	50                   	push   %eax
8010ac47:	68 37 f6 10 80       	push   $0x8010f637
8010ac4c:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010ac52:	68 c0 05 12 80       	push   $0x801205c0
8010ac57:	e8 74 b9 ff ff       	call   801065d0 <strncpy>
8010ac5c:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010ac5f:	89 14 24             	mov    %edx,(%esp)
8010ac62:	e8 09 ba ff ff       	call   80106670 <strlen>
8010ac67:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010ac6a:	83 c4 0c             	add    $0xc,%esp
8010ac6d:	89 c6                	mov    %eax,%esi
8010ac6f:	50                   	push   %eax
8010ac70:	52                   	push   %edx
8010ac71:	53                   	push   %ebx
8010ac72:	01 f3                	add    %esi,%ebx
8010ac74:	e8 57 b9 ff ff       	call   801065d0 <strncpy>
8010ac79:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010ac80:	e8 eb b9 ff ff       	call   80106670 <strlen>
8010ac85:	83 c4 0c             	add    $0xc,%esp
8010ac88:	89 c6                	mov    %eax,%esi
8010ac8a:	50                   	push   %eax
8010ac8b:	68 f3 f3 10 80       	push   $0x8010f3f3
8010ac90:	53                   	push   %ebx
8010ac91:	e8 3a b9 ff ff       	call   801065d0 <strncpy>
8010ac96:	01 f3                	add    %esi,%ebx
8010ac98:	c7 04 24 45 f6 10 80 	movl   $0x8010f645,(%esp)
8010ac9f:	e8 cc b9 ff ff       	call   80106670 <strlen>
8010aca4:	83 c4 0c             	add    $0xc,%esp
8010aca7:	89 c6                	mov    %eax,%esi
8010aca9:	50                   	push   %eax
8010acaa:	68 45 f6 10 80       	push   $0x8010f645
8010acaf:	53                   	push   %ebx
8010acb0:	01 f3                	add    %esi,%ebx
8010acb2:	e8 19 b9 ff ff       	call   801065d0 <strncpy>
8010acb7:	8d 45 ad             	lea    -0x53(%ebp),%eax
8010acba:	89 04 24             	mov    %eax,(%esp)
8010acbd:	e8 ae b9 ff ff       	call   80106670 <strlen>
8010acc2:	83 c4 0c             	add    $0xc,%esp
8010acc5:	89 c6                	mov    %eax,%esi
8010acc7:	50                   	push   %eax
8010acc8:	8d 45 ad             	lea    -0x53(%ebp),%eax
8010accb:	50                   	push   %eax
8010accc:	53                   	push   %ebx
8010accd:	01 f3                	add    %esi,%ebx
8010accf:	e8 fc b8 ff ff       	call   801065d0 <strncpy>
8010acd4:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010acdb:	e8 90 b9 ff ff       	call   80106670 <strlen>
8010ace0:	83 c4 0c             	add    $0xc,%esp
8010ace3:	89 c6                	mov    %eax,%esi
8010ace5:	50                   	push   %eax
8010ace6:	68 f3 f3 10 80       	push   $0x8010f3f3
8010aceb:	53                   	push   %ebx
8010acec:	01 f3                	add    %esi,%ebx
8010acee:	e8 dd b8 ff ff       	call   801065d0 <strncpy>
8010acf3:	c7 04 24 5e f6 10 80 	movl   $0x8010f65e,(%esp)
8010acfa:	e8 71 b9 ff ff       	call   80106670 <strlen>
8010acff:	83 c4 0c             	add    $0xc,%esp
8010ad02:	89 c6                	mov    %eax,%esi
8010ad04:	50                   	push   %eax
8010ad05:	68 5e f6 10 80       	push   $0x8010f65e
8010ad0a:	53                   	push   %ebx
8010ad0b:	01 f3                	add    %esi,%ebx
8010ad0d:	e8 be b8 ff ff       	call   801065d0 <strncpy>
8010ad12:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010ad15:	89 04 24             	mov    %eax,(%esp)
8010ad18:	e8 53 b9 ff ff       	call   80106670 <strlen>
8010ad1d:	83 c4 0c             	add    $0xc,%esp
8010ad20:	89 c6                	mov    %eax,%esi
8010ad22:	50                   	push   %eax
8010ad23:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010ad26:	50                   	push   %eax
8010ad27:	53                   	push   %ebx
8010ad28:	01 f3                	add    %esi,%ebx
8010ad2a:	e8 a1 b8 ff ff       	call   801065d0 <strncpy>
8010ad2f:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010ad36:	e8 35 b9 ff ff       	call   80106670 <strlen>
8010ad3b:	83 c4 0c             	add    $0xc,%esp
8010ad3e:	89 c6                	mov    %eax,%esi
8010ad40:	50                   	push   %eax
8010ad41:	68 f3 f3 10 80       	push   $0x8010f3f3
8010ad46:	53                   	push   %ebx
8010ad47:	01 f3                	add    %esi,%ebx
8010ad49:	e8 82 b8 ff ff       	call   801065d0 <strncpy>
8010ad4e:	c7 04 24 69 f6 10 80 	movl   $0x8010f669,(%esp)
8010ad55:	e8 16 b9 ff ff       	call   80106670 <strlen>
8010ad5a:	83 c4 0c             	add    $0xc,%esp
8010ad5d:	89 c6                	mov    %eax,%esi
8010ad5f:	50                   	push   %eax
8010ad60:	68 69 f6 10 80       	push   $0x8010f669
8010ad65:	53                   	push   %ebx
8010ad66:	01 f3                	add    %esi,%ebx
8010ad68:	e8 63 b8 ff ff       	call   801065d0 <strncpy>
8010ad6d:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010ad70:	89 04 24             	mov    %eax,(%esp)
8010ad73:	e8 f8 b8 ff ff       	call   80106670 <strlen>
8010ad78:	83 c4 0c             	add    $0xc,%esp
8010ad7b:	89 c6                	mov    %eax,%esi
8010ad7d:	50                   	push   %eax
8010ad7e:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010ad81:	50                   	push   %eax
8010ad82:	53                   	push   %ebx
8010ad83:	e8 48 b8 ff ff       	call   801065d0 <strncpy>
8010ad88:	01 f3                	add    %esi,%ebx
8010ad8a:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010ad91:	e8 da b8 ff ff       	call   80106670 <strlen>
8010ad96:	83 c4 0c             	add    $0xc,%esp
8010ad99:	89 c6                	mov    %eax,%esi
8010ad9b:	50                   	push   %eax
8010ad9c:	68 f3 f3 10 80       	push   $0x8010f3f3
8010ada1:	53                   	push   %ebx
8010ada2:	01 f3                	add    %esi,%ebx
8010ada4:	e8 27 b8 ff ff       	call   801065d0 <strncpy>
8010ada9:	c7 04 24 77 f6 10 80 	movl   $0x8010f677,(%esp)
8010adb0:	e8 bb b8 ff ff       	call   80106670 <strlen>
8010adb5:	83 c4 0c             	add    $0xc,%esp
8010adb8:	89 c6                	mov    %eax,%esi
8010adba:	50                   	push   %eax
8010adbb:	68 81 f6 10 80       	push   $0x8010f681
8010adc0:	53                   	push   %ebx
8010adc1:	01 f3                	add    %esi,%ebx
8010adc3:	e8 08 b8 ff ff       	call   801065d0 <strncpy>
8010adc8:	8b 4d 80             	mov    -0x80(%ebp),%ecx
8010adcb:	89 0c 24             	mov    %ecx,(%esp)
8010adce:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
8010add1:	e8 9a b8 ff ff       	call   80106670 <strlen>
8010add6:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
8010add9:	83 c4 0c             	add    $0xc,%esp
8010addc:	89 c6                	mov    %eax,%esi
8010adde:	50                   	push   %eax
8010addf:	51                   	push   %ecx
8010ade0:	53                   	push   %ebx
8010ade1:	01 f3                	add    %esi,%ebx
8010ade3:	e8 e8 b7 ff ff       	call   801065d0 <strncpy>
8010ade8:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010adef:	e8 7c b8 ff ff       	call   80106670 <strlen>
8010adf4:	83 c4 0c             	add    $0xc,%esp
8010adf7:	89 c6                	mov    %eax,%esi
8010adf9:	50                   	push   %eax
8010adfa:	68 f3 f3 10 80       	push   $0x8010f3f3
8010adff:	53                   	push   %ebx
8010ae00:	e8 cb b7 ff ff       	call   801065d0 <strncpy>
8010ae05:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010ae08:	8b 47 0c             	mov    0xc(%edi),%eax
8010ae0b:	83 c4 10             	add    $0x10,%esp
8010ae0e:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010ae14:	39 c2                	cmp    %eax,%edx
8010ae16:	0f 84 55 10 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010ae1c:	29 c2                	sub    %eax,%edx
8010ae1e:	3b 55 14             	cmp    0x14(%ebp),%edx
8010ae21:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010ae25:	85 d2                	test   %edx,%edx
8010ae27:	0f 8e 44 10 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010ae2d:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010ae34:	84 c9                	test   %cl,%cl
8010ae36:	0f 84 35 10 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010ae3c:	31 db                	xor    %ebx,%ebx
8010ae3e:	8b 75 10             	mov    0x10(%ebp),%esi
8010ae41:	eb 0c                	jmp    8010ae4f <unsafe_cg_read+0x75f>
8010ae43:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010ae4a:	80 
8010ae4b:	84 c9                	test   %cl,%cl
8010ae4d:	74 0a                	je     8010ae59 <unsafe_cg_read+0x769>
8010ae4f:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010ae52:	83 c3 01             	add    $0x1,%ebx
8010ae55:	39 da                	cmp    %ebx,%edx
8010ae57:	75 ea                	jne    8010ae43 <unsafe_cg_read+0x753>
8010ae59:	8b 47 0c             	mov    0xc(%edi),%eax
8010ae5c:	89 da                	mov    %ebx,%edx
8010ae5e:	e9 a3 08 00 00       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010ae63:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010ae66:	83 ec 08             	sub    $0x8,%esp
8010ae69:	31 c9                	xor    %ecx,%ecx
8010ae6b:	66 89 4d d6          	mov    %cx,-0x2a(%ebp)
8010ae6f:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010ae76:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010ae7d:	ff b2 38 03 00 00    	pushl  0x338(%edx)
8010ae83:	56                   	push   %esi
8010ae84:	e8 37 f1 ff ff       	call   80109fc0 <utoa>
8010ae89:	89 34 24             	mov    %esi,(%esp)
8010ae8c:	e8 df b7 ff ff       	call   80106670 <strlen>
8010ae91:	83 c4 0c             	add    $0xc,%esp
8010ae94:	89 c3                	mov    %eax,%ebx
8010ae96:	50                   	push   %eax
8010ae97:	56                   	push   %esi
8010ae98:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010ae9e:	68 c0 05 12 80       	push   $0x801205c0
8010aea3:	e8 28 b7 ff ff       	call   801065d0 <strncpy>
8010aea8:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010aeaf:	e8 bc b7 ff ff       	call   80106670 <strlen>
8010aeb4:	83 c4 0c             	add    $0xc,%esp
8010aeb7:	89 c6                	mov    %eax,%esi
8010aeb9:	50                   	push   %eax
8010aeba:	68 f3 f3 10 80       	push   $0x8010f3f3
8010aebf:	53                   	push   %ebx
8010aec0:	e8 0b b7 ff ff       	call   801065d0 <strncpy>
8010aec5:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010aec8:	8b 47 0c             	mov    0xc(%edi),%eax
8010aecb:	83 c4 10             	add    $0x10,%esp
8010aece:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010aed4:	39 c2                	cmp    %eax,%edx
8010aed6:	0f 84 95 0f 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010aedc:	29 c2                	sub    %eax,%edx
8010aede:	3b 55 14             	cmp    0x14(%ebp),%edx
8010aee1:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010aee5:	85 d2                	test   %edx,%edx
8010aee7:	0f 8e 84 0f 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010aeed:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010aef4:	84 c9                	test   %cl,%cl
8010aef6:	0f 84 75 0f 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010aefc:	31 db                	xor    %ebx,%ebx
8010aefe:	8b 75 10             	mov    0x10(%ebp),%esi
8010af01:	eb 10                	jmp    8010af13 <unsafe_cg_read+0x823>
8010af03:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010af0a:	80 
8010af0b:	84 c9                	test   %cl,%cl
8010af0d:	0f 84 46 ff ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010af13:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010af16:	83 c3 01             	add    $0x1,%ebx
8010af19:	39 da                	cmp    %ebx,%edx
8010af1b:	75 e6                	jne    8010af03 <unsafe_cg_read+0x813>
8010af1d:	e9 37 ff ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010af22:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010af25:	83 ec 08             	sub    $0x8,%esp
8010af28:	31 c0                	xor    %eax,%eax
8010af2a:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
8010af2e:	c6 45 d0 00          	movb   $0x0,-0x30(%ebp)
8010af32:	ff b2 04 03 00 00    	pushl  0x304(%edx)
8010af38:	56                   	push   %esi
8010af39:	e8 d2 ef ff ff       	call   80109f10 <itoa>
8010af3e:	c7 04 24 1c f6 10 80 	movl   $0x8010f61c,(%esp)
8010af45:	e8 26 b7 ff ff       	call   80106670 <strlen>
8010af4a:	83 c4 0c             	add    $0xc,%esp
8010af4d:	89 c3                	mov    %eax,%ebx
8010af4f:	50                   	push   %eax
8010af50:	68 1c f6 10 80       	push   $0x8010f61c
8010af55:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010af5b:	68 c0 05 12 80       	push   $0x801205c0
8010af60:	e8 6b b6 ff ff       	call   801065d0 <strncpy>
8010af65:	89 34 24             	mov    %esi,(%esp)
8010af68:	e8 03 b7 ff ff       	call   80106670 <strlen>
8010af6d:	83 c4 0c             	add    $0xc,%esp
8010af70:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010af73:	50                   	push   %eax
8010af74:	56                   	push   %esi
8010af75:	53                   	push   %ebx
8010af76:	e8 55 b6 ff ff       	call   801065d0 <strncpy>
8010af7b:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010af7e:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010af85:	01 d3                	add    %edx,%ebx
8010af87:	e8 e4 b6 ff ff       	call   80106670 <strlen>
8010af8c:	83 c4 0c             	add    $0xc,%esp
8010af8f:	89 c6                	mov    %eax,%esi
8010af91:	50                   	push   %eax
8010af92:	68 f3 f3 10 80       	push   $0x8010f3f3
8010af97:	53                   	push   %ebx
8010af98:	e8 33 b6 ff ff       	call   801065d0 <strncpy>
8010af9d:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010afa0:	8b 47 0c             	mov    0xc(%edi),%eax
8010afa3:	83 c4 10             	add    $0x10,%esp
8010afa6:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010afac:	39 c2                	cmp    %eax,%edx
8010afae:	0f 84 bd 0e 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010afb4:	29 c2                	sub    %eax,%edx
8010afb6:	3b 55 14             	cmp    0x14(%ebp),%edx
8010afb9:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010afbd:	85 d2                	test   %edx,%edx
8010afbf:	0f 8e ac 0e 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010afc5:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010afcc:	84 c9                	test   %cl,%cl
8010afce:	0f 84 9d 0e 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010afd4:	31 db                	xor    %ebx,%ebx
8010afd6:	8b 75 10             	mov    0x10(%ebp),%esi
8010afd9:	eb 10                	jmp    8010afeb <unsafe_cg_read+0x8fb>
8010afdb:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010afe2:	80 
8010afe3:	84 c9                	test   %cl,%cl
8010afe5:	0f 84 6e fe ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010afeb:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010afee:	83 c3 01             	add    $0x1,%ebx
8010aff1:	39 da                	cmp    %ebx,%edx
8010aff3:	75 e6                	jne    8010afdb <unsafe_cg_read+0x8eb>
8010aff5:	e9 5f fe ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010affa:	31 c0                	xor    %eax,%eax
8010affc:	8d 75 97             	lea    -0x69(%ebp),%esi
8010afff:	83 ec 08             	sub    $0x8,%esp
8010b002:	66 89 45 9f          	mov    %ax,-0x61(%ebp)
8010b006:	31 c0                	xor    %eax,%eax
8010b008:	ff 77 58             	pushl  0x58(%edi)
8010b00b:	66 89 45 aa          	mov    %ax,-0x56(%ebp)
8010b00f:	31 c0                	xor    %eax,%eax
8010b011:	56                   	push   %esi
8010b012:	66 89 45 b5          	mov    %ax,-0x4b(%ebp)
8010b016:	31 c0                	xor    %eax,%eax
8010b018:	c7 45 97 00 00 00 00 	movl   $0x0,-0x69(%ebp)
8010b01f:	66 89 45 c0          	mov    %ax,-0x40(%ebp)
8010b023:	31 c0                	xor    %eax,%eax
8010b025:	c7 45 9b 00 00 00 00 	movl   $0x0,-0x65(%ebp)
8010b02c:	66 89 45 cb          	mov    %ax,-0x35(%ebp)
8010b030:	31 c0                	xor    %eax,%eax
8010b032:	c6 45 a1 00          	movb   $0x0,-0x5f(%ebp)
8010b036:	c7 45 a2 00 00 00 00 	movl   $0x0,-0x5e(%ebp)
8010b03d:	c7 45 a6 00 00 00 00 	movl   $0x0,-0x5a(%ebp)
8010b044:	c6 45 ac 00          	movb   $0x0,-0x54(%ebp)
8010b048:	c7 45 ad 00 00 00 00 	movl   $0x0,-0x53(%ebp)
8010b04f:	c7 45 b1 00 00 00 00 	movl   $0x0,-0x4f(%ebp)
8010b056:	c6 45 b7 00          	movb   $0x0,-0x49(%ebp)
8010b05a:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
8010b061:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
8010b068:	c6 45 c2 00          	movb   $0x0,-0x3e(%ebp)
8010b06c:	c7 45 c3 00 00 00 00 	movl   $0x0,-0x3d(%ebp)
8010b073:	c7 45 c7 00 00 00 00 	movl   $0x0,-0x39(%ebp)
8010b07a:	c6 45 cd 00          	movb   $0x0,-0x33(%ebp)
8010b07e:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010b085:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010b08c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
8010b090:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
8010b094:	e8 77 ee ff ff       	call   80109f10 <itoa>
8010b099:	5a                   	pop    %edx
8010b09a:	8d 45 a2             	lea    -0x5e(%ebp),%eax
8010b09d:	59                   	pop    %ecx
8010b09e:	ff 77 5c             	pushl  0x5c(%edi)
8010b0a1:	50                   	push   %eax
8010b0a2:	e8 69 ee ff ff       	call   80109f10 <itoa>
8010b0a7:	5b                   	pop    %ebx
8010b0a8:	8d 4d ad             	lea    -0x53(%ebp),%ecx
8010b0ab:	58                   	pop    %eax
8010b0ac:	ff 77 60             	pushl  0x60(%edi)
8010b0af:	51                   	push   %ecx
8010b0b0:	89 4d 80             	mov    %ecx,-0x80(%ebp)
8010b0b3:	e8 58 ee ff ff       	call   80109f10 <itoa>
8010b0b8:	58                   	pop    %eax
8010b0b9:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010b0bc:	5a                   	pop    %edx
8010b0bd:	ff 77 64             	pushl  0x64(%edi)
8010b0c0:	50                   	push   %eax
8010b0c1:	e8 4a ee ff ff       	call   80109f10 <itoa>
8010b0c6:	59                   	pop    %ecx
8010b0c7:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010b0ca:	5b                   	pop    %ebx
8010b0cb:	ff 77 68             	pushl  0x68(%edi)
8010b0ce:	50                   	push   %eax
8010b0cf:	e8 3c ee ff ff       	call   80109f10 <itoa>
8010b0d4:	58                   	pop    %eax
8010b0d5:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b0d8:	5a                   	pop    %edx
8010b0d9:	ff 77 6c             	pushl  0x6c(%edi)
8010b0dc:	50                   	push   %eax
8010b0dd:	e8 2e ee ff ff       	call   80109f10 <itoa>
8010b0e2:	c7 04 24 a6 f5 10 80 	movl   $0x8010f5a6,(%esp)
8010b0e9:	e8 82 b5 ff ff       	call   80106670 <strlen>
8010b0ee:	83 c4 0c             	add    $0xc,%esp
8010b0f1:	89 c3                	mov    %eax,%ebx
8010b0f3:	50                   	push   %eax
8010b0f4:	68 a6 f5 10 80       	push   $0x8010f5a6
8010b0f9:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b0ff:	68 c0 05 12 80       	push   $0x801205c0
8010b104:	e8 c7 b4 ff ff       	call   801065d0 <strncpy>
8010b109:	89 34 24             	mov    %esi,(%esp)
8010b10c:	e8 5f b5 ff ff       	call   80106670 <strlen>
8010b111:	83 c4 0c             	add    $0xc,%esp
8010b114:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010b117:	50                   	push   %eax
8010b118:	56                   	push   %esi
8010b119:	53                   	push   %ebx
8010b11a:	e8 b1 b4 ff ff       	call   801065d0 <strncpy>
8010b11f:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010b122:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b129:	01 d3                	add    %edx,%ebx
8010b12b:	e8 40 b5 ff ff       	call   80106670 <strlen>
8010b130:	83 c4 0c             	add    $0xc,%esp
8010b133:	89 c6                	mov    %eax,%esi
8010b135:	50                   	push   %eax
8010b136:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b13b:	53                   	push   %ebx
8010b13c:	01 f3                	add    %esi,%ebx
8010b13e:	e8 8d b4 ff ff       	call   801065d0 <strncpy>
8010b143:	c7 04 24 b4 f5 10 80 	movl   $0x8010f5b4,(%esp)
8010b14a:	e8 21 b5 ff ff       	call   80106670 <strlen>
8010b14f:	83 c4 0c             	add    $0xc,%esp
8010b152:	89 c6                	mov    %eax,%esi
8010b154:	50                   	push   %eax
8010b155:	68 b4 f5 10 80       	push   $0x8010f5b4
8010b15a:	53                   	push   %ebx
8010b15b:	01 f3                	add    %esi,%ebx
8010b15d:	e8 6e b4 ff ff       	call   801065d0 <strncpy>
8010b162:	8d 45 a2             	lea    -0x5e(%ebp),%eax
8010b165:	89 04 24             	mov    %eax,(%esp)
8010b168:	e8 03 b5 ff ff       	call   80106670 <strlen>
8010b16d:	83 c4 0c             	add    $0xc,%esp
8010b170:	89 c6                	mov    %eax,%esi
8010b172:	50                   	push   %eax
8010b173:	8d 45 a2             	lea    -0x5e(%ebp),%eax
8010b176:	50                   	push   %eax
8010b177:	53                   	push   %ebx
8010b178:	e8 53 b4 ff ff       	call   801065d0 <strncpy>
8010b17d:	01 f3                	add    %esi,%ebx
8010b17f:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b186:	e8 e5 b4 ff ff       	call   80106670 <strlen>
8010b18b:	83 c4 0c             	add    $0xc,%esp
8010b18e:	89 c6                	mov    %eax,%esi
8010b190:	50                   	push   %eax
8010b191:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b196:	53                   	push   %ebx
8010b197:	01 f3                	add    %esi,%ebx
8010b199:	e8 32 b4 ff ff       	call   801065d0 <strncpy>
8010b19e:	c7 04 24 c1 f5 10 80 	movl   $0x8010f5c1,(%esp)
8010b1a5:	e8 c6 b4 ff ff       	call   80106670 <strlen>
8010b1aa:	83 c4 0c             	add    $0xc,%esp
8010b1ad:	89 c6                	mov    %eax,%esi
8010b1af:	50                   	push   %eax
8010b1b0:	68 c1 f5 10 80       	push   $0x8010f5c1
8010b1b5:	53                   	push   %ebx
8010b1b6:	01 f3                	add    %esi,%ebx
8010b1b8:	e8 13 b4 ff ff       	call   801065d0 <strncpy>
8010b1bd:	8b 4d 80             	mov    -0x80(%ebp),%ecx
8010b1c0:	89 0c 24             	mov    %ecx,(%esp)
8010b1c3:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
8010b1c6:	e8 a5 b4 ff ff       	call   80106670 <strlen>
8010b1cb:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
8010b1ce:	83 c4 0c             	add    $0xc,%esp
8010b1d1:	89 c6                	mov    %eax,%esi
8010b1d3:	50                   	push   %eax
8010b1d4:	51                   	push   %ecx
8010b1d5:	53                   	push   %ebx
8010b1d6:	01 f3                	add    %esi,%ebx
8010b1d8:	e8 f3 b3 ff ff       	call   801065d0 <strncpy>
8010b1dd:	83 c4 10             	add    $0x10,%esp
8010b1e0:	80 7f 54 00          	cmpb   $0x0,0x54(%edi)
8010b1e4:	0f 84 15 01 00 00    	je     8010b2ff <unsafe_cg_read+0xc0f>
8010b1ea:	83 ec 0c             	sub    $0xc,%esp
8010b1ed:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b1f2:	e8 79 b4 ff ff       	call   80106670 <strlen>
8010b1f7:	83 c4 0c             	add    $0xc,%esp
8010b1fa:	89 c6                	mov    %eax,%esi
8010b1fc:	50                   	push   %eax
8010b1fd:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b202:	53                   	push   %ebx
8010b203:	01 f3                	add    %esi,%ebx
8010b205:	e8 c6 b3 ff ff       	call   801065d0 <strncpy>
8010b20a:	c7 04 24 d0 f5 10 80 	movl   $0x8010f5d0,(%esp)
8010b211:	e8 5a b4 ff ff       	call   80106670 <strlen>
8010b216:	83 c4 0c             	add    $0xc,%esp
8010b219:	89 c6                	mov    %eax,%esi
8010b21b:	50                   	push   %eax
8010b21c:	68 d0 f5 10 80       	push   $0x8010f5d0
8010b221:	53                   	push   %ebx
8010b222:	01 f3                	add    %esi,%ebx
8010b224:	e8 a7 b3 ff ff       	call   801065d0 <strncpy>
8010b229:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010b22c:	89 04 24             	mov    %eax,(%esp)
8010b22f:	e8 3c b4 ff ff       	call   80106670 <strlen>
8010b234:	83 c4 0c             	add    $0xc,%esp
8010b237:	89 c6                	mov    %eax,%esi
8010b239:	50                   	push   %eax
8010b23a:	8d 45 b8             	lea    -0x48(%ebp),%eax
8010b23d:	50                   	push   %eax
8010b23e:	53                   	push   %ebx
8010b23f:	01 f3                	add    %esi,%ebx
8010b241:	e8 8a b3 ff ff       	call   801065d0 <strncpy>
8010b246:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b24d:	e8 1e b4 ff ff       	call   80106670 <strlen>
8010b252:	83 c4 0c             	add    $0xc,%esp
8010b255:	89 c6                	mov    %eax,%esi
8010b257:	50                   	push   %eax
8010b258:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b25d:	53                   	push   %ebx
8010b25e:	01 f3                	add    %esi,%ebx
8010b260:	e8 6b b3 ff ff       	call   801065d0 <strncpy>
8010b265:	c7 04 24 de f5 10 80 	movl   $0x8010f5de,(%esp)
8010b26c:	e8 ff b3 ff ff       	call   80106670 <strlen>
8010b271:	83 c4 0c             	add    $0xc,%esp
8010b274:	89 c6                	mov    %eax,%esi
8010b276:	50                   	push   %eax
8010b277:	68 de f5 10 80       	push   $0x8010f5de
8010b27c:	53                   	push   %ebx
8010b27d:	01 f3                	add    %esi,%ebx
8010b27f:	e8 4c b3 ff ff       	call   801065d0 <strncpy>
8010b284:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010b287:	89 04 24             	mov    %eax,(%esp)
8010b28a:	e8 e1 b3 ff ff       	call   80106670 <strlen>
8010b28f:	83 c4 0c             	add    $0xc,%esp
8010b292:	89 c6                	mov    %eax,%esi
8010b294:	50                   	push   %eax
8010b295:	8d 45 c3             	lea    -0x3d(%ebp),%eax
8010b298:	50                   	push   %eax
8010b299:	53                   	push   %ebx
8010b29a:	01 f3                	add    %esi,%ebx
8010b29c:	e8 2f b3 ff ff       	call   801065d0 <strncpy>
8010b2a1:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b2a8:	e8 c3 b3 ff ff       	call   80106670 <strlen>
8010b2ad:	83 c4 0c             	add    $0xc,%esp
8010b2b0:	89 c6                	mov    %eax,%esi
8010b2b2:	50                   	push   %eax
8010b2b3:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b2b8:	53                   	push   %ebx
8010b2b9:	01 f3                	add    %esi,%ebx
8010b2bb:	e8 10 b3 ff ff       	call   801065d0 <strncpy>
8010b2c0:	c7 04 24 ee f5 10 80 	movl   $0x8010f5ee,(%esp)
8010b2c7:	e8 a4 b3 ff ff       	call   80106670 <strlen>
8010b2cc:	83 c4 0c             	add    $0xc,%esp
8010b2cf:	89 c6                	mov    %eax,%esi
8010b2d1:	50                   	push   %eax
8010b2d2:	68 ee f5 10 80       	push   $0x8010f5ee
8010b2d7:	53                   	push   %ebx
8010b2d8:	e8 f3 b2 ff ff       	call   801065d0 <strncpy>
8010b2dd:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b2e0:	01 f3                	add    %esi,%ebx
8010b2e2:	89 04 24             	mov    %eax,(%esp)
8010b2e5:	e8 86 b3 ff ff       	call   80106670 <strlen>
8010b2ea:	83 c4 0c             	add    $0xc,%esp
8010b2ed:	89 c6                	mov    %eax,%esi
8010b2ef:	50                   	push   %eax
8010b2f0:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b2f3:	50                   	push   %eax
8010b2f4:	53                   	push   %ebx
8010b2f5:	01 f3                	add    %esi,%ebx
8010b2f7:	e8 d4 b2 ff ff       	call   801065d0 <strncpy>
8010b2fc:	83 c4 10             	add    $0x10,%esp
8010b2ff:	83 ec 0c             	sub    $0xc,%esp
8010b302:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b307:	e8 64 b3 ff ff       	call   80106670 <strlen>
8010b30c:	83 c4 0c             	add    $0xc,%esp
8010b30f:	89 c6                	mov    %eax,%esi
8010b311:	50                   	push   %eax
8010b312:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b317:	53                   	push   %ebx
8010b318:	e8 b3 b2 ff ff       	call   801065d0 <strncpy>
8010b31d:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010b320:	8b 47 0c             	mov    0xc(%edi),%eax
8010b323:	83 c4 10             	add    $0x10,%esp
8010b326:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010b32c:	39 c2                	cmp    %eax,%edx
8010b32e:	0f 84 3d 0b 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b334:	29 c2                	sub    %eax,%edx
8010b336:	3b 55 14             	cmp    0x14(%ebp),%edx
8010b339:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010b33d:	85 d2                	test   %edx,%edx
8010b33f:	0f 8e 2c 0b 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b345:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b34c:	84 c9                	test   %cl,%cl
8010b34e:	0f 84 1d 0b 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b354:	31 db                	xor    %ebx,%ebx
8010b356:	8b 75 10             	mov    0x10(%ebp),%esi
8010b359:	eb 10                	jmp    8010b36b <unsafe_cg_read+0xc7b>
8010b35b:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010b362:	80 
8010b363:	84 c9                	test   %cl,%cl
8010b365:	0f 84 ee fa ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b36b:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010b36e:	83 c3 01             	add    $0x1,%ebx
8010b371:	39 da                	cmp    %ebx,%edx
8010b373:	75 e6                	jne    8010b35b <unsafe_cg_read+0xc6b>
8010b375:	e9 df fa ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b37a:	8d 75 c3             	lea    -0x3d(%ebp),%esi
8010b37d:	83 ec 04             	sub    $0x4,%esp
8010b380:	6a 03                	push   $0x3
8010b382:	6a 00                	push   $0x0
8010b384:	56                   	push   %esi
8010b385:	e8 56 b0 ff ff       	call   801063e0 <memset>
8010b38a:	8b 47 10             	mov    0x10(%edi),%eax
8010b38d:	59                   	pop    %ecx
8010b38e:	5b                   	pop    %ebx
8010b38f:	ff b0 24 03 00 00    	pushl  0x324(%eax)
8010b395:	56                   	push   %esi
8010b396:	e8 75 eb ff ff       	call   80109f10 <itoa>
8010b39b:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b39e:	83 c4 0c             	add    $0xc,%esp
8010b3a1:	6a 03                	push   $0x3
8010b3a3:	6a 00                	push   $0x0
8010b3a5:	50                   	push   %eax
8010b3a6:	e8 35 b0 ff ff       	call   801063e0 <memset>
8010b3ab:	58                   	pop    %eax
8010b3ac:	8b 47 10             	mov    0x10(%edi),%eax
8010b3af:	5a                   	pop    %edx
8010b3b0:	ff b0 28 03 00 00    	pushl  0x328(%eax)
8010b3b6:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b3b9:	50                   	push   %eax
8010b3ba:	e8 51 eb ff ff       	call   80109f10 <itoa>
8010b3bf:	c7 04 24 7c f5 10 80 	movl   $0x8010f57c,(%esp)
8010b3c6:	e8 a5 b2 ff ff       	call   80106670 <strlen>
8010b3cb:	83 c4 0c             	add    $0xc,%esp
8010b3ce:	89 c3                	mov    %eax,%ebx
8010b3d0:	50                   	push   %eax
8010b3d1:	68 7c f5 10 80       	push   $0x8010f57c
8010b3d6:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b3dc:	68 c0 05 12 80       	push   $0x801205c0
8010b3e1:	e8 ea b1 ff ff       	call   801065d0 <strncpy>
8010b3e6:	89 34 24             	mov    %esi,(%esp)
8010b3e9:	e8 82 b2 ff ff       	call   80106670 <strlen>
8010b3ee:	83 c4 0c             	add    $0xc,%esp
8010b3f1:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010b3f4:	50                   	push   %eax
8010b3f5:	56                   	push   %esi
8010b3f6:	53                   	push   %ebx
8010b3f7:	e8 d4 b1 ff ff       	call   801065d0 <strncpy>
8010b3fc:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010b3ff:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b406:	01 d3                	add    %edx,%ebx
8010b408:	e8 63 b2 ff ff       	call   80106670 <strlen>
8010b40d:	83 c4 0c             	add    $0xc,%esp
8010b410:	89 c6                	mov    %eax,%esi
8010b412:	50                   	push   %eax
8010b413:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b418:	53                   	push   %ebx
8010b419:	01 f3                	add    %esi,%ebx
8010b41b:	e8 b0 b1 ff ff       	call   801065d0 <strncpy>
8010b420:	c7 04 24 8e f5 10 80 	movl   $0x8010f58e,(%esp)
8010b427:	e8 44 b2 ff ff       	call   80106670 <strlen>
8010b42c:	83 c4 0c             	add    $0xc,%esp
8010b42f:	89 c6                	mov    %eax,%esi
8010b431:	50                   	push   %eax
8010b432:	68 8e f5 10 80       	push   $0x8010f58e
8010b437:	53                   	push   %ebx
8010b438:	01 f3                	add    %esi,%ebx
8010b43a:	e8 91 b1 ff ff       	call   801065d0 <strncpy>
8010b43f:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b442:	89 04 24             	mov    %eax,(%esp)
8010b445:	e8 26 b2 ff ff       	call   80106670 <strlen>
8010b44a:	83 c4 0c             	add    $0xc,%esp
8010b44d:	89 c6                	mov    %eax,%esi
8010b44f:	50                   	push   %eax
8010b450:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b453:	50                   	push   %eax
8010b454:	53                   	push   %ebx
8010b455:	01 f3                	add    %esi,%ebx
8010b457:	e8 74 b1 ff ff       	call   801065d0 <strncpy>
8010b45c:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b463:	e8 08 b2 ff ff       	call   80106670 <strlen>
8010b468:	83 c4 0c             	add    $0xc,%esp
8010b46b:	89 c6                	mov    %eax,%esi
8010b46d:	50                   	push   %eax
8010b46e:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b473:	53                   	push   %ebx
8010b474:	e8 57 b1 ff ff       	call   801065d0 <strncpy>
8010b479:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010b47c:	8b 47 0c             	mov    0xc(%edi),%eax
8010b47f:	83 c4 10             	add    $0x10,%esp
8010b482:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010b488:	39 c2                	cmp    %eax,%edx
8010b48a:	0f 84 e1 09 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b490:	29 c2                	sub    %eax,%edx
8010b492:	3b 55 14             	cmp    0x14(%ebp),%edx
8010b495:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010b499:	85 d2                	test   %edx,%edx
8010b49b:	0f 8e d0 09 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b4a1:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b4a8:	84 c9                	test   %cl,%cl
8010b4aa:	0f 84 c1 09 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b4b0:	31 db                	xor    %ebx,%ebx
8010b4b2:	8b 75 10             	mov    0x10(%ebp),%esi
8010b4b5:	eb 10                	jmp    8010b4c7 <unsafe_cg_read+0xdd7>
8010b4b7:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010b4be:	80 
8010b4bf:	84 c9                	test   %cl,%cl
8010b4c1:	0f 84 92 f9 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b4c7:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010b4ca:	83 c3 01             	add    $0x1,%ebx
8010b4cd:	39 da                	cmp    %ebx,%edx
8010b4cf:	75 e6                	jne    8010b4b7 <unsafe_cg_read+0xdc7>
8010b4d1:	e9 83 f9 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b4d6:	b8 0a 00 00 00       	mov    $0xa,%eax
8010b4db:	c7 45 ce 70 6f 70 75 	movl   $0x75706f70,-0x32(%ebp)
8010b4e2:	c7 45 d2 6c 61 74 65 	movl   $0x6574616c,-0x2e(%ebp)
8010b4e9:	c7 45 d6 64 20 2d 20 	movl   $0x202d2064,-0x2a(%ebp)
8010b4f0:	c7 45 da 30 0a 66 72 	movl   $0x72660a30,-0x26(%ebp)
8010b4f7:	c7 45 de 6f 7a 65 6e 	movl   $0x6e657a6f,-0x22(%ebp)
8010b4fe:	c7 45 e2 20 2d 20 30 	movl   $0x30202d20,-0x1e(%ebp)
8010b505:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
8010b509:	80 ba 14 03 00 00 00 	cmpb   $0x0,0x314(%edx)
8010b510:	74 18                	je     8010b52a <unsafe_cg_read+0xe3a>
8010b512:	83 ec 0c             	sub    $0xc,%esp
8010b515:	68 6f f5 10 80       	push   $0x8010f56f
8010b51a:	e8 51 b1 ff ff       	call   80106670 <strlen>
8010b51f:	8b 57 10             	mov    0x10(%edi),%edx
8010b522:	c6 44 05 ce 31       	movb   $0x31,-0x32(%ebp,%eax,1)
8010b527:	83 c4 10             	add    $0x10,%esp
8010b52a:	8b b2 34 03 00 00    	mov    0x334(%edx),%esi
8010b530:	85 f6                	test   %esi,%esi
8010b532:	74 14                	je     8010b548 <unsafe_cg_read+0xe58>
8010b534:	8d 45 ce             	lea    -0x32(%ebp),%eax
8010b537:	83 ec 0c             	sub    $0xc,%esp
8010b53a:	50                   	push   %eax
8010b53b:	e8 30 b1 ff ff       	call   80106670 <strlen>
8010b540:	83 c4 10             	add    $0x10,%esp
8010b543:	c6 44 05 cc 31       	movb   $0x31,-0x34(%ebp,%eax,1)
8010b548:	83 7d 14 1a          	cmpl   $0x1a,0x14(%ebp)
8010b54c:	b9 1a 00 00 00       	mov    $0x1a,%ecx
8010b551:	8b 47 0c             	mov    0xc(%edi),%eax
8010b554:	0f 46 4d 14          	cmovbe 0x14(%ebp),%ecx
8010b558:	85 c9                	test   %ecx,%ecx
8010b55a:	0f 84 11 09 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b560:	8d 74 05 ce          	lea    -0x32(%ebp,%eax,1),%esi
8010b564:	0f b6 16             	movzbl (%esi),%edx
8010b567:	84 d2                	test   %dl,%dl
8010b569:	0f 84 02 09 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b56f:	31 db                	xor    %ebx,%ebx
8010b571:	8b 45 10             	mov    0x10(%ebp),%eax
8010b574:	eb 0c                	jmp    8010b582 <unsafe_cg_read+0xe92>
8010b576:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
8010b57a:	84 d2                	test   %dl,%dl
8010b57c:	0f 84 d7 f8 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b582:	88 14 18             	mov    %dl,(%eax,%ebx,1)
8010b585:	83 c3 01             	add    $0x1,%ebx
8010b588:	39 d9                	cmp    %ebx,%ecx
8010b58a:	75 ea                	jne    8010b576 <unsafe_cg_read+0xe86>
8010b58c:	e9 c8 f8 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b591:	83 ec 04             	sub    $0x4,%esp
8010b594:	31 db                	xor    %ebx,%ebx
8010b596:	6a 40                	push   $0x40
8010b598:	6a 00                	push   $0x0
8010b59a:	68 c0 05 12 80       	push   $0x801205c0
8010b59f:	e8 3c ae ff ff       	call   801063e0 <memset>
8010b5a4:	8b 47 10             	mov    0x10(%edi),%eax
8010b5a7:	83 c4 10             	add    $0x10,%esp
8010b5aa:	80 b8 0c 03 00 00 00 	cmpb   $0x0,0x30c(%eax)
8010b5b1:	74 34                	je     8010b5e7 <unsafe_cg_read+0xef7>
8010b5b3:	83 ec 0c             	sub    $0xc,%esp
8010b5b6:	68 5b f5 10 80       	push   $0x8010f55b
8010b5bb:	e8 b0 b0 ff ff       	call   80106670 <strlen>
8010b5c0:	83 c4 0c             	add    $0xc,%esp
8010b5c3:	50                   	push   %eax
8010b5c4:	68 5b f5 10 80       	push   $0x8010f55b
8010b5c9:	68 c0 05 12 80       	push   $0x801205c0
8010b5ce:	e8 bd ae ff ff       	call   80106490 <memmove>
8010b5d3:	c7 04 24 5b f5 10 80 	movl   $0x8010f55b,(%esp)
8010b5da:	e8 91 b0 ff ff       	call   80106670 <strlen>
8010b5df:	89 c3                	mov    %eax,%ebx
8010b5e1:	8b 47 10             	mov    0x10(%edi),%eax
8010b5e4:	83 c4 10             	add    $0x10,%esp
8010b5e7:	80 b8 0e 03 00 00 00 	cmpb   $0x0,0x30e(%eax)
8010b5ee:	74 36                	je     8010b626 <unsafe_cg_read+0xf36>
8010b5f0:	83 ec 0c             	sub    $0xc,%esp
8010b5f3:	68 60 f5 10 80       	push   $0x8010f560
8010b5f8:	e8 73 b0 ff ff       	call   80106670 <strlen>
8010b5fd:	83 c4 0c             	add    $0xc,%esp
8010b600:	50                   	push   %eax
8010b601:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010b607:	68 60 f5 10 80       	push   $0x8010f560
8010b60c:	50                   	push   %eax
8010b60d:	e8 7e ae ff ff       	call   80106490 <memmove>
8010b612:	c7 04 24 60 f5 10 80 	movl   $0x8010f560,(%esp)
8010b619:	e8 52 b0 ff ff       	call   80106670 <strlen>
8010b61e:	01 c3                	add    %eax,%ebx
8010b620:	8b 47 10             	mov    0x10(%edi),%eax
8010b623:	83 c4 10             	add    $0x10,%esp
8010b626:	80 b8 10 03 00 00 00 	cmpb   $0x0,0x310(%eax)
8010b62d:	74 36                	je     8010b665 <unsafe_cg_read+0xf75>
8010b62f:	83 ec 0c             	sub    $0xc,%esp
8010b632:	68 65 f5 10 80       	push   $0x8010f565
8010b637:	e8 34 b0 ff ff       	call   80106670 <strlen>
8010b63c:	83 c4 0c             	add    $0xc,%esp
8010b63f:	50                   	push   %eax
8010b640:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010b646:	68 65 f5 10 80       	push   $0x8010f565
8010b64b:	50                   	push   %eax
8010b64c:	e8 3f ae ff ff       	call   80106490 <memmove>
8010b651:	c7 04 24 65 f5 10 80 	movl   $0x8010f565,(%esp)
8010b658:	e8 13 b0 ff ff       	call   80106670 <strlen>
8010b65d:	01 c3                	add    %eax,%ebx
8010b65f:	8b 47 10             	mov    0x10(%edi),%eax
8010b662:	83 c4 10             	add    $0x10,%esp
8010b665:	80 b8 12 03 00 00 00 	cmpb   $0x0,0x312(%eax)
8010b66c:	74 33                	je     8010b6a1 <unsafe_cg_read+0xfb1>
8010b66e:	83 ec 0c             	sub    $0xc,%esp
8010b671:	68 6a f5 10 80       	push   $0x8010f56a
8010b676:	e8 f5 af ff ff       	call   80106670 <strlen>
8010b67b:	83 c4 0c             	add    $0xc,%esp
8010b67e:	50                   	push   %eax
8010b67f:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010b685:	68 6a f5 10 80       	push   $0x8010f56a
8010b68a:	50                   	push   %eax
8010b68b:	e8 00 ae ff ff       	call   80106490 <memmove>
8010b690:	c7 04 24 6a f5 10 80 	movl   $0x8010f56a,(%esp)
8010b697:	e8 d4 af ff ff       	call   80106670 <strlen>
8010b69c:	83 c4 10             	add    $0x10,%esp
8010b69f:	01 c3                	add    %eax,%ebx
8010b6a1:	39 5d 14             	cmp    %ebx,0x14(%ebp)
8010b6a4:	8b 47 0c             	mov    0xc(%edi),%eax
8010b6a7:	0f 4e 5d 14          	cmovle 0x14(%ebp),%ebx
8010b6ab:	85 db                	test   %ebx,%ebx
8010b6ad:	0f 8e be 07 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b6b3:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b6ba:	31 d2                	xor    %edx,%edx
8010b6bc:	84 c9                	test   %cl,%cl
8010b6be:	0f 84 7e 08 00 00    	je     8010bf42 <unsafe_cg_read+0x1852>
8010b6c4:	8b 75 10             	mov    0x10(%ebp),%esi
8010b6c7:	eb 10                	jmp    8010b6d9 <unsafe_cg_read+0xfe9>
8010b6c9:	0f b6 8c 10 c0 05 12 	movzbl -0x7fedfa40(%eax,%edx,1),%ecx
8010b6d0:	80 
8010b6d1:	84 c9                	test   %cl,%cl
8010b6d3:	0f 84 a8 07 00 00    	je     8010be81 <unsafe_cg_read+0x1791>
8010b6d9:	88 0c 16             	mov    %cl,(%esi,%edx,1)
8010b6dc:	83 c2 01             	add    $0x1,%edx
8010b6df:	39 d3                	cmp    %edx,%ebx
8010b6e1:	75 e6                	jne    8010b6c9 <unsafe_cg_read+0xfd9>
8010b6e3:	e9 71 f7 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b6e8:	8b 57 58             	mov    0x58(%edi),%edx
8010b6eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
8010b6ee:	83 ec 0c             	sub    $0xc,%esp
8010b6f1:	8d 47 0c             	lea    0xc(%edi),%eax
8010b6f4:	ff 75 14             	pushl  0x14(%ebp)
8010b6f7:	e8 c4 eb ff ff       	call   8010a2c0 <read_file_mem_max.isra.14>
8010b6fc:	89 c3                	mov    %eax,%ebx
8010b6fe:	8b 47 0c             	mov    0xc(%edi),%eax
8010b701:	83 c4 10             	add    $0x10,%esp
8010b704:	89 da                	mov    %ebx,%edx
8010b706:	01 d0                	add    %edx,%eax
8010b708:	89 47 0c             	mov    %eax,0xc(%edi)
8010b70b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010b70e:	89 d8                	mov    %ebx,%eax
8010b710:	5b                   	pop    %ebx
8010b711:	5e                   	pop    %esi
8010b712:	5f                   	pop    %edi
8010b713:	5d                   	pop    %ebp
8010b714:	c3                   	ret    
8010b715:	8b 57 58             	mov    0x58(%edi),%edx
8010b718:	8b 4d 10             	mov    0x10(%ebp),%ecx
8010b71b:	83 ec 0c             	sub    $0xc,%esp
8010b71e:	8d 47 0c             	lea    0xc(%edi),%eax
8010b721:	ff 75 14             	pushl  0x14(%ebp)
8010b724:	e8 97 eb ff ff       	call   8010a2c0 <read_file_mem_max.isra.14>
8010b729:	89 c3                	mov    %eax,%ebx
8010b72b:	83 c4 10             	add    $0x10,%esp
8010b72e:	8b 47 0c             	mov    0xc(%edi),%eax
8010b731:	89 da                	mov    %ebx,%edx
8010b733:	eb d1                	jmp    8010b706 <unsafe_cg_read+0x1016>
8010b735:	8b 47 54             	mov    0x54(%edi),%eax
8010b738:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010b73b:	83 ec 08             	sub    $0x8,%esp
8010b73e:	31 db                	xor    %ebx,%ebx
8010b740:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010b747:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010b74e:	66 89 5d d6          	mov    %bx,-0x2a(%ebp)
8010b752:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
8010b756:	50                   	push   %eax
8010b757:	56                   	push   %esi
8010b758:	e8 b3 e7 ff ff       	call   80109f10 <itoa>
8010b75d:	89 34 24             	mov    %esi,(%esp)
8010b760:	e8 0b af ff ff       	call   80106670 <strlen>
8010b765:	83 c4 0c             	add    $0xc,%esp
8010b768:	89 c3                	mov    %eax,%ebx
8010b76a:	50                   	push   %eax
8010b76b:	56                   	push   %esi
8010b76c:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b772:	68 c0 05 12 80       	push   $0x801205c0
8010b777:	e8 54 ae ff ff       	call   801065d0 <strncpy>
8010b77c:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b783:	e8 e8 ae ff ff       	call   80106670 <strlen>
8010b788:	83 c4 0c             	add    $0xc,%esp
8010b78b:	89 c6                	mov    %eax,%esi
8010b78d:	50                   	push   %eax
8010b78e:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b793:	53                   	push   %ebx
8010b794:	e8 37 ae ff ff       	call   801065d0 <strncpy>
8010b799:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010b79c:	8b 47 0c             	mov    0xc(%edi),%eax
8010b79f:	83 c4 10             	add    $0x10,%esp
8010b7a2:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010b7a8:	39 c2                	cmp    %eax,%edx
8010b7aa:	0f 84 c1 06 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b7b0:	29 c2                	sub    %eax,%edx
8010b7b2:	3b 55 14             	cmp    0x14(%ebp),%edx
8010b7b5:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010b7b9:	85 d2                	test   %edx,%edx
8010b7bb:	0f 8e b0 06 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b7c1:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b7c8:	84 c9                	test   %cl,%cl
8010b7ca:	0f 84 a1 06 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b7d0:	31 db                	xor    %ebx,%ebx
8010b7d2:	8b 75 10             	mov    0x10(%ebp),%esi
8010b7d5:	eb 10                	jmp    8010b7e7 <unsafe_cg_read+0x10f7>
8010b7d7:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010b7de:	80 
8010b7df:	84 c9                	test   %cl,%cl
8010b7e1:	0f 84 72 f6 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b7e7:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010b7ea:	83 c3 01             	add    $0x1,%ebx
8010b7ed:	39 da                	cmp    %ebx,%edx
8010b7ef:	75 e6                	jne    8010b7d7 <unsafe_cg_read+0x10e7>
8010b7f1:	e9 63 f6 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b7f6:	8b 47 58             	mov    0x58(%edi),%eax
8010b7f9:	31 f6                	xor    %esi,%esi
8010b7fb:	83 ec 08             	sub    $0x8,%esp
8010b7fe:	66 89 75 d6          	mov    %si,-0x2a(%ebp)
8010b802:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010b805:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010b80c:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010b813:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
8010b817:	50                   	push   %eax
8010b818:	56                   	push   %esi
8010b819:	e8 f2 e6 ff ff       	call   80109f10 <itoa>
8010b81e:	c7 04 24 2c f6 10 80 	movl   $0x8010f62c,(%esp)
8010b825:	e8 46 ae ff ff       	call   80106670 <strlen>
8010b82a:	83 c4 0c             	add    $0xc,%esp
8010b82d:	89 c3                	mov    %eax,%ebx
8010b82f:	50                   	push   %eax
8010b830:	68 2c f6 10 80       	push   $0x8010f62c
8010b835:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b83b:	68 c0 05 12 80       	push   $0x801205c0
8010b840:	e8 8b ad ff ff       	call   801065d0 <strncpy>
8010b845:	89 34 24             	mov    %esi,(%esp)
8010b848:	e8 23 ae ff ff       	call   80106670 <strlen>
8010b84d:	83 c4 0c             	add    $0xc,%esp
8010b850:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010b853:	50                   	push   %eax
8010b854:	56                   	push   %esi
8010b855:	53                   	push   %ebx
8010b856:	e8 75 ad ff ff       	call   801065d0 <strncpy>
8010b85b:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010b85e:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b865:	01 d3                	add    %edx,%ebx
8010b867:	e8 04 ae ff ff       	call   80106670 <strlen>
8010b86c:	83 c4 0c             	add    $0xc,%esp
8010b86f:	89 c6                	mov    %eax,%esi
8010b871:	50                   	push   %eax
8010b872:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b877:	53                   	push   %ebx
8010b878:	e8 53 ad ff ff       	call   801065d0 <strncpy>
8010b87d:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010b880:	8b 47 0c             	mov    0xc(%edi),%eax
8010b883:	83 c4 10             	add    $0x10,%esp
8010b886:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010b88c:	39 c2                	cmp    %eax,%edx
8010b88e:	0f 84 dd 05 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b894:	29 c2                	sub    %eax,%edx
8010b896:	3b 55 14             	cmp    0x14(%ebp),%edx
8010b899:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010b89d:	85 d2                	test   %edx,%edx
8010b89f:	0f 8e cc 05 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b8a5:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b8ac:	84 c9                	test   %cl,%cl
8010b8ae:	0f 84 bd 05 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b8b4:	31 db                	xor    %ebx,%ebx
8010b8b6:	8b 75 10             	mov    0x10(%ebp),%esi
8010b8b9:	eb 10                	jmp    8010b8cb <unsafe_cg_read+0x11db>
8010b8bb:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010b8c2:	80 
8010b8c3:	84 c9                	test   %cl,%cl
8010b8c5:	0f 84 8e f5 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b8cb:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010b8ce:	83 c3 01             	add    $0x1,%ebx
8010b8d1:	39 da                	cmp    %ebx,%edx
8010b8d3:	75 e6                	jne    8010b8bb <unsafe_cg_read+0x11cb>
8010b8d5:	e9 7f f5 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b8da:	8b 47 58             	mov    0x58(%edi),%eax
8010b8dd:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010b8e0:	83 ec 08             	sub    $0x8,%esp
8010b8e3:	31 d2                	xor    %edx,%edx
8010b8e5:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010b8ec:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010b8f3:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
8010b8f7:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
8010b8fb:	50                   	push   %eax
8010b8fc:	56                   	push   %esi
8010b8fd:	e8 0e e6 ff ff       	call   80109f10 <itoa>
8010b902:	c7 04 24 0a f6 10 80 	movl   $0x8010f60a,(%esp)
8010b909:	e8 62 ad ff ff       	call   80106670 <strlen>
8010b90e:	83 c4 0c             	add    $0xc,%esp
8010b911:	89 c3                	mov    %eax,%ebx
8010b913:	50                   	push   %eax
8010b914:	68 0a f6 10 80       	push   $0x8010f60a
8010b919:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b91f:	68 c0 05 12 80       	push   $0x801205c0
8010b924:	e8 a7 ac ff ff       	call   801065d0 <strncpy>
8010b929:	89 34 24             	mov    %esi,(%esp)
8010b92c:	e8 3f ad ff ff       	call   80106670 <strlen>
8010b931:	83 c4 0c             	add    $0xc,%esp
8010b934:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010b937:	50                   	push   %eax
8010b938:	56                   	push   %esi
8010b939:	53                   	push   %ebx
8010b93a:	e8 91 ac ff ff       	call   801065d0 <strncpy>
8010b93f:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010b942:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010b949:	01 d3                	add    %edx,%ebx
8010b94b:	e8 20 ad ff ff       	call   80106670 <strlen>
8010b950:	83 c4 0c             	add    $0xc,%esp
8010b953:	89 c6                	mov    %eax,%esi
8010b955:	50                   	push   %eax
8010b956:	68 f3 f3 10 80       	push   $0x8010f3f3
8010b95b:	53                   	push   %ebx
8010b95c:	e8 6f ac ff ff       	call   801065d0 <strncpy>
8010b961:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010b964:	8b 47 0c             	mov    0xc(%edi),%eax
8010b967:	83 c4 10             	add    $0x10,%esp
8010b96a:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010b970:	39 c2                	cmp    %eax,%edx
8010b972:	0f 84 f9 04 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b978:	29 c2                	sub    %eax,%edx
8010b97a:	3b 55 14             	cmp    0x14(%ebp),%edx
8010b97d:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010b981:	85 d2                	test   %edx,%edx
8010b983:	0f 8e e8 04 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010b989:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010b990:	84 c9                	test   %cl,%cl
8010b992:	0f 84 d9 04 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010b998:	31 db                	xor    %ebx,%ebx
8010b99a:	8b 75 10             	mov    0x10(%ebp),%esi
8010b99d:	eb 10                	jmp    8010b9af <unsafe_cg_read+0x12bf>
8010b99f:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010b9a6:	80 
8010b9a7:	84 c9                	test   %cl,%cl
8010b9a9:	0f 84 aa f4 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010b9af:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010b9b2:	83 c3 01             	add    $0x1,%ebx
8010b9b5:	39 da                	cmp    %ebx,%edx
8010b9b7:	75 e6                	jne    8010b99f <unsafe_cg_read+0x12af>
8010b9b9:	e9 9b f4 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010b9be:	83 ec 0c             	sub    $0xc,%esp
8010b9c1:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010b9c8:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010b9cf:	68 0a f6 10 80       	push   $0x8010f60a
8010b9d4:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
8010b9db:	c7 45 da 00 00 00 00 	movl   $0x0,-0x26(%ebp)
8010b9e2:	c7 45 de 00 00 00 00 	movl   $0x0,-0x22(%ebp)
8010b9e9:	e8 82 ac ff ff       	call   80106670 <strlen>
8010b9ee:	83 c4 0c             	add    $0xc,%esp
8010b9f1:	89 c3                	mov    %eax,%ebx
8010b9f3:	50                   	push   %eax
8010b9f4:	68 0a f6 10 80       	push   $0x8010f60a
8010b9f9:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010b9ff:	68 c0 05 12 80       	push   $0x801205c0
8010ba04:	e8 c7 ab ff ff       	call   801065d0 <strncpy>
8010ba09:	59                   	pop    %ecx
8010ba0a:	5e                   	pop    %esi
8010ba0b:	8d 75 ce             	lea    -0x32(%ebp),%esi
8010ba0e:	ff 77 54             	pushl  0x54(%edi)
8010ba11:	56                   	push   %esi
8010ba12:	e8 a9 e5 ff ff       	call   80109fc0 <utoa>
8010ba17:	83 c4 0c             	add    $0xc,%esp
8010ba1a:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010ba1d:	50                   	push   %eax
8010ba1e:	56                   	push   %esi
8010ba1f:	53                   	push   %ebx
8010ba20:	e8 ab ab ff ff       	call   801065d0 <strncpy>
8010ba25:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010ba28:	c7 04 24 11 f6 10 80 	movl   $0x8010f611,(%esp)
8010ba2f:	01 d3                	add    %edx,%ebx
8010ba31:	e8 3a ac ff ff       	call   80106670 <strlen>
8010ba36:	83 c4 0c             	add    $0xc,%esp
8010ba39:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010ba3c:	50                   	push   %eax
8010ba3d:	68 11 f6 10 80       	push   $0x8010f611
8010ba42:	53                   	push   %ebx
8010ba43:	e8 88 ab ff ff       	call   801065d0 <strncpy>
8010ba48:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010ba4b:	58                   	pop    %eax
8010ba4c:	01 d3                	add    %edx,%ebx
8010ba4e:	5a                   	pop    %edx
8010ba4f:	ff 77 58             	pushl  0x58(%edi)
8010ba52:	56                   	push   %esi
8010ba53:	e8 68 e5 ff ff       	call   80109fc0 <utoa>
8010ba58:	83 c4 0c             	add    $0xc,%esp
8010ba5b:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010ba5e:	50                   	push   %eax
8010ba5f:	56                   	push   %esi
8010ba60:	53                   	push   %ebx
8010ba61:	e8 6a ab ff ff       	call   801065d0 <strncpy>
8010ba66:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010ba69:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010ba70:	01 d3                	add    %edx,%ebx
8010ba72:	e8 f9 ab ff ff       	call   80106670 <strlen>
8010ba77:	83 c4 0c             	add    $0xc,%esp
8010ba7a:	89 c6                	mov    %eax,%esi
8010ba7c:	50                   	push   %eax
8010ba7d:	68 f3 f3 10 80       	push   $0x8010f3f3
8010ba82:	53                   	push   %ebx
8010ba83:	e8 48 ab ff ff       	call   801065d0 <strncpy>
8010ba88:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010ba8b:	8b 47 0c             	mov    0xc(%edi),%eax
8010ba8e:	83 c4 10             	add    $0x10,%esp
8010ba91:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010ba97:	39 c2                	cmp    %eax,%edx
8010ba99:	0f 84 d2 03 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010ba9f:	29 c2                	sub    %eax,%edx
8010baa1:	3b 55 14             	cmp    0x14(%ebp),%edx
8010baa4:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010baa8:	85 d2                	test   %edx,%edx
8010baaa:	0f 8e c1 03 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010bab0:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010bab7:	84 c9                	test   %cl,%cl
8010bab9:	0f 84 b2 03 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010babf:	31 db                	xor    %ebx,%ebx
8010bac1:	8b 75 10             	mov    0x10(%ebp),%esi
8010bac4:	eb 10                	jmp    8010bad6 <unsafe_cg_read+0x13e6>
8010bac6:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010bacd:	80 
8010bace:	84 c9                	test   %cl,%cl
8010bad0:	0f 84 83 f3 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010bad6:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010bad9:	83 c3 01             	add    $0x1,%ebx
8010badc:	39 da                	cmp    %ebx,%edx
8010bade:	75 e6                	jne    8010bac6 <unsafe_cg_read+0x13d6>
8010bae0:	e9 74 f3 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010bae5:	83 ec 0c             	sub    $0xc,%esp
8010bae8:	c7 45 ce 00 00 00 00 	movl   $0x0,-0x32(%ebp)
8010baef:	c7 45 d2 00 00 00 00 	movl   $0x0,-0x2e(%ebp)
8010baf6:	68 00 f6 10 80       	push   $0x8010f600
8010bafb:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
8010bb02:	c7 45 da 00 00 00 00 	movl   $0x0,-0x26(%ebp)
8010bb09:	c7 45 de 00 00 00 00 	movl   $0x0,-0x22(%ebp)
8010bb10:	e8 5b ab ff ff       	call   80106670 <strlen>
8010bb15:	83 c4 0c             	add    $0xc,%esp
8010bb18:	89 c3                	mov    %eax,%ebx
8010bb1a:	50                   	push   %eax
8010bb1b:	68 00 f6 10 80       	push   $0x8010f600
8010bb20:	81 c3 c0 05 12 80    	add    $0x801205c0,%ebx
8010bb26:	68 c0 05 12 80       	push   $0x801205c0
8010bb2b:	e8 a0 aa ff ff       	call   801065d0 <strncpy>
8010bb30:	59                   	pop    %ecx
8010bb31:	8d 55 ce             	lea    -0x32(%ebp),%edx
8010bb34:	5e                   	pop    %esi
8010bb35:	ff 77 54             	pushl  0x54(%edi)
8010bb38:	52                   	push   %edx
8010bb39:	89 55 84             	mov    %edx,-0x7c(%ebp)
8010bb3c:	e8 7f e4 ff ff       	call   80109fc0 <utoa>
8010bb41:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010bb44:	83 c4 0c             	add    $0xc,%esp
8010bb47:	89 c6                	mov    %eax,%esi
8010bb49:	50                   	push   %eax
8010bb4a:	52                   	push   %edx
8010bb4b:	53                   	push   %ebx
8010bb4c:	01 f3                	add    %esi,%ebx
8010bb4e:	e8 7d aa ff ff       	call   801065d0 <strncpy>
8010bb53:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010bb5a:	e8 11 ab ff ff       	call   80106670 <strlen>
8010bb5f:	83 c4 0c             	add    $0xc,%esp
8010bb62:	89 c6                	mov    %eax,%esi
8010bb64:	50                   	push   %eax
8010bb65:	68 f3 f3 10 80       	push   $0x8010f3f3
8010bb6a:	53                   	push   %ebx
8010bb6b:	e8 60 aa ff ff       	call   801065d0 <strncpy>
8010bb70:	8d 14 33             	lea    (%ebx,%esi,1),%edx
8010bb73:	8b 47 0c             	mov    0xc(%edi),%eax
8010bb76:	83 c4 10             	add    $0x10,%esp
8010bb79:	81 ea c0 05 12 80    	sub    $0x801205c0,%edx
8010bb7f:	39 c2                	cmp    %eax,%edx
8010bb81:	0f 84 ea 02 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010bb87:	29 c2                	sub    %eax,%edx
8010bb89:	3b 55 14             	cmp    0x14(%ebp),%edx
8010bb8c:	0f 47 55 14          	cmova  0x14(%ebp),%edx
8010bb90:	85 d2                	test   %edx,%edx
8010bb92:	0f 8e d9 02 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010bb98:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010bb9f:	84 c9                	test   %cl,%cl
8010bba1:	0f 84 ca 02 00 00    	je     8010be71 <unsafe_cg_read+0x1781>
8010bba7:	31 db                	xor    %ebx,%ebx
8010bba9:	8b 75 10             	mov    0x10(%ebp),%esi
8010bbac:	eb 10                	jmp    8010bbbe <unsafe_cg_read+0x14ce>
8010bbae:	0f b6 8c 18 c0 05 12 	movzbl -0x7fedfa40(%eax,%ebx,1),%ecx
8010bbb5:	80 
8010bbb6:	84 c9                	test   %cl,%cl
8010bbb8:	0f 84 9b f2 ff ff    	je     8010ae59 <unsafe_cg_read+0x769>
8010bbbe:	88 0c 1e             	mov    %cl,(%esi,%ebx,1)
8010bbc1:	83 c3 01             	add    $0x1,%ebx
8010bbc4:	39 da                	cmp    %ebx,%edx
8010bbc6:	75 e6                	jne    8010bbae <unsafe_cg_read+0x14be>
8010bbc8:	e9 8c f2 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010bbcd:	83 ec 04             	sub    $0x4,%esp
8010bbd0:	6a 03                	push   $0x3
8010bbd2:	6a 00                	push   $0x0
8010bbd4:	68 c0 05 12 80       	push   $0x801205c0
8010bbd9:	e8 02 a8 ff ff       	call   801063e0 <memset>
8010bbde:	8b 47 10             	mov    0x10(%edi),%eax
8010bbe1:	59                   	pop    %ecx
8010bbe2:	5b                   	pop    %ebx
8010bbe3:	ff b0 1c 03 00 00    	pushl  0x31c(%eax)
8010bbe9:	68 c0 05 12 80       	push   $0x801205c0
8010bbee:	e8 1d e3 ff ff       	call   80109f10 <itoa>
8010bbf3:	83 c4 10             	add    $0x10,%esp
8010bbf6:	81 7d 14 00 10 00 00 	cmpl   $0x1000,0x14(%ebp)
8010bbfd:	b9 00 10 00 00       	mov    $0x1000,%ecx
8010bc02:	0f 46 4d 14          	cmovbe 0x14(%ebp),%ecx
8010bc06:	85 c9                	test   %ecx,%ecx
8010bc08:	0f 84 60 02 00 00    	je     8010be6e <unsafe_cg_read+0x177e>
8010bc0e:	0f b6 05 c0 05 12 80 	movzbl 0x801205c0,%eax
8010bc15:	84 c0                	test   %al,%al
8010bc17:	0f 84 6e 02 00 00    	je     8010be8b <unsafe_cg_read+0x179b>
8010bc1d:	31 db                	xor    %ebx,%ebx
8010bc1f:	8b 75 10             	mov    0x10(%ebp),%esi
8010bc22:	eb 11                	jmp    8010bc35 <unsafe_cg_read+0x1545>
8010bc24:	0f b6 83 c0 05 12 80 	movzbl -0x7fedfa40(%ebx),%eax
8010bc2b:	89 da                	mov    %ebx,%edx
8010bc2d:	84 c0                	test   %al,%al
8010bc2f:	0f 84 5a 02 00 00    	je     8010be8f <unsafe_cg_read+0x179f>
8010bc35:	88 04 1e             	mov    %al,(%esi,%ebx,1)
8010bc38:	83 c3 01             	add    $0x1,%ebx
8010bc3b:	39 d9                	cmp    %ebx,%ecx
8010bc3d:	75 e5                	jne    8010bc24 <unsafe_cg_read+0x1534>
8010bc3f:	e9 15 f2 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010bc44:	83 ec 08             	sub    $0x8,%esp
8010bc47:	ff b2 18 03 00 00    	pushl  0x318(%edx)
8010bc4d:	68 c0 05 12 80       	push   $0x801205c0
8010bc52:	e8 b9 e2 ff ff       	call   80109f10 <itoa>
8010bc57:	83 c4 10             	add    $0x10,%esp
8010bc5a:	81 7d 14 00 10 00 00 	cmpl   $0x1000,0x14(%ebp)
8010bc61:	b9 00 10 00 00       	mov    $0x1000,%ecx
8010bc66:	0f 46 4d 14          	cmovbe 0x14(%ebp),%ecx
8010bc6a:	85 c9                	test   %ecx,%ecx
8010bc6c:	0f 84 fc 01 00 00    	je     8010be6e <unsafe_cg_read+0x177e>
8010bc72:	0f b6 05 c0 05 12 80 	movzbl 0x801205c0,%eax
8010bc79:	84 c0                	test   %al,%al
8010bc7b:	0f 84 0a 02 00 00    	je     8010be8b <unsafe_cg_read+0x179b>
8010bc81:	31 db                	xor    %ebx,%ebx
8010bc83:	8b 75 10             	mov    0x10(%ebp),%esi
8010bc86:	eb 11                	jmp    8010bc99 <unsafe_cg_read+0x15a9>
8010bc88:	0f b6 83 c0 05 12 80 	movzbl -0x7fedfa40(%ebx),%eax
8010bc8f:	89 da                	mov    %ebx,%edx
8010bc91:	84 c0                	test   %al,%al
8010bc93:	0f 84 f6 01 00 00    	je     8010be8f <unsafe_cg_read+0x179f>
8010bc99:	88 04 1e             	mov    %al,(%esi,%ebx,1)
8010bc9c:	83 c3 01             	add    $0x1,%ebx
8010bc9f:	39 d9                	cmp    %ebx,%ecx
8010bca1:	75 e5                	jne    8010bc88 <unsafe_cg_read+0x1598>
8010bca3:	e9 b1 f1 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010bca8:	83 ec 04             	sub    $0x4,%esp
8010bcab:	31 db                	xor    %ebx,%ebx
8010bcad:	6a 40                	push   $0x40
8010bcaf:	6a 00                	push   $0x0
8010bcb1:	68 c0 05 12 80       	push   $0x801205c0
8010bcb6:	e8 25 a7 ff ff       	call   801063e0 <memset>
8010bcbb:	8b 47 10             	mov    0x10(%edi),%eax
8010bcbe:	83 c4 10             	add    $0x10,%esp
8010bcc1:	80 b8 0d 03 00 00 00 	cmpb   $0x0,0x30d(%eax)
8010bcc8:	74 34                	je     8010bcfe <unsafe_cg_read+0x160e>
8010bcca:	83 ec 0c             	sub    $0xc,%esp
8010bccd:	68 5b f5 10 80       	push   $0x8010f55b
8010bcd2:	e8 99 a9 ff ff       	call   80106670 <strlen>
8010bcd7:	83 c4 0c             	add    $0xc,%esp
8010bcda:	50                   	push   %eax
8010bcdb:	68 5b f5 10 80       	push   $0x8010f55b
8010bce0:	68 c0 05 12 80       	push   $0x801205c0
8010bce5:	e8 a6 a7 ff ff       	call   80106490 <memmove>
8010bcea:	c7 04 24 5b f5 10 80 	movl   $0x8010f55b,(%esp)
8010bcf1:	e8 7a a9 ff ff       	call   80106670 <strlen>
8010bcf6:	89 c3                	mov    %eax,%ebx
8010bcf8:	8b 47 10             	mov    0x10(%edi),%eax
8010bcfb:	83 c4 10             	add    $0x10,%esp
8010bcfe:	80 b8 0f 03 00 00 00 	cmpb   $0x0,0x30f(%eax)
8010bd05:	74 36                	je     8010bd3d <unsafe_cg_read+0x164d>
8010bd07:	83 ec 0c             	sub    $0xc,%esp
8010bd0a:	68 60 f5 10 80       	push   $0x8010f560
8010bd0f:	e8 5c a9 ff ff       	call   80106670 <strlen>
8010bd14:	83 c4 0c             	add    $0xc,%esp
8010bd17:	50                   	push   %eax
8010bd18:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010bd1e:	68 60 f5 10 80       	push   $0x8010f560
8010bd23:	50                   	push   %eax
8010bd24:	e8 67 a7 ff ff       	call   80106490 <memmove>
8010bd29:	c7 04 24 60 f5 10 80 	movl   $0x8010f560,(%esp)
8010bd30:	e8 3b a9 ff ff       	call   80106670 <strlen>
8010bd35:	01 c3                	add    %eax,%ebx
8010bd37:	8b 47 10             	mov    0x10(%edi),%eax
8010bd3a:	83 c4 10             	add    $0x10,%esp
8010bd3d:	80 b8 11 03 00 00 00 	cmpb   $0x0,0x311(%eax)
8010bd44:	74 36                	je     8010bd7c <unsafe_cg_read+0x168c>
8010bd46:	83 ec 0c             	sub    $0xc,%esp
8010bd49:	68 65 f5 10 80       	push   $0x8010f565
8010bd4e:	e8 1d a9 ff ff       	call   80106670 <strlen>
8010bd53:	83 c4 0c             	add    $0xc,%esp
8010bd56:	50                   	push   %eax
8010bd57:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010bd5d:	68 65 f5 10 80       	push   $0x8010f565
8010bd62:	50                   	push   %eax
8010bd63:	e8 28 a7 ff ff       	call   80106490 <memmove>
8010bd68:	c7 04 24 65 f5 10 80 	movl   $0x8010f565,(%esp)
8010bd6f:	e8 fc a8 ff ff       	call   80106670 <strlen>
8010bd74:	01 c3                	add    %eax,%ebx
8010bd76:	8b 47 10             	mov    0x10(%edi),%eax
8010bd79:	83 c4 10             	add    $0x10,%esp
8010bd7c:	80 b8 13 03 00 00 00 	cmpb   $0x0,0x313(%eax)
8010bd83:	74 33                	je     8010bdb8 <unsafe_cg_read+0x16c8>
8010bd85:	83 ec 0c             	sub    $0xc,%esp
8010bd88:	68 6a f5 10 80       	push   $0x8010f56a
8010bd8d:	e8 de a8 ff ff       	call   80106670 <strlen>
8010bd92:	83 c4 0c             	add    $0xc,%esp
8010bd95:	50                   	push   %eax
8010bd96:	8d 83 c0 05 12 80    	lea    -0x7fedfa40(%ebx),%eax
8010bd9c:	68 6a f5 10 80       	push   $0x8010f56a
8010bda1:	50                   	push   %eax
8010bda2:	e8 e9 a6 ff ff       	call   80106490 <memmove>
8010bda7:	c7 04 24 6a f5 10 80 	movl   $0x8010f56a,(%esp)
8010bdae:	e8 bd a8 ff ff       	call   80106670 <strlen>
8010bdb3:	83 c4 10             	add    $0x10,%esp
8010bdb6:	01 c3                	add    %eax,%ebx
8010bdb8:	39 5d 14             	cmp    %ebx,0x14(%ebp)
8010bdbb:	8b 47 0c             	mov    0xc(%edi),%eax
8010bdbe:	0f 4e 5d 14          	cmovle 0x14(%ebp),%ebx
8010bdc2:	85 db                	test   %ebx,%ebx
8010bdc4:	0f 8e a7 00 00 00    	jle    8010be71 <unsafe_cg_read+0x1781>
8010bdca:	0f b6 88 c0 05 12 80 	movzbl -0x7fedfa40(%eax),%ecx
8010bdd1:	31 d2                	xor    %edx,%edx
8010bdd3:	84 c9                	test   %cl,%cl
8010bdd5:	0f 84 67 01 00 00    	je     8010bf42 <unsafe_cg_read+0x1852>
8010bddb:	8b 75 10             	mov    0x10(%ebp),%esi
8010bdde:	eb 10                	jmp    8010bdf0 <unsafe_cg_read+0x1700>
8010bde0:	0f b6 8c 10 c0 05 12 	movzbl -0x7fedfa40(%eax,%edx,1),%ecx
8010bde7:	80 
8010bde8:	84 c9                	test   %cl,%cl
8010bdea:	0f 84 91 00 00 00    	je     8010be81 <unsafe_cg_read+0x1791>
8010bdf0:	88 0c 16             	mov    %cl,(%esi,%edx,1)
8010bdf3:	83 c2 01             	add    $0x1,%edx
8010bdf6:	39 d3                	cmp    %edx,%ebx
8010bdf8:	75 e6                	jne    8010bde0 <unsafe_cg_read+0x16f0>
8010bdfa:	e9 5a f0 ff ff       	jmp    8010ae59 <unsafe_cg_read+0x769>
8010bdff:	8b 47 0c             	mov    0xc(%edi),%eax
8010be02:	89 7d 0c             	mov    %edi,0xc(%ebp)
8010be05:	be 67 66 66 66       	mov    $0x66666667,%esi
8010be0a:	89 45 84             	mov    %eax,-0x7c(%ebp)
8010be0d:	b8 01 00 00 00       	mov    $0x1,%eax
8010be12:	89 c7                	mov    %eax,%edi
8010be14:	8d 47 ff             	lea    -0x1(%edi),%eax
8010be17:	89 45 80             	mov    %eax,-0x80(%ebp)
8010be1a:	8b 84 ba 00 02 00 00 	mov    0x200(%edx,%edi,4),%eax
8010be21:	85 c0                	test   %eax,%eax
8010be23:	74 36                	je     8010be5b <unsafe_cg_read+0x176b>
8010be25:	83 ec 0c             	sub    $0xc,%esp
8010be28:	bb 01 00 00 00       	mov    $0x1,%ebx
8010be2d:	50                   	push   %eax
8010be2e:	e8 54 94 ff ff       	call   80105287 <proc_pid>
8010be33:	83 c4 10             	add    $0x10,%esp
8010be36:	85 c0                	test   %eax,%eax
8010be38:	89 c1                	mov    %eax,%ecx
8010be3a:	7e 17                	jle    8010be53 <unsafe_cg_read+0x1763>
8010be3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010be40:	89 c8                	mov    %ecx,%eax
8010be42:	c1 f9 1f             	sar    $0x1f,%ecx
8010be45:	83 c3 01             	add    $0x1,%ebx
8010be48:	f7 ee                	imul   %esi
8010be4a:	c1 fa 02             	sar    $0x2,%edx
8010be4d:	29 ca                	sub    %ecx,%edx
8010be4f:	89 d1                	mov    %edx,%ecx
8010be51:	75 ed                	jne    8010be40 <unsafe_cg_read+0x1750>
8010be53:	39 5d 84             	cmp    %ebx,-0x7c(%ebp)
8010be56:	7c 46                	jl     8010be9e <unsafe_cg_read+0x17ae>
8010be58:	29 5d 84             	sub    %ebx,-0x7c(%ebp)
8010be5b:	83 c7 01             	add    $0x1,%edi
8010be5e:	83 ff 41             	cmp    $0x41,%edi
8010be61:	74 08                	je     8010be6b <unsafe_cg_read+0x177b>
8010be63:	8b 45 0c             	mov    0xc(%ebp),%eax
8010be66:	8b 50 10             	mov    0x10(%eax),%edx
8010be69:	eb a9                	jmp    8010be14 <unsafe_cg_read+0x1724>
8010be6b:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010be6e:	8b 47 0c             	mov    0xc(%edi),%eax
8010be71:	31 d2                	xor    %edx,%edx
8010be73:	31 db                	xor    %ebx,%ebx
8010be75:	e9 8c f8 ff ff       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010be7a:	31 c0                	xor    %eax,%eax
8010be7c:	e9 5f eb ff ff       	jmp    8010a9e0 <unsafe_cg_read+0x2f0>
8010be81:	8b 47 0c             	mov    0xc(%edi),%eax
8010be84:	89 d3                	mov    %edx,%ebx
8010be86:	e9 7b f8 ff ff       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010be8b:	31 d2                	xor    %edx,%edx
8010be8d:	31 db                	xor    %ebx,%ebx
8010be8f:	8b 45 10             	mov    0x10(%ebp),%eax
8010be92:	c6 04 10 0a          	movb   $0xa,(%eax,%edx,1)
8010be96:	8b 47 0c             	mov    0xc(%edi),%eax
8010be99:	e9 68 f8 ff ff       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010be9e:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010bea1:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
8010bea4:	31 db                	xor    %ebx,%ebx
8010bea6:	8b 75 80             	mov    -0x80(%ebp),%esi
8010bea9:	89 da                	mov    %ebx,%edx
8010beab:	89 fb                	mov    %edi,%ebx
8010bead:	39 55 14             	cmp    %edx,0x14(%ebp)
8010beb0:	7e 6f                	jle    8010bf21 <unsafe_cg_read+0x1831>
8010beb2:	83 fe 40             	cmp    $0x40,%esi
8010beb5:	74 6a                	je     8010bf21 <unsafe_cg_read+0x1831>
8010beb7:	8b 43 10             	mov    0x10(%ebx),%eax
8010beba:	8d be 80 00 00 00    	lea    0x80(%esi),%edi
8010bec0:	8b 44 b8 04          	mov    0x4(%eax,%edi,4),%eax
8010bec4:	85 c0                	test   %eax,%eax
8010bec6:	74 72                	je     8010bf3a <unsafe_cg_read+0x184a>
8010bec8:	83 ec 04             	sub    $0x4,%esp
8010becb:	89 4d 80             	mov    %ecx,-0x80(%ebp)
8010bece:	89 55 84             	mov    %edx,-0x7c(%ebp)
8010bed1:	6a 05                	push   $0x5
8010bed3:	6a 00                	push   $0x0
8010bed5:	68 c0 05 12 80       	push   $0x801205c0
8010beda:	e8 01 a5 ff ff       	call   801063e0 <memset>
8010bedf:	58                   	pop    %eax
8010bee0:	8b 43 10             	mov    0x10(%ebx),%eax
8010bee3:	ff 74 b8 04          	pushl  0x4(%eax,%edi,4)
8010bee7:	e8 9b 93 ff ff       	call   80105287 <proc_pid>
8010beec:	5a                   	pop    %edx
8010beed:	59                   	pop    %ecx
8010beee:	50                   	push   %eax
8010beef:	68 c0 05 12 80       	push   $0x801205c0
8010bef4:	e8 17 e0 ff ff       	call   80109f10 <itoa>
8010bef9:	8b 4d 80             	mov    -0x80(%ebp),%ecx
8010befc:	83 c4 10             	add    $0x10,%esp
8010beff:	8b 55 84             	mov    -0x7c(%ebp),%edx
8010bf02:	39 c8                	cmp    %ecx,%eax
8010bf04:	7e 27                	jle    8010bf2d <unsafe_cg_read+0x183d>
8010bf06:	0f b6 81 c0 05 12 80 	movzbl -0x7fedfa40(%ecx),%eax
8010bf0d:	8b 7d 10             	mov    0x10(%ebp),%edi
8010bf10:	83 c1 01             	add    $0x1,%ecx
8010bf13:	88 07                	mov    %al,(%edi)
8010bf15:	83 45 10 01          	addl   $0x1,0x10(%ebp)
8010bf19:	83 c2 01             	add    $0x1,%edx
8010bf1c:	39 55 14             	cmp    %edx,0x14(%ebp)
8010bf1f:	7f 91                	jg     8010beb2 <unsafe_cg_read+0x17c2>
8010bf21:	89 df                	mov    %ebx,%edi
8010bf23:	89 d3                	mov    %edx,%ebx
8010bf25:	8b 47 0c             	mov    0xc(%edi),%eax
8010bf28:	e9 d9 f7 ff ff       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010bf2d:	8b 45 10             	mov    0x10(%ebp),%eax
8010bf30:	83 c6 01             	add    $0x1,%esi
8010bf33:	31 c9                	xor    %ecx,%ecx
8010bf35:	c6 00 0a             	movb   $0xa,(%eax)
8010bf38:	eb db                	jmp    8010bf15 <unsafe_cg_read+0x1825>
8010bf3a:	83 c6 01             	add    $0x1,%esi
8010bf3d:	e9 6b ff ff ff       	jmp    8010bead <unsafe_cg_read+0x17bd>
8010bf42:	31 db                	xor    %ebx,%ebx
8010bf44:	e9 bd f7 ff ff       	jmp    8010b706 <unsafe_cg_read+0x1016>
8010bf49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010bf50 <unsafe_cg_write>:
8010bf50:	55                   	push   %ebp
8010bf51:	89 e5                	mov    %esp,%ebp
8010bf53:	57                   	push   %edi
8010bf54:	56                   	push   %esi
8010bf55:	53                   	push   %ebx
8010bf56:	83 ec 5c             	sub    $0x5c,%esp
8010bf59:	8b 45 08             	mov    0x8(%ebp),%eax
8010bf5c:	8b 75 0c             	mov    0xc(%ebp),%esi
8010bf5f:	83 c0 14             	add    $0x14,%eax
8010bf62:	e8 29 e1 ff ff       	call   8010a090 <get_file_name_constant>
8010bf67:	8b 7d 08             	mov    0x8(%ebp),%edi
8010bf6a:	80 7f 09 00          	cmpb   $0x0,0x9(%edi)
8010bf6e:	0f 84 da 00 00 00    	je     8010c04e <unsafe_cg_write+0xfe>
8010bf74:	8b 57 10             	mov    0x10(%edi),%edx
8010bf77:	80 3a 00             	cmpb   $0x0,(%edx)
8010bf7a:	0f 84 ce 00 00 00    	je     8010c04e <unsafe_cg_write+0xfe>
8010bf80:	81 7d 10 00 10 00 00 	cmpl   $0x1000,0x10(%ebp)
8010bf87:	0f 8f c1 00 00 00    	jg     8010c04e <unsafe_cg_write+0xfe>
8010bf8d:	83 f8 01             	cmp    $0x1,%eax
8010bf90:	0f 84 ba 02 00 00    	je     8010c250 <unsafe_cg_write+0x300>
8010bf96:	83 f8 02             	cmp    $0x2,%eax
8010bf99:	0f 84 04 03 00 00    	je     8010c2a3 <unsafe_cg_write+0x353>
8010bf9f:	83 f8 03             	cmp    $0x3,%eax
8010bfa2:	0f 84 4c 04 00 00    	je     8010c3f4 <unsafe_cg_write+0x4a4>
8010bfa8:	83 f8 04             	cmp    $0x4,%eax
8010bfab:	0f 84 8c 04 00 00    	je     8010c43d <unsafe_cg_write+0x4ed>
8010bfb1:	83 f8 06             	cmp    $0x6,%eax
8010bfb4:	0f 84 a6 00 00 00    	je     8010c060 <unsafe_cg_write+0x110>
8010bfba:	83 f8 07             	cmp    $0x7,%eax
8010bfbd:	0f 84 fd 01 00 00    	je     8010c1c0 <unsafe_cg_write+0x270>
8010bfc3:	83 f8 08             	cmp    $0x8,%eax
8010bfc6:	0f 85 b4 00 00 00    	jne    8010c080 <unsafe_cg_write+0x130>
8010bfcc:	31 c0                	xor    %eax,%eax
8010bfce:	80 ba 11 03 00 00 00 	cmpb   $0x0,0x311(%edx)
8010bfd5:	0f 84 94 00 00 00    	je     8010c06f <unsafe_cg_write+0x11f>
8010bfdb:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010bfe2:	00 
8010bfe3:	83 c0 04             	add    $0x4,%eax
8010bfe6:	83 f8 20             	cmp    $0x20,%eax
8010bfe9:	72 f0                	jb     8010bfdb <unsafe_cg_write+0x8b>
8010bfeb:	0f b6 0e             	movzbl (%esi),%ecx
8010bfee:	31 d2                	xor    %edx,%edx
8010bff0:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010bff3:	80 f9 2c             	cmp    $0x2c,%cl
8010bff6:	74 20                	je     8010c018 <unsafe_cg_write+0xc8>
8010bff8:	84 c9                	test   %cl,%cl
8010bffa:	74 1c                	je     8010c018 <unsafe_cg_write+0xc8>
8010bffc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c000:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c003:	83 c2 01             	add    $0x1,%edx
8010c006:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
8010c00a:	84 c9                	test   %cl,%cl
8010c00c:	74 0a                	je     8010c018 <unsafe_cg_write+0xc8>
8010c00e:	80 f9 2c             	cmp    $0x2c,%cl
8010c011:	74 05                	je     8010c018 <unsafe_cg_write+0xc8>
8010c013:	83 fa 20             	cmp    $0x20,%edx
8010c016:	75 e8                	jne    8010c000 <unsafe_cg_write+0xb0>
8010c018:	83 ec 0c             	sub    $0xc,%esp
8010c01b:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c020:	50                   	push   %eax
8010c021:	e8 9a de ff ff       	call   80109ec0 <atoi>
8010c026:	83 c4 10             	add    $0x10,%esp
8010c029:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c02c:	89 c3                	mov    %eax,%ebx
8010c02e:	74 1e                	je     8010c04e <unsafe_cg_write+0xfe>
8010c030:	83 ec 08             	sub    $0x8,%esp
8010c033:	50                   	push   %eax
8010c034:	8b 45 08             	mov    0x8(%ebp),%eax
8010c037:	ff 70 10             	pushl  0x10(%eax)
8010c03a:	e8 41 19 00 00       	call   8010d980 <set_cpu_id>
8010c03f:	83 c0 01             	add    $0x1,%eax
8010c042:	83 c4 10             	add    $0x10,%esp
8010c045:	83 f8 01             	cmp    $0x1,%eax
8010c048:	0f 87 d4 00 00 00    	ja     8010c122 <unsafe_cg_write+0x1d2>
8010c04e:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c051:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c056:	5b                   	pop    %ebx
8010c057:	5e                   	pop    %esi
8010c058:	5f                   	pop    %edi
8010c059:	5d                   	pop    %ebp
8010c05a:	c3                   	ret    
8010c05b:	90                   	nop
8010c05c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c060:	31 c0                	xor    %eax,%eax
8010c062:	80 ba 0d 03 00 00 00 	cmpb   $0x0,0x30d(%edx)
8010c069:	0f 85 7e 04 00 00    	jne    8010c4ed <unsafe_cg_write+0x59d>
8010c06f:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c072:	5b                   	pop    %ebx
8010c073:	5e                   	pop    %esi
8010c074:	5f                   	pop    %edi
8010c075:	5d                   	pop    %ebp
8010c076:	c3                   	ret    
8010c077:	89 f6                	mov    %esi,%esi
8010c079:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010c080:	83 f8 09             	cmp    $0x9,%eax
8010c083:	0f 84 3f 05 00 00    	je     8010c5c8 <unsafe_cg_write+0x678>
8010c089:	83 f8 0a             	cmp    $0xa,%eax
8010c08c:	0f 84 a1 00 00 00    	je     8010c133 <unsafe_cg_write+0x1e3>
8010c092:	83 f8 0b             	cmp    $0xb,%eax
8010c095:	b8 00 00 00 00       	mov    $0x0,%eax
8010c09a:	75 d3                	jne    8010c06f <unsafe_cg_write+0x11f>
8010c09c:	80 ba 13 03 00 00 00 	cmpb   $0x0,0x313(%edx)
8010c0a3:	74 ca                	je     8010c06f <unsafe_cg_write+0x11f>
8010c0a5:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010c0ac:	00 
8010c0ad:	83 c0 04             	add    $0x4,%eax
8010c0b0:	83 f8 20             	cmp    $0x20,%eax
8010c0b3:	72 f0                	jb     8010c0a5 <unsafe_cg_write+0x155>
8010c0b5:	0f b6 0e             	movzbl (%esi),%ecx
8010c0b8:	31 d2                	xor    %edx,%edx
8010c0ba:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c0bd:	80 f9 2c             	cmp    $0x2c,%cl
8010c0c0:	74 26                	je     8010c0e8 <unsafe_cg_write+0x198>
8010c0c2:	84 c9                	test   %cl,%cl
8010c0c4:	74 22                	je     8010c0e8 <unsafe_cg_write+0x198>
8010c0c6:	8d 76 00             	lea    0x0(%esi),%esi
8010c0c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010c0d0:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c0d3:	83 c2 01             	add    $0x1,%edx
8010c0d6:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
8010c0da:	84 c9                	test   %cl,%cl
8010c0dc:	74 0a                	je     8010c0e8 <unsafe_cg_write+0x198>
8010c0de:	80 f9 2c             	cmp    $0x2c,%cl
8010c0e1:	74 05                	je     8010c0e8 <unsafe_cg_write+0x198>
8010c0e3:	83 fa 20             	cmp    $0x20,%edx
8010c0e6:	75 e8                	jne    8010c0d0 <unsafe_cg_write+0x180>
8010c0e8:	83 ec 0c             	sub    $0xc,%esp
8010c0eb:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c0f0:	50                   	push   %eax
8010c0f1:	e8 ca dd ff ff       	call   80109ec0 <atoi>
8010c0f6:	83 c4 10             	add    $0x10,%esp
8010c0f9:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c0fc:	89 c3                	mov    %eax,%ebx
8010c0fe:	0f 84 4a ff ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c104:	83 ec 08             	sub    $0x8,%esp
8010c107:	50                   	push   %eax
8010c108:	8b 45 08             	mov    0x8(%ebp),%eax
8010c10b:	ff 70 10             	pushl  0x10(%eax)
8010c10e:	e8 2d 1b 00 00       	call   8010dc40 <set_min_mem>
8010c113:	83 c0 01             	add    $0x1,%eax
8010c116:	83 c4 10             	add    $0x10,%esp
8010c119:	83 f8 01             	cmp    $0x1,%eax
8010c11c:	0f 86 2c ff ff ff    	jbe    8010c04e <unsafe_cg_write+0xfe>
8010c122:	8b 45 08             	mov    0x8(%ebp),%eax
8010c125:	89 58 58             	mov    %ebx,0x58(%eax)
8010c128:	8b 45 10             	mov    0x10(%ebp),%eax
8010c12b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c12e:	5b                   	pop    %ebx
8010c12f:	5e                   	pop    %esi
8010c130:	5f                   	pop    %edi
8010c131:	5d                   	pop    %ebp
8010c132:	c3                   	ret    
8010c133:	31 c0                	xor    %eax,%eax
8010c135:	80 ba 13 03 00 00 00 	cmpb   $0x0,0x313(%edx)
8010c13c:	0f 84 2d ff ff ff    	je     8010c06f <unsafe_cg_write+0x11f>
8010c142:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010c149:	00 
8010c14a:	83 c0 04             	add    $0x4,%eax
8010c14d:	83 f8 20             	cmp    $0x20,%eax
8010c150:	72 f0                	jb     8010c142 <unsafe_cg_write+0x1f2>
8010c152:	0f b6 0e             	movzbl (%esi),%ecx
8010c155:	31 d2                	xor    %edx,%edx
8010c157:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c15a:	80 f9 2c             	cmp    $0x2c,%cl
8010c15d:	74 21                	je     8010c180 <unsafe_cg_write+0x230>
8010c15f:	84 c9                	test   %cl,%cl
8010c161:	74 1d                	je     8010c180 <unsafe_cg_write+0x230>
8010c163:	90                   	nop
8010c164:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c168:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c16b:	83 c2 01             	add    $0x1,%edx
8010c16e:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
8010c172:	84 c9                	test   %cl,%cl
8010c174:	74 0a                	je     8010c180 <unsafe_cg_write+0x230>
8010c176:	80 f9 2c             	cmp    $0x2c,%cl
8010c179:	74 05                	je     8010c180 <unsafe_cg_write+0x230>
8010c17b:	83 fa 20             	cmp    $0x20,%edx
8010c17e:	75 e8                	jne    8010c168 <unsafe_cg_write+0x218>
8010c180:	83 ec 0c             	sub    $0xc,%esp
8010c183:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c188:	50                   	push   %eax
8010c189:	e8 32 dd ff ff       	call   80109ec0 <atoi>
8010c18e:	83 c4 10             	add    $0x10,%esp
8010c191:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c194:	89 c3                	mov    %eax,%ebx
8010c196:	0f 84 b2 fe ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c19c:	83 ec 08             	sub    $0x8,%esp
8010c19f:	50                   	push   %eax
8010c1a0:	8b 45 08             	mov    0x8(%ebp),%eax
8010c1a3:	ff 70 10             	pushl  0x10(%eax)
8010c1a6:	e8 85 19 00 00       	call   8010db30 <set_max_mem>
8010c1ab:	83 c0 01             	add    $0x1,%eax
8010c1ae:	83 c4 10             	add    $0x10,%esp
8010c1b1:	83 f8 01             	cmp    $0x1,%eax
8010c1b4:	0f 87 68 ff ff ff    	ja     8010c122 <unsafe_cg_write+0x1d2>
8010c1ba:	e9 8f fe ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c1bf:	90                   	nop
8010c1c0:	31 c0                	xor    %eax,%eax
8010c1c2:	80 ba 0f 03 00 00 00 	cmpb   $0x0,0x30f(%edx)
8010c1c9:	0f 84 a0 fe ff ff    	je     8010c06f <unsafe_cg_write+0x11f>
8010c1cf:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010c1d6:	00 
8010c1d7:	83 c0 04             	add    $0x4,%eax
8010c1da:	83 f8 20             	cmp    $0x20,%eax
8010c1dd:	72 f0                	jb     8010c1cf <unsafe_cg_write+0x27f>
8010c1df:	0f b6 0e             	movzbl (%esi),%ecx
8010c1e2:	31 d2                	xor    %edx,%edx
8010c1e4:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c1e7:	80 f9 2c             	cmp    $0x2c,%cl
8010c1ea:	74 1c                	je     8010c208 <unsafe_cg_write+0x2b8>
8010c1ec:	84 c9                	test   %cl,%cl
8010c1ee:	74 18                	je     8010c208 <unsafe_cg_write+0x2b8>
8010c1f0:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c1f3:	83 c2 01             	add    $0x1,%edx
8010c1f6:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
8010c1fa:	84 c9                	test   %cl,%cl
8010c1fc:	74 0a                	je     8010c208 <unsafe_cg_write+0x2b8>
8010c1fe:	80 f9 2c             	cmp    $0x2c,%cl
8010c201:	74 05                	je     8010c208 <unsafe_cg_write+0x2b8>
8010c203:	83 fa 20             	cmp    $0x20,%edx
8010c206:	75 e8                	jne    8010c1f0 <unsafe_cg_write+0x2a0>
8010c208:	83 ec 0c             	sub    $0xc,%esp
8010c20b:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c210:	50                   	push   %eax
8010c211:	e8 aa dc ff ff       	call   80109ec0 <atoi>
8010c216:	83 c4 10             	add    $0x10,%esp
8010c219:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c21c:	89 c3                	mov    %eax,%ebx
8010c21e:	0f 84 2a fe ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c224:	83 ec 08             	sub    $0x8,%esp
8010c227:	50                   	push   %eax
8010c228:	8b 45 08             	mov    0x8(%ebp),%eax
8010c22b:	ff 70 10             	pushl  0x10(%eax)
8010c22e:	e8 dd 15 00 00       	call   8010d810 <set_max_procs>
8010c233:	83 c0 01             	add    $0x1,%eax
8010c236:	83 c4 10             	add    $0x10,%esp
8010c239:	83 f8 01             	cmp    $0x1,%eax
8010c23c:	0f 87 e0 fe ff ff    	ja     8010c122 <unsafe_cg_write+0x1d2>
8010c242:	e9 07 fe ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c247:	89 f6                	mov    %esi,%esi
8010c249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010c250:	8b 45 10             	mov    0x10(%ebp),%eax
8010c253:	83 ec 04             	sub    $0x4,%esp
8010c256:	50                   	push   %eax
8010c257:	56                   	push   %esi
8010c258:	68 c0 05 12 80       	push   $0x801205c0
8010c25d:	c6 80 c0 05 12 80 00 	movb   $0x0,-0x7fedfa40(%eax)
8010c264:	e8 67 a3 ff ff       	call   801065d0 <strncpy>
8010c269:	c7 04 24 c0 05 12 80 	movl   $0x801205c0,(%esp)
8010c270:	e8 4b dc ff ff       	call   80109ec0 <atoi>
8010c275:	83 c4 10             	add    $0x10,%esp
8010c278:	85 c0                	test   %eax,%eax
8010c27a:	0f 8e ce fd ff ff    	jle    8010c04e <unsafe_cg_write+0xfe>
8010c280:	83 ec 08             	sub    $0x8,%esp
8010c283:	50                   	push   %eax
8010c284:	8b 45 08             	mov    0x8(%ebp),%eax
8010c287:	ff 70 10             	pushl  0x10(%eax)
8010c28a:	e8 16 9d ff ff       	call   80105fa5 <cgroup_move_proc>
8010c28f:	83 c4 10             	add    $0x10,%esp
8010c292:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c295:	0f 84 b3 fd ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c29b:	8b 45 10             	mov    0x10(%ebp),%eax
8010c29e:	e9 cc fd ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c2a3:	8b 45 10             	mov    0x10(%ebp),%eax
8010c2a6:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
8010c2ad:	c6 45 9f 00          	movb   $0x0,-0x61(%ebp)
8010c2b1:	c6 45 a4 00          	movb   $0x0,-0x5c(%ebp)
8010c2b5:	c6 45 a5 00          	movb   $0x0,-0x5b(%ebp)
8010c2b9:	c6 45 a7 00          	movb   $0x0,-0x59(%ebp)
8010c2bd:	85 c0                	test   %eax,%eax
8010c2bf:	0f 9f 45 a6          	setg   -0x5a(%ebp)
8010c2c3:	90                   	nop
8010c2c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c2c8:	0f b6 06             	movzbl (%esi),%eax
8010c2cb:	84 c0                	test   %al,%al
8010c2cd:	0f 84 bf 01 00 00    	je     8010c492 <unsafe_cg_write+0x542>
8010c2d3:	80 7d a6 00          	cmpb   $0x0,-0x5a(%ebp)
8010c2d7:	0f 84 b5 01 00 00    	je     8010c492 <unsafe_cg_write+0x542>
8010c2dd:	83 e8 2b             	sub    $0x2b,%eax
8010c2e0:	a8 fd                	test   $0xfd,%al
8010c2e2:	0f 85 66 fd ff ff    	jne    8010c04e <unsafe_cg_write+0xfe>
8010c2e8:	83 ec 04             	sub    $0x4,%esp
8010c2eb:	6a 10                	push   $0x10
8010c2ed:	6a 00                	push   $0x0
8010c2ef:	68 c0 05 12 80       	push   $0x801205c0
8010c2f4:	e8 e7 a0 ff ff       	call   801063e0 <memset>
8010c2f9:	0f b6 56 01          	movzbl 0x1(%esi),%edx
8010c2fd:	83 c4 10             	add    $0x10,%esp
8010c300:	8d 46 01             	lea    0x1(%esi),%eax
8010c303:	f6 c2 df             	test   $0xdf,%dl
8010c306:	0f 84 7a 01 00 00    	je     8010c486 <unsafe_cg_write+0x536>
8010c30c:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
8010c310:	0f 84 70 01 00 00    	je     8010c486 <unsafe_cg_write+0x536>
8010c316:	8b 7d 10             	mov    0x10(%ebp),%edi
8010c319:	31 db                	xor    %ebx,%ebx
8010c31b:	b9 c0 05 12 80       	mov    $0x801205c0,%ecx
8010c320:	01 f7                	add    %esi,%edi
8010c322:	eb 08                	jmp    8010c32c <unsafe_cg_write+0x3dc>
8010c324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c328:	39 f8                	cmp    %edi,%eax
8010c32a:	74 14                	je     8010c340 <unsafe_cg_write+0x3f0>
8010c32c:	83 c1 01             	add    $0x1,%ecx
8010c32f:	83 c0 01             	add    $0x1,%eax
8010c332:	88 51 ff             	mov    %dl,-0x1(%ecx)
8010c335:	0f b6 10             	movzbl (%eax),%edx
8010c338:	83 c3 01             	add    $0x1,%ebx
8010c33b:	f6 c2 df             	test   $0xdf,%dl
8010c33e:	75 e8                	jne    8010c328 <unsafe_cg_write+0x3d8>
8010c340:	c6 01 00             	movb   $0x0,(%ecx)
8010c343:	80 38 20             	cmpb   $0x20,(%eax)
8010c346:	0f 94 c0             	sete   %al
8010c349:	83 ec 08             	sub    $0x8,%esp
8010c34c:	68 8c f6 10 80       	push   $0x8010f68c
8010c351:	68 c0 05 12 80       	push   $0x801205c0
8010c356:	0f b6 c0             	movzbl %al,%eax
8010c359:	01 c3                	add    %eax,%ebx
8010c35b:	e8 20 a2 ff ff       	call   80106580 <strcmp>
8010c360:	83 c4 10             	add    $0x10,%esp
8010c363:	85 c0                	test   %eax,%eax
8010c365:	75 29                	jne    8010c390 <unsafe_cg_write+0x440>
8010c367:	0f b6 06             	movzbl (%esi),%eax
8010c36a:	c6 45 a7 01          	movb   $0x1,-0x59(%ebp)
8010c36e:	3c 2b                	cmp    $0x2b,%al
8010c370:	74 0a                	je     8010c37c <unsafe_cg_write+0x42c>
8010c372:	3c 2d                	cmp    $0x2d,%al
8010c374:	0f 94 c0             	sete   %al
8010c377:	01 c0                	add    %eax,%eax
8010c379:	88 45 a7             	mov    %al,-0x59(%ebp)
8010c37c:	83 c3 01             	add    $0x1,%ebx
8010c37f:	01 5d a0             	add    %ebx,-0x60(%ebp)
8010c382:	01 de                	add    %ebx,%esi
8010c384:	e9 3f ff ff ff       	jmp    8010c2c8 <unsafe_cg_write+0x378>
8010c389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c390:	83 ec 08             	sub    $0x8,%esp
8010c393:	68 90 f6 10 80       	push   $0x8010f690
8010c398:	68 c0 05 12 80       	push   $0x801205c0
8010c39d:	e8 de a1 ff ff       	call   80106580 <strcmp>
8010c3a2:	83 c4 10             	add    $0x10,%esp
8010c3a5:	85 c0                	test   %eax,%eax
8010c3a7:	75 17                	jne    8010c3c0 <unsafe_cg_write+0x470>
8010c3a9:	0f b6 06             	movzbl (%esi),%eax
8010c3ac:	c6 45 a5 01          	movb   $0x1,-0x5b(%ebp)
8010c3b0:	3c 2b                	cmp    $0x2b,%al
8010c3b2:	74 c8                	je     8010c37c <unsafe_cg_write+0x42c>
8010c3b4:	3c 2d                	cmp    $0x2d,%al
8010c3b6:	0f 94 c0             	sete   %al
8010c3b9:	01 c0                	add    %eax,%eax
8010c3bb:	88 45 a5             	mov    %al,-0x5b(%ebp)
8010c3be:	eb bc                	jmp    8010c37c <unsafe_cg_write+0x42c>
8010c3c0:	83 ec 08             	sub    $0x8,%esp
8010c3c3:	68 94 f6 10 80       	push   $0x8010f694
8010c3c8:	68 c0 05 12 80       	push   $0x801205c0
8010c3cd:	e8 ae a1 ff ff       	call   80106580 <strcmp>
8010c3d2:	83 c4 10             	add    $0x10,%esp
8010c3d5:	85 c0                	test   %eax,%eax
8010c3d7:	0f 85 73 02 00 00    	jne    8010c650 <unsafe_cg_write+0x700>
8010c3dd:	0f b6 06             	movzbl (%esi),%eax
8010c3e0:	c6 45 a4 01          	movb   $0x1,-0x5c(%ebp)
8010c3e4:	3c 2b                	cmp    $0x2b,%al
8010c3e6:	74 94                	je     8010c37c <unsafe_cg_write+0x42c>
8010c3e8:	3c 2d                	cmp    $0x2d,%al
8010c3ea:	0f 94 c0             	sete   %al
8010c3ed:	01 c0                	add    %eax,%eax
8010c3ef:	88 45 a4             	mov    %al,-0x5c(%ebp)
8010c3f2:	eb 88                	jmp    8010c37c <unsafe_cg_write+0x42c>
8010c3f4:	83 ec 0c             	sub    $0xc,%esp
8010c3f7:	56                   	push   %esi
8010c3f8:	e8 c3 da ff ff       	call   80109ec0 <atoi>
8010c3fd:	83 c4 10             	add    $0x10,%esp
8010c400:	85 c0                	test   %eax,%eax
8010c402:	0f 88 46 fc ff ff    	js     8010c04e <unsafe_cg_write+0xfe>
8010c408:	83 ec 0c             	sub    $0xc,%esp
8010c40b:	56                   	push   %esi
8010c40c:	e8 5f a2 ff ff       	call   80106670 <strlen>
8010c411:	83 c4 10             	add    $0x10,%esp
8010c414:	83 f8 02             	cmp    $0x2,%eax
8010c417:	0f 8f 31 fc ff ff    	jg     8010c04e <unsafe_cg_write+0xfe>
8010c41d:	8b 45 08             	mov    0x8(%ebp),%eax
8010c420:	83 ec 0c             	sub    $0xc,%esp
8010c423:	8b 58 10             	mov    0x10(%eax),%ebx
8010c426:	56                   	push   %esi
8010c427:	e8 94 da ff ff       	call   80109ec0 <atoi>
8010c42c:	83 c4 10             	add    $0x10,%esp
8010c42f:	89 83 18 03 00 00    	mov    %eax,0x318(%ebx)
8010c435:	8b 45 10             	mov    0x10(%ebp),%eax
8010c438:	e9 32 fc ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c43d:	83 ec 0c             	sub    $0xc,%esp
8010c440:	56                   	push   %esi
8010c441:	e8 7a da ff ff       	call   80109ec0 <atoi>
8010c446:	83 c4 10             	add    $0x10,%esp
8010c449:	85 c0                	test   %eax,%eax
8010c44b:	0f 88 fd fb ff ff    	js     8010c04e <unsafe_cg_write+0xfe>
8010c451:	83 ec 0c             	sub    $0xc,%esp
8010c454:	56                   	push   %esi
8010c455:	e8 16 a2 ff ff       	call   80106670 <strlen>
8010c45a:	83 c4 10             	add    $0x10,%esp
8010c45d:	83 f8 02             	cmp    $0x2,%eax
8010c460:	0f 8f e8 fb ff ff    	jg     8010c04e <unsafe_cg_write+0xfe>
8010c466:	8b 45 08             	mov    0x8(%ebp),%eax
8010c469:	83 ec 0c             	sub    $0xc,%esp
8010c46c:	8b 58 10             	mov    0x10(%eax),%ebx
8010c46f:	56                   	push   %esi
8010c470:	e8 4b da ff ff       	call   80109ec0 <atoi>
8010c475:	83 c4 10             	add    $0x10,%esp
8010c478:	89 83 1c 03 00 00    	mov    %eax,0x31c(%ebx)
8010c47e:	8b 45 10             	mov    0x10(%ebp),%eax
8010c481:	e9 e9 fb ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c486:	31 db                	xor    %ebx,%ebx
8010c488:	b9 c0 05 12 80       	mov    $0x801205c0,%ecx
8010c48d:	e9 ae fe ff ff       	jmp    8010c340 <unsafe_cg_write+0x3f0>
8010c492:	80 7d a7 01          	cmpb   $0x1,-0x59(%ebp)
8010c496:	0f 84 08 01 00 00    	je     8010c5a4 <unsafe_cg_write+0x654>
8010c49c:	80 7d a7 02          	cmpb   $0x2,-0x59(%ebp)
8010c4a0:	0f 84 da 02 00 00    	je     8010c780 <unsafe_cg_write+0x830>
8010c4a6:	80 7d a5 01          	cmpb   $0x1,-0x5b(%ebp)
8010c4aa:	0f 84 b0 02 00 00    	je     8010c760 <unsafe_cg_write+0x810>
8010c4b0:	80 7d a5 02          	cmpb   $0x2,-0x5b(%ebp)
8010c4b4:	0f 84 86 02 00 00    	je     8010c740 <unsafe_cg_write+0x7f0>
8010c4ba:	80 7d a4 01          	cmpb   $0x1,-0x5c(%ebp)
8010c4be:	0f 84 5c 02 00 00    	je     8010c720 <unsafe_cg_write+0x7d0>
8010c4c4:	80 7d a4 02          	cmpb   $0x2,-0x5c(%ebp)
8010c4c8:	0f 84 32 02 00 00    	je     8010c700 <unsafe_cg_write+0x7b0>
8010c4ce:	80 7d 9f 01          	cmpb   $0x1,-0x61(%ebp)
8010c4d2:	0f 84 00 02 00 00    	je     8010c6d8 <unsafe_cg_write+0x788>
8010c4d8:	80 7d 9f 02          	cmpb   $0x2,-0x61(%ebp)
8010c4dc:	0f 84 d5 01 00 00    	je     8010c6b7 <unsafe_cg_write+0x767>
8010c4e2:	8b 45 10             	mov    0x10(%ebp),%eax
8010c4e5:	2b 45 a0             	sub    -0x60(%ebp),%eax
8010c4e8:	e9 82 fb ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c4ed:	c7 44 05 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,1)
8010c4f4:	00 
8010c4f5:	83 c0 04             	add    $0x4,%eax
8010c4f8:	83 f8 20             	cmp    $0x20,%eax
8010c4fb:	72 f0                	jb     8010c4ed <unsafe_cg_write+0x59d>
8010c4fd:	31 c0                	xor    %eax,%eax
8010c4ff:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010c506:	00 
8010c507:	83 c0 04             	add    $0x4,%eax
8010c50a:	83 f8 20             	cmp    $0x20,%eax
8010c50d:	72 f0                	jb     8010c4ff <unsafe_cg_write+0x5af>
8010c50f:	0f b6 16             	movzbl (%esi),%edx
8010c512:	31 c0                	xor    %eax,%eax
8010c514:	8d 5d a8             	lea    -0x58(%ebp),%ebx
8010c517:	80 fa 2c             	cmp    $0x2c,%dl
8010c51a:	74 1e                	je     8010c53a <unsafe_cg_write+0x5ea>
8010c51c:	84 d2                	test   %dl,%dl
8010c51e:	74 1a                	je     8010c53a <unsafe_cg_write+0x5ea>
8010c520:	83 c6 01             	add    $0x1,%esi
8010c523:	88 14 03             	mov    %dl,(%ebx,%eax,1)
8010c526:	83 c0 01             	add    $0x1,%eax
8010c529:	0f b6 16             	movzbl (%esi),%edx
8010c52c:	84 d2                	test   %dl,%dl
8010c52e:	74 0a                	je     8010c53a <unsafe_cg_write+0x5ea>
8010c530:	80 fa 2c             	cmp    $0x2c,%dl
8010c533:	74 05                	je     8010c53a <unsafe_cg_write+0x5ea>
8010c535:	83 f8 20             	cmp    $0x20,%eax
8010c538:	75 e6                	jne    8010c520 <unsafe_cg_write+0x5d0>
8010c53a:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
8010c53e:	31 d2                	xor    %edx,%edx
8010c540:	c6 44 05 a8 00       	movb   $0x0,-0x58(%ebp,%eax,1)
8010c545:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c548:	84 c9                	test   %cl,%cl
8010c54a:	75 09                	jne    8010c555 <unsafe_cg_write+0x605>
8010c54c:	eb 16                	jmp    8010c564 <unsafe_cg_write+0x614>
8010c54e:	66 90                	xchg   %ax,%ax
8010c550:	83 fa 20             	cmp    $0x20,%edx
8010c553:	74 0f                	je     8010c564 <unsafe_cg_write+0x614>
8010c555:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c558:	83 c2 01             	add    $0x1,%edx
8010c55b:	0f b6 4c 16 01       	movzbl 0x1(%esi,%edx,1),%ecx
8010c560:	84 c9                	test   %cl,%cl
8010c562:	75 ec                	jne    8010c550 <unsafe_cg_write+0x600>
8010c564:	83 ec 0c             	sub    $0xc,%esp
8010c567:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c56c:	53                   	push   %ebx
8010c56d:	e8 4e d9 ff ff       	call   80109ec0 <atoi>
8010c572:	83 c4 10             	add    $0x10,%esp
8010c575:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c578:	89 c3                	mov    %eax,%ebx
8010c57a:	0f 84 ce fa ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c580:	80 7d c8 00          	cmpb   $0x0,-0x38(%ebp)
8010c584:	0f 85 01 01 00 00    	jne    8010c68b <unsafe_cg_write+0x73b>
8010c58a:	8b 45 08             	mov    0x8(%ebp),%eax
8010c58d:	8b 40 10             	mov    0x10(%eax),%eax
8010c590:	89 98 70 03 00 00    	mov    %ebx,0x370(%eax)
8010c596:	8b 45 08             	mov    0x8(%ebp),%eax
8010c599:	89 58 54             	mov    %ebx,0x54(%eax)
8010c59c:	8b 45 10             	mov    0x10(%ebp),%eax
8010c59f:	e9 cb fa ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c5a4:	8b 45 08             	mov    0x8(%ebp),%eax
8010c5a7:	83 ec 0c             	sub    $0xc,%esp
8010c5aa:	ff 70 10             	pushl  0x10(%eax)
8010c5ad:	e8 de 0c 00 00       	call   8010d290 <unsafe_enable_cpu_controller>
8010c5b2:	83 c4 10             	add    $0x10,%esp
8010c5b5:	85 c0                	test   %eax,%eax
8010c5b7:	0f 89 e9 fe ff ff    	jns    8010c4a6 <unsafe_cg_write+0x556>
8010c5bd:	e9 8c fa ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010c5c8:	31 c0                	xor    %eax,%eax
8010c5ca:	c7 44 05 c8 00 00 00 	movl   $0x0,-0x38(%ebp,%eax,1)
8010c5d1:	00 
8010c5d2:	83 c0 04             	add    $0x4,%eax
8010c5d5:	83 f8 20             	cmp    $0x20,%eax
8010c5d8:	72 f0                	jb     8010c5ca <unsafe_cg_write+0x67a>
8010c5da:	0f b6 0e             	movzbl (%esi),%ecx
8010c5dd:	31 d2                	xor    %edx,%edx
8010c5df:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c5e2:	80 f9 2c             	cmp    $0x2c,%cl
8010c5e5:	74 21                	je     8010c608 <unsafe_cg_write+0x6b8>
8010c5e7:	84 c9                	test   %cl,%cl
8010c5e9:	74 1d                	je     8010c608 <unsafe_cg_write+0x6b8>
8010c5eb:	90                   	nop
8010c5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010c5f0:	88 0c 10             	mov    %cl,(%eax,%edx,1)
8010c5f3:	83 c2 01             	add    $0x1,%edx
8010c5f6:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
8010c5fa:	84 c9                	test   %cl,%cl
8010c5fc:	74 0a                	je     8010c608 <unsafe_cg_write+0x6b8>
8010c5fe:	80 f9 2c             	cmp    $0x2c,%cl
8010c601:	74 05                	je     8010c608 <unsafe_cg_write+0x6b8>
8010c603:	83 fa 20             	cmp    $0x20,%edx
8010c606:	75 e8                	jne    8010c5f0 <unsafe_cg_write+0x6a0>
8010c608:	83 ec 0c             	sub    $0xc,%esp
8010c60b:	c6 44 15 c8 00       	movb   $0x0,-0x38(%ebp,%edx,1)
8010c610:	50                   	push   %eax
8010c611:	e8 aa d8 ff ff       	call   80109ec0 <atoi>
8010c616:	83 c4 10             	add    $0x10,%esp
8010c619:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c61c:	89 c3                	mov    %eax,%ebx
8010c61e:	0f 84 2a fa ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c624:	83 ec 08             	sub    $0x8,%esp
8010c627:	50                   	push   %eax
8010c628:	8b 45 08             	mov    0x8(%ebp),%eax
8010c62b:	ff 70 10             	pushl  0x10(%eax)
8010c62e:	e8 bd 14 00 00       	call   8010daf0 <frz_grp>
8010c633:	83 c0 01             	add    $0x1,%eax
8010c636:	83 c4 10             	add    $0x10,%esp
8010c639:	83 f8 01             	cmp    $0x1,%eax
8010c63c:	0f 86 0c fa ff ff    	jbe    8010c04e <unsafe_cg_write+0xfe>
8010c642:	8b 45 08             	mov    0x8(%ebp),%eax
8010c645:	89 58 54             	mov    %ebx,0x54(%eax)
8010c648:	8b 45 10             	mov    0x10(%ebp),%eax
8010c64b:	e9 1f fa ff ff       	jmp    8010c06f <unsafe_cg_write+0x11f>
8010c650:	83 ec 08             	sub    $0x8,%esp
8010c653:	68 15 ea 10 80       	push   $0x8010ea15
8010c658:	68 c0 05 12 80       	push   $0x801205c0
8010c65d:	e8 1e 9f ff ff       	call   80106580 <strcmp>
8010c662:	83 c4 10             	add    $0x10,%esp
8010c665:	85 c0                	test   %eax,%eax
8010c667:	0f 85 e1 f9 ff ff    	jne    8010c04e <unsafe_cg_write+0xfe>
8010c66d:	0f b6 06             	movzbl (%esi),%eax
8010c670:	c6 45 9f 01          	movb   $0x1,-0x61(%ebp)
8010c674:	3c 2b                	cmp    $0x2b,%al
8010c676:	0f 84 00 fd ff ff    	je     8010c37c <unsafe_cg_write+0x42c>
8010c67c:	3c 2d                	cmp    $0x2d,%al
8010c67e:	0f 94 c0             	sete   %al
8010c681:	01 c0                	add    %eax,%eax
8010c683:	88 45 9f             	mov    %al,-0x61(%ebp)
8010c686:	e9 f1 fc ff ff       	jmp    8010c37c <unsafe_cg_write+0x42c>
8010c68b:	8d 45 c8             	lea    -0x38(%ebp),%eax
8010c68e:	83 ec 0c             	sub    $0xc,%esp
8010c691:	50                   	push   %eax
8010c692:	e8 29 d8 ff ff       	call   80109ec0 <atoi>
8010c697:	83 c4 10             	add    $0x10,%esp
8010c69a:	83 f8 ff             	cmp    $0xffffffff,%eax
8010c69d:	0f 84 ab f9 ff ff    	je     8010c04e <unsafe_cg_write+0xfe>
8010c6a3:	8b 75 08             	mov    0x8(%ebp),%esi
8010c6a6:	8b 56 10             	mov    0x10(%esi),%edx
8010c6a9:	89 82 6c 03 00 00    	mov    %eax,0x36c(%edx)
8010c6af:	89 46 58             	mov    %eax,0x58(%esi)
8010c6b2:	e9 d3 fe ff ff       	jmp    8010c58a <unsafe_cg_write+0x63a>
8010c6b7:	8b 45 08             	mov    0x8(%ebp),%eax
8010c6ba:	83 ec 0c             	sub    $0xc,%esp
8010c6bd:	ff 70 10             	pushl  0x10(%eax)
8010c6c0:	e8 4b 1b 00 00       	call   8010e210 <unsafe_disable_mem_controller>
8010c6c5:	83 c4 10             	add    $0x10,%esp
8010c6c8:	85 c0                	test   %eax,%eax
8010c6ca:	0f 89 12 fe ff ff    	jns    8010c4e2 <unsafe_cg_write+0x592>
8010c6d0:	e9 79 f9 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c6d5:	8d 76 00             	lea    0x0(%esi),%esi
8010c6d8:	8b 45 08             	mov    0x8(%ebp),%eax
8010c6db:	83 ec 0c             	sub    $0xc,%esp
8010c6de:	ff 70 10             	pushl  0x10(%eax)
8010c6e1:	e8 9a 1a 00 00       	call   8010e180 <unsafe_enable_mem_controller>
8010c6e6:	83 c4 10             	add    $0x10,%esp
8010c6e9:	85 c0                	test   %eax,%eax
8010c6eb:	0f 89 f1 fd ff ff    	jns    8010c4e2 <unsafe_cg_write+0x592>
8010c6f1:	e9 58 f9 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c6f6:	8d 76 00             	lea    0x0(%esi),%esi
8010c6f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010c700:	8b 45 08             	mov    0x8(%ebp),%eax
8010c703:	83 ec 0c             	sub    $0xc,%esp
8010c706:	ff 70 10             	pushl  0x10(%eax)
8010c709:	e8 12 13 00 00       	call   8010da20 <unsafe_disable_set_controller>
8010c70e:	83 c4 10             	add    $0x10,%esp
8010c711:	85 c0                	test   %eax,%eax
8010c713:	0f 89 b5 fd ff ff    	jns    8010c4ce <unsafe_cg_write+0x57e>
8010c719:	e9 30 f9 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c71e:	66 90                	xchg   %ax,%ax
8010c720:	8b 45 08             	mov    0x8(%ebp),%eax
8010c723:	83 ec 0c             	sub    $0xc,%esp
8010c726:	ff 70 10             	pushl  0x10(%eax)
8010c729:	e8 82 12 00 00       	call   8010d9b0 <unsafe_enable_set_controller>
8010c72e:	83 c4 10             	add    $0x10,%esp
8010c731:	85 c0                	test   %eax,%eax
8010c733:	0f 89 95 fd ff ff    	jns    8010c4ce <unsafe_cg_write+0x57e>
8010c739:	e9 10 f9 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c73e:	66 90                	xchg   %ax,%ax
8010c740:	8b 45 08             	mov    0x8(%ebp),%eax
8010c743:	83 ec 0c             	sub    $0xc,%esp
8010c746:	ff 70 10             	pushl  0x10(%eax)
8010c749:	e8 62 11 00 00       	call   8010d8b0 <unsafe_disable_pid_controller>
8010c74e:	83 c4 10             	add    $0x10,%esp
8010c751:	85 c0                	test   %eax,%eax
8010c753:	0f 89 61 fd ff ff    	jns    8010c4ba <unsafe_cg_write+0x56a>
8010c759:	e9 f0 f8 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c75e:	66 90                	xchg   %ax,%ax
8010c760:	8b 45 08             	mov    0x8(%ebp),%eax
8010c763:	83 ec 0c             	sub    $0xc,%esp
8010c766:	ff 70 10             	pushl  0x10(%eax)
8010c769:	e8 d2 10 00 00       	call   8010d840 <unsafe_enable_pid_controller>
8010c76e:	83 c4 10             	add    $0x10,%esp
8010c771:	85 c0                	test   %eax,%eax
8010c773:	0f 89 41 fd ff ff    	jns    8010c4ba <unsafe_cg_write+0x56a>
8010c779:	e9 d0 f8 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c77e:	66 90                	xchg   %ax,%ax
8010c780:	8b 45 08             	mov    0x8(%ebp),%eax
8010c783:	83 ec 0c             	sub    $0xc,%esp
8010c786:	ff 70 10             	pushl  0x10(%eax)
8010c789:	e8 a2 0b 00 00       	call   8010d330 <unsafe_disable_cpu_controller>
8010c78e:	83 c4 10             	add    $0x10,%esp
8010c791:	85 c0                	test   %eax,%eax
8010c793:	0f 89 0d fd ff ff    	jns    8010c4a6 <unsafe_cg_write+0x556>
8010c799:	e9 b0 f8 ff ff       	jmp    8010c04e <unsafe_cg_write+0xfe>
8010c79e:	66 90                	xchg   %ax,%ax

8010c7a0 <unsafe_cg_close>:
8010c7a0:	55                   	push   %ebp
8010c7a1:	89 e5                	mov    %esp,%ebp
8010c7a3:	53                   	push   %ebx
8010c7a4:	83 ec 10             	sub    $0x10,%esp
8010c7a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010c7aa:	53                   	push   %ebx
8010c7ab:	e8 70 4e ff ff       	call   80101620 <fileclose>
8010c7b0:	8b 43 10             	mov    0x10(%ebx),%eax
8010c7b3:	83 c4 10             	add    $0x10,%esp
8010c7b6:	83 a8 00 02 00 00 01 	subl   $0x1,0x200(%eax)
8010c7bd:	8b 43 10             	mov    0x10(%ebx),%eax
8010c7c0:	8b 90 00 02 00 00    	mov    0x200(%eax),%edx
8010c7c6:	85 d2                	test   %edx,%edx
8010c7c8:	75 05                	jne    8010c7cf <unsafe_cg_close+0x2f>
8010c7ca:	80 38 00             	cmpb   $0x0,(%eax)
8010c7cd:	74 11                	je     8010c7e0 <unsafe_cg_close+0x40>
8010c7cf:	31 c0                	xor    %eax,%eax
8010c7d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010c7d4:	c9                   	leave  
8010c7d5:	c3                   	ret    
8010c7d6:	8d 76 00             	lea    0x0(%esi),%esi
8010c7d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010c7e0:	83 ec 0c             	sub    $0xc,%esp
8010c7e3:	ff b0 08 03 00 00    	pushl  0x308(%eax)
8010c7e9:	e8 22 0e 00 00       	call   8010d610 <decrement_nr_dying_descendants>
8010c7ee:	83 c4 10             	add    $0x10,%esp
8010c7f1:	31 c0                	xor    %eax,%eax
8010c7f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010c7f6:	c9                   	leave  
8010c7f7:	c3                   	ret    
8010c7f8:	90                   	nop
8010c7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010c800 <get_base_name>:
8010c800:	55                   	push   %ebp
8010c801:	31 c0                	xor    %eax,%eax
8010c803:	b9 80 00 00 00       	mov    $0x80,%ecx
8010c808:	89 e5                	mov    %esp,%ebp
8010c80a:	57                   	push   %edi
8010c80b:	56                   	push   %esi
8010c80c:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
8010c812:	53                   	push   %ebx
8010c813:	81 ec 14 02 00 00    	sub    $0x214,%esp
8010c819:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010c81c:	f3 ab                	rep stos %eax,%es:(%edi)
8010c81e:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
8010c824:	ff 75 08             	pushl  0x8(%ebp)
8010c827:	57                   	push   %edi
8010c828:	e8 93 04 00 00       	call   8010ccc0 <format_path>
8010c82d:	0f b6 95 e8 fd ff ff 	movzbl -0x218(%ebp),%edx
8010c834:	83 c4 10             	add    $0x10,%esp
8010c837:	84 d2                	test   %dl,%dl
8010c839:	74 52                	je     8010c88d <get_base_name+0x8d>
8010c83b:	89 f8                	mov    %edi,%eax
8010c83d:	89 f9                	mov    %edi,%ecx
8010c83f:	eb 09                	jmp    8010c84a <get_base_name+0x4a>
8010c841:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010c848:	89 f0                	mov    %esi,%eax
8010c84a:	80 fa 2f             	cmp    $0x2f,%dl
8010c84d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
8010c851:	8d 70 01             	lea    0x1(%eax),%esi
8010c854:	0f 44 c8             	cmove  %eax,%ecx
8010c857:	84 d2                	test   %dl,%dl
8010c859:	75 ed                	jne    8010c848 <get_base_name+0x48>
8010c85b:	39 f9                	cmp    %edi,%ecx
8010c85d:	74 2e                	je     8010c88d <get_base_name+0x8d>
8010c85f:	39 c1                	cmp    %eax,%ecx
8010c861:	74 2a                	je     8010c88d <get_base_name+0x8d>
8010c863:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
8010c867:	8d 51 01             	lea    0x1(%ecx),%edx
8010c86a:	84 c0                	test   %al,%al
8010c86c:	74 12                	je     8010c880 <get_base_name+0x80>
8010c86e:	66 90                	xchg   %ax,%ax
8010c870:	83 c3 01             	add    $0x1,%ebx
8010c873:	83 c2 01             	add    $0x1,%edx
8010c876:	88 43 ff             	mov    %al,-0x1(%ebx)
8010c879:	0f b6 02             	movzbl (%edx),%eax
8010c87c:	84 c0                	test   %al,%al
8010c87e:	75 f0                	jne    8010c870 <get_base_name+0x70>
8010c880:	c6 03 00             	movb   $0x0,(%ebx)
8010c883:	31 c0                	xor    %eax,%eax
8010c885:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c888:	5b                   	pop    %ebx
8010c889:	5e                   	pop    %esi
8010c88a:	5f                   	pop    %edi
8010c88b:	5d                   	pop    %ebp
8010c88c:	c3                   	ret    
8010c88d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c892:	eb f1                	jmp    8010c885 <get_base_name+0x85>
8010c894:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010c89a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

8010c8a0 <get_dir_name>:
8010c8a0:	55                   	push   %ebp
8010c8a1:	31 c0                	xor    %eax,%eax
8010c8a3:	b9 80 00 00 00       	mov    $0x80,%ecx
8010c8a8:	89 e5                	mov    %esp,%ebp
8010c8aa:	57                   	push   %edi
8010c8ab:	56                   	push   %esi
8010c8ac:	53                   	push   %ebx
8010c8ad:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
8010c8b3:	8d 9d e8 fd ff ff    	lea    -0x218(%ebp),%ebx
8010c8b9:	81 ec 14 02 00 00    	sub    $0x214,%esp
8010c8bf:	f3 ab                	rep stos %eax,%es:(%edi)
8010c8c1:	ff 75 08             	pushl  0x8(%ebp)
8010c8c4:	53                   	push   %ebx
8010c8c5:	e8 f6 03 00 00       	call   8010ccc0 <format_path>
8010c8ca:	0f b6 b5 e8 fd ff ff 	movzbl -0x218(%ebp),%esi
8010c8d1:	83 c4 10             	add    $0x10,%esp
8010c8d4:	89 f0                	mov    %esi,%eax
8010c8d6:	84 c0                	test   %al,%al
8010c8d8:	74 68                	je     8010c942 <get_dir_name+0xa2>
8010c8da:	89 f1                	mov    %esi,%ecx
8010c8dc:	89 d8                	mov    %ebx,%eax
8010c8de:	89 da                	mov    %ebx,%edx
8010c8e0:	eb 08                	jmp    8010c8ea <get_dir_name+0x4a>
8010c8e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010c8e8:	89 f8                	mov    %edi,%eax
8010c8ea:	80 f9 2f             	cmp    $0x2f,%cl
8010c8ed:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
8010c8f1:	8d 78 01             	lea    0x1(%eax),%edi
8010c8f4:	0f 44 d0             	cmove  %eax,%edx
8010c8f7:	84 c9                	test   %cl,%cl
8010c8f9:	75 ed                	jne    8010c8e8 <get_dir_name+0x48>
8010c8fb:	39 da                	cmp    %ebx,%edx
8010c8fd:	74 43                	je     8010c942 <get_dir_name+0xa2>
8010c8ff:	39 c2                	cmp    %eax,%edx
8010c901:	74 3f                	je     8010c942 <get_dir_name+0xa2>
8010c903:	39 da                	cmp    %ebx,%edx
8010c905:	76 2b                	jbe    8010c932 <get_dir_name+0x92>
8010c907:	8b 45 0c             	mov    0xc(%ebp),%eax
8010c90a:	89 f1                	mov    %esi,%ecx
8010c90c:	eb 05                	jmp    8010c913 <get_dir_name+0x73>
8010c90e:	66 90                	xchg   %ax,%ax
8010c910:	0f b6 0b             	movzbl (%ebx),%ecx
8010c913:	83 c3 01             	add    $0x1,%ebx
8010c916:	83 c0 01             	add    $0x1,%eax
8010c919:	88 48 ff             	mov    %cl,-0x1(%eax)
8010c91c:	39 da                	cmp    %ebx,%edx
8010c91e:	75 f0                	jne    8010c910 <get_dir_name+0x70>
8010c920:	8d 45 e8             	lea    -0x18(%ebp),%eax
8010c923:	29 c2                	sub    %eax,%edx
8010c925:	8b 45 0c             	mov    0xc(%ebp),%eax
8010c928:	8d 84 10 00 02 00 00 	lea    0x200(%eax,%edx,1),%eax
8010c92f:	89 45 0c             	mov    %eax,0xc(%ebp)
8010c932:	8b 45 0c             	mov    0xc(%ebp),%eax
8010c935:	c6 00 00             	movb   $0x0,(%eax)
8010c938:	31 c0                	xor    %eax,%eax
8010c93a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c93d:	5b                   	pop    %ebx
8010c93e:	5e                   	pop    %esi
8010c93f:	5f                   	pop    %edi
8010c940:	5d                   	pop    %ebp
8010c941:	c3                   	ret    
8010c942:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010c947:	eb f1                	jmp    8010c93a <get_dir_name+0x9a>
8010c949:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010c950 <unsafe_cg_stat>:
8010c950:	55                   	push   %ebp
8010c951:	89 e5                	mov    %esp,%ebp
8010c953:	57                   	push   %edi
8010c954:	56                   	push   %esi
8010c955:	53                   	push   %ebx
8010c956:	83 ec 0c             	sub    $0xc,%esp
8010c959:	8b 45 08             	mov    0x8(%ebp),%eax
8010c95c:	8b 40 10             	mov    0x10(%eax),%eax
8010c95f:	80 38 00             	cmpb   $0x0,(%eax)
8010c962:	0f 84 75 01 00 00    	je     8010cadd <unsafe_cg_stat+0x18d>
8010c968:	8b 45 08             	mov    0x8(%ebp),%eax
8010c96b:	80 78 14 00          	cmpb   $0x0,0x14(%eax)
8010c96f:	8b 45 0c             	mov    0xc(%ebp),%eax
8010c972:	74 76                	je     8010c9ea <unsafe_cg_stat+0x9a>
8010c974:	ba 04 00 00 00       	mov    $0x4,%edx
8010c979:	66 89 10             	mov    %dx,(%eax)
8010c97c:	8b 45 08             	mov    0x8(%ebp),%eax
8010c97f:	83 c0 14             	add    $0x14,%eax
8010c982:	e8 09 d7 ff ff       	call   8010a090 <get_file_name_constant>
8010c987:	83 f8 01             	cmp    $0x1,%eax
8010c98a:	0f 84 89 00 00 00    	je     8010ca19 <unsafe_cg_stat+0xc9>
8010c990:	83 f8 0d             	cmp    $0xd,%eax
8010c993:	0f 84 da 00 00 00    	je     8010ca73 <unsafe_cg_stat+0x123>
8010c999:	83 f8 02             	cmp    $0x2,%eax
8010c99c:	0f 84 f7 00 00 00    	je     8010ca99 <unsafe_cg_stat+0x149>
8010c9a2:	83 f8 0e             	cmp    $0xe,%eax
8010c9a5:	0f 84 75 01 00 00    	je     8010cb20 <unsafe_cg_stat+0x1d0>
8010c9ab:	83 f8 03             	cmp    $0x3,%eax
8010c9ae:	0f 84 0b 01 00 00    	je     8010cabf <unsafe_cg_stat+0x16f>
8010c9b4:	83 f8 04             	cmp    $0x4,%eax
8010c9b7:	0f 84 19 02 00 00    	je     8010cbd6 <unsafe_cg_stat+0x286>
8010c9bd:	83 f8 0f             	cmp    $0xf,%eax
8010c9c0:	0f 84 8f 01 00 00    	je     8010cb55 <unsafe_cg_stat+0x205>
8010c9c6:	83 f8 11             	cmp    $0x11,%eax
8010c9c9:	0f 84 68 01 00 00    	je     8010cb37 <unsafe_cg_stat+0x1e7>
8010c9cf:	31 db                	xor    %ebx,%ebx
8010c9d1:	83 f8 12             	cmp    $0x12,%eax
8010c9d4:	0f 84 0d 01 00 00    	je     8010cae7 <unsafe_cg_stat+0x197>
8010c9da:	8b 45 0c             	mov    0xc(%ebp),%eax
8010c9dd:	89 58 10             	mov    %ebx,0x10(%eax)
8010c9e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010c9e3:	31 c0                	xor    %eax,%eax
8010c9e5:	5b                   	pop    %ebx
8010c9e6:	5e                   	pop    %esi
8010c9e7:	5f                   	pop    %edi
8010c9e8:	5d                   	pop    %ebp
8010c9e9:	c3                   	ret    
8010c9ea:	b9 05 00 00 00       	mov    $0x5,%ecx
8010c9ef:	83 ec 0c             	sub    $0xc,%esp
8010c9f2:	66 89 08             	mov    %cx,(%eax)
8010c9f5:	8b 45 08             	mov    0x8(%ebp),%eax
8010c9f8:	ff 70 10             	pushl  0x10(%eax)
8010c9fb:	e8 a0 0b 00 00       	call   8010d5a0 <cgorup_num_of_immidiate_children>
8010ca00:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010ca03:	83 c0 07             	add    $0x7,%eax
8010ca06:	83 c4 10             	add    $0x10,%esp
8010ca09:	c1 e0 06             	shl    $0x6,%eax
8010ca0c:	89 47 10             	mov    %eax,0x10(%edi)
8010ca0f:	31 c0                	xor    %eax,%eax
8010ca11:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010ca14:	5b                   	pop    %ebx
8010ca15:	5e                   	pop    %esi
8010ca16:	5f                   	pop    %edi
8010ca17:	5d                   	pop    %ebp
8010ca18:	c3                   	ret    
8010ca19:	bf 01 00 00 00       	mov    $0x1,%edi
8010ca1e:	31 db                	xor    %ebx,%ebx
8010ca20:	be 67 66 66 66       	mov    $0x66666667,%esi
8010ca25:	8d 76 00             	lea    0x0(%esi),%esi
8010ca28:	8b 45 08             	mov    0x8(%ebp),%eax
8010ca2b:	8b 40 10             	mov    0x10(%eax),%eax
8010ca2e:	8b 84 b8 00 02 00 00 	mov    0x200(%eax,%edi,4),%eax
8010ca35:	85 c0                	test   %eax,%eax
8010ca37:	74 2d                	je     8010ca66 <unsafe_cg_stat+0x116>
8010ca39:	83 ec 0c             	sub    $0xc,%esp
8010ca3c:	50                   	push   %eax
8010ca3d:	e8 45 88 ff ff       	call   80105287 <proc_pid>
8010ca42:	83 c4 10             	add    $0x10,%esp
8010ca45:	85 c0                	test   %eax,%eax
8010ca47:	89 c1                	mov    %eax,%ecx
8010ca49:	74 18                	je     8010ca63 <unsafe_cg_stat+0x113>
8010ca4b:	90                   	nop
8010ca4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ca50:	89 c8                	mov    %ecx,%eax
8010ca52:	c1 f9 1f             	sar    $0x1f,%ecx
8010ca55:	83 c3 01             	add    $0x1,%ebx
8010ca58:	f7 ee                	imul   %esi
8010ca5a:	c1 fa 02             	sar    $0x2,%edx
8010ca5d:	29 ca                	sub    %ecx,%edx
8010ca5f:	89 d1                	mov    %edx,%ecx
8010ca61:	75 ed                	jne    8010ca50 <unsafe_cg_stat+0x100>
8010ca63:	83 c3 01             	add    $0x1,%ebx
8010ca66:	83 c7 01             	add    $0x1,%edi
8010ca69:	83 ff 41             	cmp    $0x41,%edi
8010ca6c:	75 ba                	jne    8010ca28 <unsafe_cg_stat+0xd8>
8010ca6e:	e9 67 ff ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010ca73:	8b 45 08             	mov    0x8(%ebp),%eax
8010ca76:	8b 50 10             	mov    0x10(%eax),%edx
8010ca79:	80 ba 0c 03 00 00 01 	cmpb   $0x1,0x30c(%edx)
8010ca80:	19 db                	sbb    %ebx,%ebx
8010ca82:	f7 d3                	not    %ebx
8010ca84:	83 e3 03             	and    $0x3,%ebx
8010ca87:	80 ba 0e 03 00 00 00 	cmpb   $0x0,0x30e(%edx)
8010ca8e:	8d 43 03             	lea    0x3(%ebx),%eax
8010ca91:	0f 45 d8             	cmovne %eax,%ebx
8010ca94:	e9 41 ff ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010ca99:	8b 45 08             	mov    0x8(%ebp),%eax
8010ca9c:	8b 50 10             	mov    0x10(%eax),%edx
8010ca9f:	80 ba 0d 03 00 00 01 	cmpb   $0x1,0x30d(%edx)
8010caa6:	19 db                	sbb    %ebx,%ebx
8010caa8:	f7 d3                	not    %ebx
8010caaa:	83 e3 03             	and    $0x3,%ebx
8010caad:	80 ba 0f 03 00 00 00 	cmpb   $0x0,0x30f(%edx)
8010cab4:	8d 43 03             	lea    0x3(%ebx),%eax
8010cab7:	0f 45 d8             	cmovne %eax,%ebx
8010caba:	e9 1b ff ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010cabf:	8b 45 08             	mov    0x8(%ebp),%eax
8010cac2:	83 ec 0c             	sub    $0xc,%esp
8010cac5:	8b 40 10             	mov    0x10(%eax),%eax
8010cac8:	ff b0 18 03 00 00    	pushl  0x318(%eax)
8010cace:	e8 7d d5 ff ff       	call   8010a050 <intlen>
8010cad3:	83 c4 10             	add    $0x10,%esp
8010cad6:	89 c3                	mov    %eax,%ebx
8010cad8:	e9 fd fe ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010cadd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010cae2:	e9 2a ff ff ff       	jmp    8010ca11 <unsafe_cg_stat+0xc1>
8010cae7:	83 ec 0c             	sub    $0xc,%esp
8010caea:	68 b5 f6 10 80       	push   $0x8010f6b5
8010caef:	e8 7c 9b ff ff       	call   80106670 <strlen>
8010caf4:	89 c3                	mov    %eax,%ebx
8010caf6:	58                   	pop    %eax
8010caf7:	8b 45 08             	mov    0x8(%ebp),%eax
8010cafa:	8b 40 10             	mov    0x10(%eax),%eax
8010cafd:	ff b0 38 03 00 00    	pushl  0x338(%eax)
8010cb03:	e8 48 d5 ff ff       	call   8010a050 <intlen>
8010cb08:	01 c3                	add    %eax,%ebx
8010cb0a:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010cb11:	e8 5a 9b ff ff       	call   80106670 <strlen>
8010cb16:	83 c4 10             	add    $0x10,%esp
8010cb19:	01 c3                	add    %eax,%ebx
8010cb1b:	e9 ba fe ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010cb20:	83 ec 0c             	sub    $0xc,%esp
8010cb23:	68 98 f6 10 80       	push   $0x8010f698
8010cb28:	e8 43 9b ff ff       	call   80106670 <strlen>
8010cb2d:	83 c4 10             	add    $0x10,%esp
8010cb30:	89 c3                	mov    %eax,%ebx
8010cb32:	e9 a3 fe ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010cb37:	83 ec 0c             	sub    $0xc,%esp
8010cb3a:	68 1c f6 10 80       	push   $0x8010f61c
8010cb3f:	e8 2c 9b ff ff       	call   80106670 <strlen>
8010cb44:	89 c3                	mov    %eax,%ebx
8010cb46:	8b 45 08             	mov    0x8(%ebp),%eax
8010cb49:	5a                   	pop    %edx
8010cb4a:	8b 40 10             	mov    0x10(%eax),%eax
8010cb4d:	ff b0 04 03 00 00    	pushl  0x304(%eax)
8010cb53:	eb ae                	jmp    8010cb03 <unsafe_cg_stat+0x1b3>
8010cb55:	83 ec 0c             	sub    $0xc,%esp
8010cb58:	68 7c f5 10 80       	push   $0x8010f57c
8010cb5d:	e8 0e 9b ff ff       	call   80106670 <strlen>
8010cb62:	89 c3                	mov    %eax,%ebx
8010cb64:	8b 45 08             	mov    0x8(%ebp),%eax
8010cb67:	59                   	pop    %ecx
8010cb68:	8b 40 10             	mov    0x10(%eax),%eax
8010cb6b:	ff b0 24 03 00 00    	pushl  0x324(%eax)
8010cb71:	e8 da d4 ff ff       	call   8010a050 <intlen>
8010cb76:	01 c3                	add    %eax,%ebx
8010cb78:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010cb7f:	e8 ec 9a ff ff       	call   80106670 <strlen>
8010cb84:	01 c3                	add    %eax,%ebx
8010cb86:	c7 04 24 8e f5 10 80 	movl   $0x8010f58e,(%esp)
8010cb8d:	e8 de 9a ff ff       	call   80106670 <strlen>
8010cb92:	01 c3                	add    %eax,%ebx
8010cb94:	8b 45 08             	mov    0x8(%ebp),%eax
8010cb97:	5e                   	pop    %esi
8010cb98:	8b 40 10             	mov    0x10(%eax),%eax
8010cb9b:	ff b0 28 03 00 00    	pushl  0x328(%eax)
8010cba1:	e8 aa d4 ff ff       	call   8010a050 <intlen>
8010cba6:	01 c3                	add    %eax,%ebx
8010cba8:	c7 04 24 f3 f3 10 80 	movl   $0x8010f3f3,(%esp)
8010cbaf:	e8 bc 9a ff ff       	call   80106670 <strlen>
8010cbb4:	01 c3                	add    %eax,%ebx
8010cbb6:	c7 04 24 a6 f6 10 80 	movl   $0x8010f6a6,(%esp)
8010cbbd:	e8 ae 9a ff ff       	call   80106670 <strlen>
8010cbc2:	01 c3                	add    %eax,%ebx
8010cbc4:	8b 45 08             	mov    0x8(%ebp),%eax
8010cbc7:	5f                   	pop    %edi
8010cbc8:	8b 40 10             	mov    0x10(%eax),%eax
8010cbcb:	ff b0 04 03 00 00    	pushl  0x304(%eax)
8010cbd1:	e9 2d ff ff ff       	jmp    8010cb03 <unsafe_cg_stat+0x1b3>
8010cbd6:	8b 45 08             	mov    0x8(%ebp),%eax
8010cbd9:	83 ec 0c             	sub    $0xc,%esp
8010cbdc:	8b 40 10             	mov    0x10(%eax),%eax
8010cbdf:	ff b0 1c 03 00 00    	pushl  0x31c(%eax)
8010cbe5:	e8 66 d4 ff ff       	call   8010a050 <intlen>
8010cbea:	83 c4 10             	add    $0x10,%esp
8010cbed:	89 c3                	mov    %eax,%ebx
8010cbef:	e9 e6 fd ff ff       	jmp    8010c9da <unsafe_cg_stat+0x8a>
8010cbf4:	66 90                	xchg   %ax,%ax
8010cbf6:	66 90                	xchg   %ax,%ax
8010cbf8:	66 90                	xchg   %ax,%ax
8010cbfa:	66 90                	xchg   %ax,%ax
8010cbfc:	66 90                	xchg   %ax,%ax
8010cbfe:	66 90                	xchg   %ax,%ax

8010cc00 <unsafe_cgroup_erase.part.0>:
8010cc00:	85 c0                	test   %eax,%eax
8010cc02:	74 4b                	je     8010cc4f <unsafe_cgroup_erase.part.0+0x4f>
8010cc04:	55                   	push   %ebp
8010cc05:	89 e5                	mov    %esp,%ebp
8010cc07:	53                   	push   %ebx
8010cc08:	90                   	nop
8010cc09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cc10:	8b 98 04 03 00 00    	mov    0x304(%eax),%ebx
8010cc16:	83 eb 01             	sub    $0x1,%ebx
8010cc19:	89 98 04 03 00 00    	mov    %ebx,0x304(%eax)
8010cc1f:	8b 0a                	mov    (%edx),%ecx
8010cc21:	29 88 38 03 00 00    	sub    %ecx,0x338(%eax)
8010cc27:	8b 0a                	mov    (%edx),%ecx
8010cc29:	81 c1 ff 0f 00 00    	add    $0xfff,%ecx
8010cc2f:	c1 e9 0c             	shr    $0xc,%ecx
8010cc32:	29 88 3c 03 00 00    	sub    %ecx,0x33c(%eax)
8010cc38:	85 db                	test   %ebx,%ebx
8010cc3a:	75 07                	jne    8010cc43 <unsafe_cgroup_erase.part.0+0x43>
8010cc3c:	c6 80 14 03 00 00 00 	movb   $0x0,0x314(%eax)
8010cc43:	8b 80 08 03 00 00    	mov    0x308(%eax),%eax
8010cc49:	85 c0                	test   %eax,%eax
8010cc4b:	75 c3                	jne    8010cc10 <unsafe_cgroup_erase.part.0+0x10>
8010cc4d:	5b                   	pop    %ebx
8010cc4e:	5d                   	pop    %ebp
8010cc4f:	f3 c3                	repz ret 
8010cc51:	eb 0d                	jmp    8010cc60 <cginit>
8010cc53:	90                   	nop
8010cc54:	90                   	nop
8010cc55:	90                   	nop
8010cc56:	90                   	nop
8010cc57:	90                   	nop
8010cc58:	90                   	nop
8010cc59:	90                   	nop
8010cc5a:	90                   	nop
8010cc5b:	90                   	nop
8010cc5c:	90                   	nop
8010cc5d:	90                   	nop
8010cc5e:	90                   	nop
8010cc5f:	90                   	nop

8010cc60 <cginit>:
8010cc60:	55                   	push   %ebp
8010cc61:	89 e5                	mov    %esp,%ebp
8010cc63:	83 ec 10             	sub    $0x10,%esp
8010cc66:	68 58 f7 10 80       	push   $0x8010f758
8010cc6b:	68 20 c4 13 80       	push   $0x8013c420
8010cc70:	e8 fb 94 ff ff       	call   80106170 <initlock>
8010cc75:	83 c4 10             	add    $0x10,%esp
8010cc78:	c9                   	leave  
8010cc79:	c3                   	ret    
8010cc7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010cc80 <cgroup_lock>:
8010cc80:	55                   	push   %ebp
8010cc81:	89 e5                	mov    %esp,%ebp
8010cc83:	83 ec 14             	sub    $0x14,%esp
8010cc86:	68 20 c4 13 80       	push   $0x8013c420
8010cc8b:	e8 e0 95 ff ff       	call   80106270 <acquire>
8010cc90:	83 c4 10             	add    $0x10,%esp
8010cc93:	c9                   	leave  
8010cc94:	c3                   	ret    
8010cc95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010cc99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010cca0 <cgroup_unlock>:
8010cca0:	55                   	push   %ebp
8010cca1:	89 e5                	mov    %esp,%ebp
8010cca3:	83 ec 14             	sub    $0x14,%esp
8010cca6:	68 20 c4 13 80       	push   $0x8013c420
8010ccab:	e8 e0 96 ff ff       	call   80106390 <release>
8010ccb0:	83 c4 10             	add    $0x10,%esp
8010ccb3:	c9                   	leave  
8010ccb4:	c3                   	ret    
8010ccb5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ccb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010ccc0 <format_path>:
8010ccc0:	55                   	push   %ebp
8010ccc1:	89 e5                	mov    %esp,%ebp
8010ccc3:	57                   	push   %edi
8010ccc4:	56                   	push   %esi
8010ccc5:	53                   	push   %ebx
8010ccc6:	83 ec 1c             	sub    $0x1c,%esp
8010ccc9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010cccc:	8b 7d 08             	mov    0x8(%ebp),%edi
8010cccf:	e8 8f 85 ff ff       	call   80105263 <myproc>
8010ccd4:	80 3b 2f             	cmpb   $0x2f,(%ebx)
8010ccd7:	89 fe                	mov    %edi,%esi
8010ccd9:	74 35                	je     8010cd10 <format_path+0x50>
8010ccdb:	8d b0 ac 00 00 00    	lea    0xac(%eax),%esi
8010cce1:	83 ec 0c             	sub    $0xc,%esp
8010cce4:	56                   	push   %esi
8010cce5:	e8 86 99 ff ff       	call   80106670 <strlen>
8010ccea:	83 c4 0c             	add    $0xc,%esp
8010cced:	50                   	push   %eax
8010ccee:	56                   	push   %esi
8010ccef:	57                   	push   %edi
8010ccf0:	e8 db 98 ff ff       	call   801065d0 <strncpy>
8010ccf5:	89 34 24             	mov    %esi,(%esp)
8010ccf8:	e8 73 99 ff ff       	call   80106670 <strlen>
8010ccfd:	01 f8                	add    %edi,%eax
8010ccff:	83 c4 10             	add    $0x10,%esp
8010cd02:	80 78 ff 2f          	cmpb   $0x2f,-0x1(%eax)
8010cd06:	89 c6                	mov    %eax,%esi
8010cd08:	74 06                	je     8010cd10 <format_path+0x50>
8010cd0a:	83 c6 01             	add    $0x1,%esi
8010cd0d:	c6 00 2f             	movb   $0x2f,(%eax)
8010cd10:	83 ec 0c             	sub    $0xc,%esp
8010cd13:	53                   	push   %ebx
8010cd14:	e8 57 99 ff ff       	call   80106670 <strlen>
8010cd19:	8d 44 03 ff          	lea    -0x1(%ebx,%eax,1),%eax
8010cd1d:	83 c4 10             	add    $0x10,%esp
8010cd20:	39 c3                	cmp    %eax,%ebx
8010cd22:	72 17                	jb     8010cd3b <format_path+0x7b>
8010cd24:	e9 98 00 00 00       	jmp    8010cdc1 <format_path+0x101>
8010cd29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cd30:	83 e8 01             	sub    $0x1,%eax
8010cd33:	39 c3                	cmp    %eax,%ebx
8010cd35:	0f 84 c5 00 00 00    	je     8010ce00 <format_path+0x140>
8010cd3b:	80 38 2f             	cmpb   $0x2f,(%eax)
8010cd3e:	74 f0                	je     8010cd30 <format_path+0x70>
8010cd40:	8d 4f ff             	lea    -0x1(%edi),%ecx
8010cd43:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
8010cd46:	eb 1d                	jmp    8010cd65 <format_path+0xa5>
8010cd48:	90                   	nop
8010cd49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cd50:	80 7e ff 2f          	cmpb   $0x2f,-0x1(%esi)
8010cd54:	0f b6 13             	movzbl (%ebx),%edx
8010cd57:	74 17                	je     8010cd70 <format_path+0xb0>
8010cd59:	88 16                	mov    %dl,(%esi)
8010cd5b:	83 c3 01             	add    $0x1,%ebx
8010cd5e:	83 c6 01             	add    $0x1,%esi
8010cd61:	39 c3                	cmp    %eax,%ebx
8010cd63:	77 6b                	ja     8010cdd0 <format_path+0x110>
8010cd65:	39 f7                	cmp    %esi,%edi
8010cd67:	72 e7                	jb     8010cd50 <format_path+0x90>
8010cd69:	0f b6 13             	movzbl (%ebx),%edx
8010cd6c:	eb eb                	jmp    8010cd59 <format_path+0x99>
8010cd6e:	66 90                	xchg   %ax,%ax
8010cd70:	80 fa 2e             	cmp    $0x2e,%dl
8010cd73:	75 e4                	jne    8010cd59 <format_path+0x99>
8010cd75:	0f b6 4b 01          	movzbl 0x1(%ebx),%ecx
8010cd79:	84 c9                	test   %cl,%cl
8010cd7b:	74 7b                	je     8010cdf8 <format_path+0x138>
8010cd7d:	80 f9 2f             	cmp    $0x2f,%cl
8010cd80:	74 76                	je     8010cdf8 <format_path+0x138>
8010cd82:	80 f9 2e             	cmp    $0x2e,%cl
8010cd85:	75 d2                	jne    8010cd59 <format_path+0x99>
8010cd87:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
8010cd8b:	84 c9                	test   %cl,%cl
8010cd8d:	74 05                	je     8010cd94 <format_path+0xd4>
8010cd8f:	80 f9 2f             	cmp    $0x2f,%cl
8010cd92:	75 c5                	jne    8010cd59 <format_path+0x99>
8010cd94:	8d 56 fe             	lea    -0x2(%esi),%edx
8010cd97:	39 d7                	cmp    %edx,%edi
8010cd99:	77 21                	ja     8010cdbc <format_path+0xfc>
8010cd9b:	80 7e fe 2f          	cmpb   $0x2f,-0x2(%esi)
8010cd9f:	74 66                	je     8010ce07 <format_path+0x147>
8010cda1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010cda4:	eb 0f                	jmp    8010cdb5 <format_path+0xf5>
8010cda6:	8d 76 00             	lea    0x0(%esi),%esi
8010cda9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010cdb0:	80 3a 2f             	cmpb   $0x2f,(%edx)
8010cdb3:	74 52                	je     8010ce07 <format_path+0x147>
8010cdb5:	83 ea 01             	sub    $0x1,%edx
8010cdb8:	39 ca                	cmp    %ecx,%edx
8010cdba:	75 f4                	jne    8010cdb0 <format_path+0xf0>
8010cdbc:	c6 07 00             	movb   $0x0,(%edi)
8010cdbf:	eb 19                	jmp    8010cdda <format_path+0x11a>
8010cdc1:	0f 86 79 ff ff ff    	jbe    8010cd40 <format_path+0x80>
8010cdc7:	89 f6                	mov    %esi,%esi
8010cdc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010cdd0:	8d 46 ff             	lea    -0x1(%esi),%eax
8010cdd3:	39 c7                	cmp    %eax,%edi
8010cdd5:	72 11                	jb     8010cde8 <format_path+0x128>
8010cdd7:	c6 06 00             	movb   $0x0,(%esi)
8010cdda:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cddd:	5b                   	pop    %ebx
8010cdde:	5e                   	pop    %esi
8010cddf:	5f                   	pop    %edi
8010cde0:	5d                   	pop    %ebp
8010cde1:	c3                   	ret    
8010cde2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010cde8:	80 7e ff 2f          	cmpb   $0x2f,-0x1(%esi)
8010cdec:	75 e9                	jne    8010cdd7 <format_path+0x117>
8010cdee:	c6 46 ff 00          	movb   $0x0,-0x1(%esi)
8010cdf2:	eb e3                	jmp    8010cdd7 <format_path+0x117>
8010cdf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010cdf8:	83 c3 02             	add    $0x2,%ebx
8010cdfb:	e9 61 ff ff ff       	jmp    8010cd61 <format_path+0xa1>
8010ce00:	89 d8                	mov    %ebx,%eax
8010ce02:	e9 39 ff ff ff       	jmp    8010cd40 <format_path+0x80>
8010ce07:	8d 72 01             	lea    0x1(%edx),%esi
8010ce0a:	83 c3 03             	add    $0x3,%ebx
8010ce0d:	e9 4f ff ff ff       	jmp    8010cd61 <format_path+0xa1>
8010ce12:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ce19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010ce20 <unsafe_get_cgroup_by_path>:
8010ce20:	55                   	push   %ebp
8010ce21:	89 e5                	mov    %esp,%ebp
8010ce23:	56                   	push   %esi
8010ce24:	53                   	push   %ebx
8010ce25:	8d b5 f8 fd ff ff    	lea    -0x208(%ebp),%esi
8010ce2b:	bb 54 c4 13 80       	mov    $0x8013c454,%ebx
8010ce30:	81 ec 08 02 00 00    	sub    $0x208,%esp
8010ce36:	50                   	push   %eax
8010ce37:	56                   	push   %esi
8010ce38:	e8 83 fe ff ff       	call   8010ccc0 <format_path>
8010ce3d:	83 c4 10             	add    $0x10,%esp
8010ce40:	80 bd f8 fd ff ff 00 	cmpb   $0x0,-0x208(%ebp)
8010ce47:	75 15                	jne    8010ce5e <unsafe_get_cgroup_by_path+0x3e>
8010ce49:	eb 35                	jmp    8010ce80 <unsafe_get_cgroup_by_path+0x60>
8010ce4b:	90                   	nop
8010ce4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010ce50:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010ce56:	81 fb 54 a6 14 80    	cmp    $0x8014a654,%ebx
8010ce5c:	74 22                	je     8010ce80 <unsafe_get_cgroup_by_path+0x60>
8010ce5e:	83 ec 08             	sub    $0x8,%esp
8010ce61:	56                   	push   %esi
8010ce62:	53                   	push   %ebx
8010ce63:	e8 18 97 ff ff       	call   80106580 <strcmp>
8010ce68:	83 c4 10             	add    $0x10,%esp
8010ce6b:	85 c0                	test   %eax,%eax
8010ce6d:	75 e1                	jne    8010ce50 <unsafe_get_cgroup_by_path+0x30>
8010ce6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010ce72:	89 d8                	mov    %ebx,%eax
8010ce74:	5b                   	pop    %ebx
8010ce75:	5e                   	pop    %esi
8010ce76:	5d                   	pop    %ebp
8010ce77:	c3                   	ret    
8010ce78:	90                   	nop
8010ce79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010ce80:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010ce83:	31 c0                	xor    %eax,%eax
8010ce85:	5b                   	pop    %ebx
8010ce86:	5e                   	pop    %esi
8010ce87:	5d                   	pop    %ebp
8010ce88:	c3                   	ret    
8010ce89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010ce90 <unsafe_set_cgroup_dir_path>:
8010ce90:	55                   	push   %ebp
8010ce91:	89 e5                	mov    %esp,%ebp
8010ce93:	56                   	push   %esi
8010ce94:	53                   	push   %ebx
8010ce95:	8d 9d f8 fd ff ff    	lea    -0x208(%ebp),%ebx
8010ce9b:	89 c6                	mov    %eax,%esi
8010ce9d:	81 ec 08 02 00 00    	sub    $0x208,%esp
8010cea3:	52                   	push   %edx
8010cea4:	53                   	push   %ebx
8010cea5:	e8 16 fe ff ff       	call   8010ccc0 <format_path>
8010ceaa:	0f b6 95 f8 fd ff ff 	movzbl -0x208(%ebp),%edx
8010ceb1:	83 c4 10             	add    $0x10,%esp
8010ceb4:	84 d2                	test   %dl,%dl
8010ceb6:	74 26                	je     8010cede <unsafe_set_cgroup_dir_path+0x4e>
8010ceb8:	8d 4e 01             	lea    0x1(%esi),%ecx
8010cebb:	88 16                	mov    %dl,(%esi)
8010cebd:	b8 01 00 00 00       	mov    $0x1,%eax
8010cec2:	eb 0e                	jmp    8010ced2 <unsafe_set_cgroup_dir_path+0x42>
8010cec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010cec8:	83 c0 01             	add    $0x1,%eax
8010cecb:	3d 00 02 00 00       	cmp    $0x200,%eax
8010ced0:	74 0c                	je     8010cede <unsafe_set_cgroup_dir_path+0x4e>
8010ced2:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
8010ced6:	84 d2                	test   %dl,%dl
8010ced8:	88 54 01 ff          	mov    %dl,-0x1(%ecx,%eax,1)
8010cedc:	75 ea                	jne    8010cec8 <unsafe_set_cgroup_dir_path+0x38>
8010cede:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010cee1:	5b                   	pop    %ebx
8010cee2:	5e                   	pop    %esi
8010cee3:	5d                   	pop    %ebp
8010cee4:	c3                   	ret    
8010cee5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010cee9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010cef0 <cgroup_root>:
8010cef0:	55                   	push   %ebp
8010cef1:	b8 54 c4 13 80       	mov    $0x8013c454,%eax
8010cef6:	89 e5                	mov    %esp,%ebp
8010cef8:	5d                   	pop    %ebp
8010cef9:	c3                   	ret    
8010cefa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010cf00 <protect_memory>:
8010cf00:	55                   	push   %ebp
8010cf01:	89 e5                	mov    %esp,%ebp
8010cf03:	57                   	push   %edi
8010cf04:	56                   	push   %esi
8010cf05:	53                   	push   %ebx
8010cf06:	31 ff                	xor    %edi,%edi
8010cf08:	83 ec 1c             	sub    $0x1c,%esp
8010cf0b:	8b 45 10             	mov    0x10(%ebp),%eax
8010cf0e:	8b 75 0c             	mov    0xc(%ebp),%esi
8010cf11:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010cf14:	05 ff 0f 00 00       	add    $0xfff,%eax
8010cf19:	c1 f8 0c             	sar    $0xc,%eax
8010cf1c:	81 fe 54 c4 13 80    	cmp    $0x8013c454,%esi
8010cf22:	74 33                	je     8010cf57 <protect_memory+0x57>
8010cf24:	80 be 13 03 00 00 00 	cmpb   $0x0,0x313(%esi)
8010cf2b:	74 2a                	je     8010cf57 <protect_memory+0x57>
8010cf2d:	8b 8e 58 03 00 00    	mov    0x358(%esi),%ecx
8010cf33:	85 c9                	test   %ecx,%ecx
8010cf35:	74 20                	je     8010cf57 <protect_memory+0x57>
8010cf37:	8b be 54 03 00 00    	mov    0x354(%esi),%edi
8010cf3d:	8d 97 ff 0f 00 00    	lea    0xfff(%edi),%edx
8010cf43:	89 cf                	mov    %ecx,%edi
8010cf45:	c1 ea 0c             	shr    $0xc,%edx
8010cf48:	2b 96 3c 03 00 00    	sub    0x33c(%esi),%edx
8010cf4e:	29 c2                	sub    %eax,%edx
8010cf50:	29 d7                	sub    %edx,%edi
8010cf52:	85 d2                	test   %edx,%edx
8010cf54:	0f 4e f9             	cmovle %ecx,%edi
8010cf57:	31 d2                	xor    %edx,%edx
8010cf59:	81 fb 54 c4 13 80    	cmp    $0x8013c454,%ebx
8010cf5f:	74 09                	je     8010cf6a <protect_memory+0x6a>
8010cf61:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
8010cf68:	75 36                	jne    8010cfa0 <protect_memory+0xa0>
8010cf6a:	89 d0                	mov    %edx,%eax
8010cf6c:	83 ec 0c             	sub    $0xc,%esp
8010cf6f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010cf72:	29 f8                	sub    %edi,%eax
8010cf74:	50                   	push   %eax
8010cf75:	e8 a6 5f ff ff       	call   80102f20 <increse_protect_counter>
8010cf7a:	83 c4 10             	add    $0x10,%esp
8010cf7d:	85 c0                	test   %eax,%eax
8010cf7f:	75 47                	jne    8010cfc8 <protect_memory+0xc8>
8010cf81:	29 be 58 03 00 00    	sub    %edi,0x358(%esi)
8010cf87:	8b 55 e4             	mov    -0x1c(%ebp),%edx
8010cf8a:	01 93 58 03 00 00    	add    %edx,0x358(%ebx)
8010cf90:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cf93:	5b                   	pop    %ebx
8010cf94:	5e                   	pop    %esi
8010cf95:	5f                   	pop    %edi
8010cf96:	5d                   	pop    %ebp
8010cf97:	c3                   	ret    
8010cf98:	90                   	nop
8010cf99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010cfa0:	8b 8b 54 03 00 00    	mov    0x354(%ebx),%ecx
8010cfa6:	81 c1 ff 0f 00 00    	add    $0xfff,%ecx
8010cfac:	c1 e9 0c             	shr    $0xc,%ecx
8010cfaf:	01 c8                	add    %ecx,%eax
8010cfb1:	2b 83 3c 03 00 00    	sub    0x33c(%ebx),%eax
8010cfb7:	85 c0                	test   %eax,%eax
8010cfb9:	7e af                	jle    8010cf6a <protect_memory+0x6a>
8010cfbb:	2b 83 58 03 00 00    	sub    0x358(%ebx),%eax
8010cfc1:	89 c2                	mov    %eax,%edx
8010cfc3:	eb a5                	jmp    8010cf6a <protect_memory+0x6a>
8010cfc5:	8d 76 00             	lea    0x0(%esi),%esi
8010cfc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010cfcb:	b8 01 00 00 00       	mov    $0x1,%eax
8010cfd0:	5b                   	pop    %ebx
8010cfd1:	5e                   	pop    %esi
8010cfd2:	5f                   	pop    %edi
8010cfd3:	5d                   	pop    %ebp
8010cfd4:	c3                   	ret    
8010cfd5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010cfd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010cfe0 <unsafe_cgroup_insert>:
8010cfe0:	55                   	push   %ebp
8010cfe1:	89 e5                	mov    %esp,%ebp
8010cfe3:	57                   	push   %edi
8010cfe4:	56                   	push   %esi
8010cfe5:	53                   	push   %ebx
8010cfe6:	83 ec 0c             	sub    $0xc,%esp
8010cfe9:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010cfec:	8b 75 0c             	mov    0xc(%ebp),%esi
8010cfef:	80 bb 0f 03 00 00 01 	cmpb   $0x1,0x30f(%ebx)
8010cff6:	0f 84 0c 01 00 00    	je     8010d108 <unsafe_cgroup_insert+0x128>
8010cffc:	80 bb 13 03 00 00 01 	cmpb   $0x1,0x313(%ebx)
8010d003:	0f 84 1f 01 00 00    	je     8010d128 <unsafe_cgroup_insert+0x148>
8010d009:	31 c0                	xor    %eax,%eax
8010d00b:	31 ff                	xor    %edi,%edi
8010d00d:	31 c9                	xor    %ecx,%ecx
8010d00f:	eb 17                	jmp    8010d028 <unsafe_cgroup_insert+0x48>
8010d011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010d018:	39 f2                	cmp    %esi,%edx
8010d01a:	0f 84 d8 00 00 00    	je     8010d0f8 <unsafe_cgroup_insert+0x118>
8010d020:	83 c0 01             	add    $0x1,%eax
8010d023:	83 f8 40             	cmp    $0x40,%eax
8010d026:	74 28                	je     8010d050 <unsafe_cgroup_insert+0x70>
8010d028:	85 c9                	test   %ecx,%ecx
8010d02a:	8b 94 83 04 02 00 00 	mov    0x204(%ebx,%eax,4),%edx
8010d031:	75 e5                	jne    8010d018 <unsafe_cgroup_insert+0x38>
8010d033:	85 d2                	test   %edx,%edx
8010d035:	75 e1                	jne    8010d018 <unsafe_cgroup_insert+0x38>
8010d037:	89 c7                	mov    %eax,%edi
8010d039:	83 c0 01             	add    $0x1,%eax
8010d03c:	b9 01 00 00 00       	mov    $0x1,%ecx
8010d041:	83 f8 40             	cmp    $0x40,%eax
8010d044:	75 e2                	jne    8010d028 <unsafe_cgroup_insert+0x48>
8010d046:	8d 76 00             	lea    0x0(%esi),%esi
8010d049:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010d050:	85 c9                	test   %ecx,%ecx
8010d052:	0f 84 c2 00 00 00    	je     8010d11a <unsafe_cgroup_insert+0x13a>
8010d058:	8b 86 ac 02 00 00    	mov    0x2ac(%esi),%eax
8010d05e:	85 c0                	test   %eax,%eax
8010d060:	74 53                	je     8010d0b5 <unsafe_cgroup_insert+0xd5>
8010d062:	83 ec 04             	sub    $0x4,%esp
8010d065:	ff 36                	pushl  (%esi)
8010d067:	53                   	push   %ebx
8010d068:	50                   	push   %eax
8010d069:	e8 92 fe ff ff       	call   8010cf00 <protect_memory>
8010d06e:	83 c4 10             	add    $0x10,%esp
8010d071:	85 c0                	test   %eax,%eax
8010d073:	0f 85 a1 00 00 00    	jne    8010d11a <unsafe_cgroup_insert+0x13a>
8010d079:	8b 86 ac 02 00 00    	mov    0x2ac(%esi),%eax
8010d07f:	31 d2                	xor    %edx,%edx
8010d081:	eb 0d                	jmp    8010d090 <unsafe_cgroup_insert+0xb0>
8010d083:	90                   	nop
8010d084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d088:	83 c2 01             	add    $0x1,%edx
8010d08b:	83 fa 40             	cmp    $0x40,%edx
8010d08e:	74 25                	je     8010d0b5 <unsafe_cgroup_insert+0xd5>
8010d090:	3b b4 90 04 02 00 00 	cmp    0x204(%eax,%edx,4),%esi
8010d097:	75 ef                	jne    8010d088 <unsafe_cgroup_insert+0xa8>
8010d099:	c7 86 ac 02 00 00 54 	movl   $0x8013c454,0x2ac(%esi)
8010d0a0:	c4 13 80 
8010d0a3:	c7 84 90 04 02 00 00 	movl   $0x0,0x204(%eax,%edx,4)
8010d0aa:	00 00 00 00 
8010d0ae:	89 f2                	mov    %esi,%edx
8010d0b0:	e8 4b fb ff ff       	call   8010cc00 <unsafe_cgroup_erase.part.0>
8010d0b5:	89 b4 bb 04 02 00 00 	mov    %esi,0x204(%ebx,%edi,4)
8010d0bc:	89 9e ac 02 00 00    	mov    %ebx,0x2ac(%esi)
8010d0c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d0c8:	83 83 04 03 00 00 01 	addl   $0x1,0x304(%ebx)
8010d0cf:	c6 83 14 03 00 00 01 	movb   $0x1,0x314(%ebx)
8010d0d6:	8b 06                	mov    (%esi),%eax
8010d0d8:	01 83 38 03 00 00    	add    %eax,0x338(%ebx)
8010d0de:	8b 06                	mov    (%esi),%eax
8010d0e0:	05 ff 0f 00 00       	add    $0xfff,%eax
8010d0e5:	c1 e8 0c             	shr    $0xc,%eax
8010d0e8:	01 83 3c 03 00 00    	add    %eax,0x33c(%ebx)
8010d0ee:	8b 9b 08 03 00 00    	mov    0x308(%ebx),%ebx
8010d0f4:	85 db                	test   %ebx,%ebx
8010d0f6:	75 d0                	jne    8010d0c8 <unsafe_cgroup_insert+0xe8>
8010d0f8:	31 c0                	xor    %eax,%eax
8010d0fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010d0fd:	5b                   	pop    %ebx
8010d0fe:	5e                   	pop    %esi
8010d0ff:	5f                   	pop    %edi
8010d100:	5d                   	pop    %ebp
8010d101:	c3                   	ret    
8010d102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d108:	8b 83 2c 03 00 00    	mov    0x32c(%ebx),%eax
8010d10e:	39 83 04 03 00 00    	cmp    %eax,0x304(%ebx)
8010d114:	0f 8c e2 fe ff ff    	jl     8010cffc <unsafe_cgroup_insert+0x1c>
8010d11a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d11f:	eb d9                	jmp    8010d0fa <unsafe_cgroup_insert+0x11a>
8010d121:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010d128:	8b 06                	mov    (%esi),%eax
8010d12a:	03 83 38 03 00 00    	add    0x338(%ebx),%eax
8010d130:	3b 83 50 03 00 00    	cmp    0x350(%ebx),%eax
8010d136:	0f 86 cd fe ff ff    	jbe    8010d009 <unsafe_cgroup_insert+0x29>
8010d13c:	eb dc                	jmp    8010d11a <unsafe_cgroup_insert+0x13a>
8010d13e:	66 90                	xchg   %ax,%ax

8010d140 <cgroup_insert>:
8010d140:	55                   	push   %ebp
8010d141:	89 e5                	mov    %esp,%ebp
8010d143:	53                   	push   %ebx
8010d144:	83 ec 10             	sub    $0x10,%esp
8010d147:	68 20 c4 13 80       	push   $0x8013c420
8010d14c:	e8 1f 91 ff ff       	call   80106270 <acquire>
8010d151:	58                   	pop    %eax
8010d152:	5a                   	pop    %edx
8010d153:	ff 75 0c             	pushl  0xc(%ebp)
8010d156:	ff 75 08             	pushl  0x8(%ebp)
8010d159:	e8 82 fe ff ff       	call   8010cfe0 <unsafe_cgroup_insert>
8010d15e:	89 c3                	mov    %eax,%ebx
8010d160:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d167:	e8 24 92 ff ff       	call   80106390 <release>
8010d16c:	89 d8                	mov    %ebx,%eax
8010d16e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d171:	c9                   	leave  
8010d172:	c3                   	ret    
8010d173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d180 <calc_dec_dst_protect_pg>:
8010d180:	55                   	push   %ebp
8010d181:	31 c0                	xor    %eax,%eax
8010d183:	89 e5                	mov    %esp,%ebp
8010d185:	8b 55 08             	mov    0x8(%ebp),%edx
8010d188:	81 fa 54 c4 13 80    	cmp    $0x8013c454,%edx
8010d18e:	74 35                	je     8010d1c5 <calc_dec_dst_protect_pg+0x45>
8010d190:	80 ba 13 03 00 00 00 	cmpb   $0x0,0x313(%edx)
8010d197:	74 2c                	je     8010d1c5 <calc_dec_dst_protect_pg+0x45>
8010d199:	8b 8a 58 03 00 00    	mov    0x358(%edx),%ecx
8010d19f:	85 c9                	test   %ecx,%ecx
8010d1a1:	74 22                	je     8010d1c5 <calc_dec_dst_protect_pg+0x45>
8010d1a3:	8b 82 54 03 00 00    	mov    0x354(%edx),%eax
8010d1a9:	05 ff 0f 00 00       	add    $0xfff,%eax
8010d1ae:	c1 e8 0c             	shr    $0xc,%eax
8010d1b1:	2b 82 3c 03 00 00    	sub    0x33c(%edx),%eax
8010d1b7:	89 c2                	mov    %eax,%edx
8010d1b9:	2b 55 0c             	sub    0xc(%ebp),%edx
8010d1bc:	89 c8                	mov    %ecx,%eax
8010d1be:	29 d0                	sub    %edx,%eax
8010d1c0:	85 d2                	test   %edx,%edx
8010d1c2:	0f 4e c1             	cmovle %ecx,%eax
8010d1c5:	5d                   	pop    %ebp
8010d1c6:	c3                   	ret    
8010d1c7:	89 f6                	mov    %esi,%esi
8010d1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d1d0 <calc_inc_src_protect_pg>:
8010d1d0:	55                   	push   %ebp
8010d1d1:	31 c0                	xor    %eax,%eax
8010d1d3:	89 e5                	mov    %esp,%ebp
8010d1d5:	53                   	push   %ebx
8010d1d6:	8b 55 08             	mov    0x8(%ebp),%edx
8010d1d9:	81 fa 54 c4 13 80    	cmp    $0x8013c454,%edx
8010d1df:	74 2f                	je     8010d210 <calc_inc_src_protect_pg+0x40>
8010d1e1:	80 ba 13 03 00 00 00 	cmpb   $0x0,0x313(%edx)
8010d1e8:	74 26                	je     8010d210 <calc_inc_src_protect_pg+0x40>
8010d1ea:	8b 8a 54 03 00 00    	mov    0x354(%edx),%ecx
8010d1f0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010d1f3:	81 c1 ff 0f 00 00    	add    $0xfff,%ecx
8010d1f9:	c1 e9 0c             	shr    $0xc,%ecx
8010d1fc:	01 d9                	add    %ebx,%ecx
8010d1fe:	2b 8a 3c 03 00 00    	sub    0x33c(%edx),%ecx
8010d204:	85 c9                	test   %ecx,%ecx
8010d206:	7e 08                	jle    8010d210 <calc_inc_src_protect_pg+0x40>
8010d208:	89 c8                	mov    %ecx,%eax
8010d20a:	2b 82 58 03 00 00    	sub    0x358(%edx),%eax
8010d210:	5b                   	pop    %ebx
8010d211:	5d                   	pop    %ebp
8010d212:	c3                   	ret    
8010d213:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d220 <cgroup_erase>:
8010d220:	55                   	push   %ebp
8010d221:	89 e5                	mov    %esp,%ebp
8010d223:	56                   	push   %esi
8010d224:	53                   	push   %ebx
8010d225:	8b 75 0c             	mov    0xc(%ebp),%esi
8010d228:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010d22b:	83 ec 0c             	sub    $0xc,%esp
8010d22e:	68 20 c4 13 80       	push   $0x8013c420
8010d233:	e8 38 90 ff ff       	call   80106270 <acquire>
8010d238:	83 c4 10             	add    $0x10,%esp
8010d23b:	31 c9                	xor    %ecx,%ecx
8010d23d:	eb 09                	jmp    8010d248 <cgroup_erase+0x28>
8010d23f:	90                   	nop
8010d240:	83 c1 01             	add    $0x1,%ecx
8010d243:	83 f9 40             	cmp    $0x40,%ecx
8010d246:	74 27                	je     8010d26f <cgroup_erase+0x4f>
8010d248:	3b b4 8b 04 02 00 00 	cmp    0x204(%ebx,%ecx,4),%esi
8010d24f:	75 ef                	jne    8010d240 <cgroup_erase+0x20>
8010d251:	c7 86 ac 02 00 00 54 	movl   $0x8013c454,0x2ac(%esi)
8010d258:	c4 13 80 
8010d25b:	89 f2                	mov    %esi,%edx
8010d25d:	c7 84 8b 04 02 00 00 	movl   $0x0,0x204(%ebx,%ecx,4)
8010d264:	00 00 00 00 
8010d268:	89 d8                	mov    %ebx,%eax
8010d26a:	e8 91 f9 ff ff       	call   8010cc00 <unsafe_cgroup_erase.part.0>
8010d26f:	c7 45 08 20 c4 13 80 	movl   $0x8013c420,0x8(%ebp)
8010d276:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010d279:	5b                   	pop    %ebx
8010d27a:	5e                   	pop    %esi
8010d27b:	5d                   	pop    %ebp
8010d27c:	e9 0f 91 ff ff       	jmp    80106390 <release>
8010d281:	eb 0d                	jmp    8010d290 <unsafe_enable_cpu_controller>
8010d283:	90                   	nop
8010d284:	90                   	nop
8010d285:	90                   	nop
8010d286:	90                   	nop
8010d287:	90                   	nop
8010d288:	90                   	nop
8010d289:	90                   	nop
8010d28a:	90                   	nop
8010d28b:	90                   	nop
8010d28c:	90                   	nop
8010d28d:	90                   	nop
8010d28e:	90                   	nop
8010d28f:	90                   	nop

8010d290 <unsafe_enable_cpu_controller>:
8010d290:	55                   	push   %ebp
8010d291:	89 e5                	mov    %esp,%ebp
8010d293:	8b 55 08             	mov    0x8(%ebp),%edx
8010d296:	85 d2                	test   %edx,%edx
8010d298:	74 52                	je     8010d2ec <unsafe_enable_cpu_controller+0x5c>
8010d29a:	80 ba 14 03 00 00 01 	cmpb   $0x1,0x314(%edx)
8010d2a1:	74 49                	je     8010d2ec <unsafe_enable_cpu_controller+0x5c>
8010d2a3:	80 ba 0d 03 00 00 00 	cmpb   $0x0,0x30d(%edx)
8010d2aa:	75 3c                	jne    8010d2e8 <unsafe_enable_cpu_controller+0x58>
8010d2ac:	80 ba 0c 03 00 00 00 	cmpb   $0x0,0x30c(%edx)
8010d2b3:	74 33                	je     8010d2e8 <unsafe_enable_cpu_controller+0x58>
8010d2b5:	c6 82 0d 03 00 00 01 	movb   $0x1,0x30d(%edx)
8010d2bc:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010d2c1:	eb 11                	jmp    8010d2d4 <unsafe_enable_cpu_controller+0x44>
8010d2c3:	90                   	nop
8010d2c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d2c8:	05 88 03 00 00       	add    $0x388,%eax
8010d2cd:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d2d2:	74 14                	je     8010d2e8 <unsafe_enable_cpu_controller+0x58>
8010d2d4:	3b 10                	cmp    (%eax),%edx
8010d2d6:	75 f0                	jne    8010d2c8 <unsafe_enable_cpu_controller+0x38>
8010d2d8:	c6 40 04 01          	movb   $0x1,0x4(%eax)
8010d2dc:	05 88 03 00 00       	add    $0x388,%eax
8010d2e1:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d2e6:	75 ec                	jne    8010d2d4 <unsafe_enable_cpu_controller+0x44>
8010d2e8:	31 c0                	xor    %eax,%eax
8010d2ea:	5d                   	pop    %ebp
8010d2eb:	c3                   	ret    
8010d2ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d2f1:	5d                   	pop    %ebp
8010d2f2:	c3                   	ret    
8010d2f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d300 <enable_cpu_controller>:
8010d300:	55                   	push   %ebp
8010d301:	89 e5                	mov    %esp,%ebp
8010d303:	53                   	push   %ebx
8010d304:	83 ec 10             	sub    $0x10,%esp
8010d307:	68 20 c4 13 80       	push   $0x8013c420
8010d30c:	e8 5f 8f ff ff       	call   80106270 <acquire>
8010d311:	58                   	pop    %eax
8010d312:	ff 75 08             	pushl  0x8(%ebp)
8010d315:	e8 76 ff ff ff       	call   8010d290 <unsafe_enable_cpu_controller>
8010d31a:	89 c3                	mov    %eax,%ebx
8010d31c:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d323:	e8 68 90 ff ff       	call   80106390 <release>
8010d328:	89 d8                	mov    %ebx,%eax
8010d32a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d32d:	c9                   	leave  
8010d32e:	c3                   	ret    
8010d32f:	90                   	nop

8010d330 <unsafe_disable_cpu_controller>:
8010d330:	55                   	push   %ebp
8010d331:	89 e5                	mov    %esp,%ebp
8010d333:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010d336:	85 c9                	test   %ecx,%ecx
8010d338:	74 2e                	je     8010d368 <unsafe_disable_cpu_controller+0x38>
8010d33a:	80 b9 0d 03 00 00 00 	cmpb   $0x0,0x30d(%ecx)
8010d341:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010d346:	89 c2                	mov    %eax,%edx
8010d348:	75 14                	jne    8010d35e <unsafe_disable_cpu_controller+0x2e>
8010d34a:	eb 24                	jmp    8010d370 <unsafe_disable_cpu_controller+0x40>
8010d34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d350:	81 c2 88 03 00 00    	add    $0x388,%edx
8010d356:	81 fa 5c a9 14 80    	cmp    $0x8014a95c,%edx
8010d35c:	74 1a                	je     8010d378 <unsafe_disable_cpu_controller+0x48>
8010d35e:	3b 0a                	cmp    (%edx),%ecx
8010d360:	75 ee                	jne    8010d350 <unsafe_disable_cpu_controller+0x20>
8010d362:	80 7a 05 00          	cmpb   $0x0,0x5(%edx)
8010d366:	74 e8                	je     8010d350 <unsafe_disable_cpu_controller+0x20>
8010d368:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d36d:	5d                   	pop    %ebp
8010d36e:	c3                   	ret    
8010d36f:	90                   	nop
8010d370:	31 c0                	xor    %eax,%eax
8010d372:	5d                   	pop    %ebp
8010d373:	c3                   	ret    
8010d374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d378:	c6 81 0d 03 00 00 00 	movb   $0x0,0x30d(%ecx)
8010d37f:	eb 13                	jmp    8010d394 <unsafe_disable_cpu_controller+0x64>
8010d381:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010d388:	05 88 03 00 00       	add    $0x388,%eax
8010d38d:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d392:	74 dc                	je     8010d370 <unsafe_disable_cpu_controller+0x40>
8010d394:	3b 08                	cmp    (%eax),%ecx
8010d396:	75 f0                	jne    8010d388 <unsafe_disable_cpu_controller+0x58>
8010d398:	c6 40 04 00          	movb   $0x0,0x4(%eax)
8010d39c:	eb ea                	jmp    8010d388 <unsafe_disable_cpu_controller+0x58>
8010d39e:	66 90                	xchg   %ax,%ax

8010d3a0 <disable_cpu_controller>:
8010d3a0:	55                   	push   %ebp
8010d3a1:	89 e5                	mov    %esp,%ebp
8010d3a3:	53                   	push   %ebx
8010d3a4:	83 ec 10             	sub    $0x10,%esp
8010d3a7:	68 20 c4 13 80       	push   $0x8013c420
8010d3ac:	e8 bf 8e ff ff       	call   80106270 <acquire>
8010d3b1:	58                   	pop    %eax
8010d3b2:	ff 75 08             	pushl  0x8(%ebp)
8010d3b5:	e8 76 ff ff ff       	call   8010d330 <unsafe_disable_cpu_controller>
8010d3ba:	89 c3                	mov    %eax,%ebx
8010d3bc:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d3c3:	e8 c8 8f ff ff       	call   80106390 <release>
8010d3c8:	89 d8                	mov    %ebx,%eax
8010d3ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d3cd:	c9                   	leave  
8010d3ce:	c3                   	ret    
8010d3cf:	90                   	nop

8010d3d0 <set_cgroup_dir_path>:
8010d3d0:	55                   	push   %ebp
8010d3d1:	89 e5                	mov    %esp,%ebp
8010d3d3:	56                   	push   %esi
8010d3d4:	53                   	push   %ebx
8010d3d5:	8b 75 0c             	mov    0xc(%ebp),%esi
8010d3d8:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010d3db:	83 ec 0c             	sub    $0xc,%esp
8010d3de:	68 20 c4 13 80       	push   $0x8013c420
8010d3e3:	e8 88 8e ff ff       	call   80106270 <acquire>
8010d3e8:	89 f2                	mov    %esi,%edx
8010d3ea:	89 d8                	mov    %ebx,%eax
8010d3ec:	e8 9f fa ff ff       	call   8010ce90 <unsafe_set_cgroup_dir_path>
8010d3f1:	c7 45 08 20 c4 13 80 	movl   $0x8013c420,0x8(%ebp)
8010d3f8:	83 c4 10             	add    $0x10,%esp
8010d3fb:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010d3fe:	5b                   	pop    %ebx
8010d3ff:	5e                   	pop    %esi
8010d400:	5d                   	pop    %ebp
8010d401:	e9 8a 8f ff ff       	jmp    80106390 <release>
8010d406:	8d 76 00             	lea    0x0(%esi),%esi
8010d409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d410 <get_cgroup_by_path>:
8010d410:	55                   	push   %ebp
8010d411:	89 e5                	mov    %esp,%ebp
8010d413:	53                   	push   %ebx
8010d414:	83 ec 10             	sub    $0x10,%esp
8010d417:	68 20 c4 13 80       	push   $0x8013c420
8010d41c:	e8 4f 8e ff ff       	call   80106270 <acquire>
8010d421:	8b 45 08             	mov    0x8(%ebp),%eax
8010d424:	e8 f7 f9 ff ff       	call   8010ce20 <unsafe_get_cgroup_by_path>
8010d429:	89 c3                	mov    %eax,%ebx
8010d42b:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d432:	e8 59 8f ff ff       	call   80106390 <release>
8010d437:	89 d8                	mov    %ebx,%eax
8010d439:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d43c:	c9                   	leave  
8010d43d:	c3                   	ret    
8010d43e:	66 90                	xchg   %ax,%ax

8010d440 <set_max_descendants_value>:
8010d440:	55                   	push   %ebp
8010d441:	89 e5                	mov    %esp,%ebp
8010d443:	8b 55 0c             	mov    0xc(%ebp),%edx
8010d446:	8b 45 08             	mov    0x8(%ebp),%eax
8010d449:	89 90 18 03 00 00    	mov    %edx,0x318(%eax)
8010d44f:	5d                   	pop    %ebp
8010d450:	c3                   	ret    
8010d451:	eb 0d                	jmp    8010d460 <set_max_depth_value>
8010d453:	90                   	nop
8010d454:	90                   	nop
8010d455:	90                   	nop
8010d456:	90                   	nop
8010d457:	90                   	nop
8010d458:	90                   	nop
8010d459:	90                   	nop
8010d45a:	90                   	nop
8010d45b:	90                   	nop
8010d45c:	90                   	nop
8010d45d:	90                   	nop
8010d45e:	90                   	nop
8010d45f:	90                   	nop

8010d460 <set_max_depth_value>:
8010d460:	55                   	push   %ebp
8010d461:	89 e5                	mov    %esp,%ebp
8010d463:	8b 55 0c             	mov    0xc(%ebp),%edx
8010d466:	8b 45 08             	mov    0x8(%ebp),%eax
8010d469:	89 90 1c 03 00 00    	mov    %edx,0x31c(%eax)
8010d46f:	5d                   	pop    %ebp
8010d470:	c3                   	ret    
8010d471:	eb 0d                	jmp    8010d480 <set_nr_descendants>
8010d473:	90                   	nop
8010d474:	90                   	nop
8010d475:	90                   	nop
8010d476:	90                   	nop
8010d477:	90                   	nop
8010d478:	90                   	nop
8010d479:	90                   	nop
8010d47a:	90                   	nop
8010d47b:	90                   	nop
8010d47c:	90                   	nop
8010d47d:	90                   	nop
8010d47e:	90                   	nop
8010d47f:	90                   	nop

8010d480 <set_nr_descendants>:
8010d480:	55                   	push   %ebp
8010d481:	89 e5                	mov    %esp,%ebp
8010d483:	8b 55 0c             	mov    0xc(%ebp),%edx
8010d486:	8b 45 08             	mov    0x8(%ebp),%eax
8010d489:	89 90 24 03 00 00    	mov    %edx,0x324(%eax)
8010d48f:	5d                   	pop    %ebp
8010d490:	c3                   	ret    
8010d491:	eb 0d                	jmp    8010d4a0 <set_nr_dying_descendants>
8010d493:	90                   	nop
8010d494:	90                   	nop
8010d495:	90                   	nop
8010d496:	90                   	nop
8010d497:	90                   	nop
8010d498:	90                   	nop
8010d499:	90                   	nop
8010d49a:	90                   	nop
8010d49b:	90                   	nop
8010d49c:	90                   	nop
8010d49d:	90                   	nop
8010d49e:	90                   	nop
8010d49f:	90                   	nop

8010d4a0 <set_nr_dying_descendants>:
8010d4a0:	55                   	push   %ebp
8010d4a1:	89 e5                	mov    %esp,%ebp
8010d4a3:	8b 55 0c             	mov    0xc(%ebp),%edx
8010d4a6:	8b 45 08             	mov    0x8(%ebp),%eax
8010d4a9:	89 90 28 03 00 00    	mov    %edx,0x328(%eax)
8010d4af:	5d                   	pop    %ebp
8010d4b0:	c3                   	ret    
8010d4b1:	eb 0d                	jmp    8010d4c0 <get_cgroup_names_at_path>
8010d4b3:	90                   	nop
8010d4b4:	90                   	nop
8010d4b5:	90                   	nop
8010d4b6:	90                   	nop
8010d4b7:	90                   	nop
8010d4b8:	90                   	nop
8010d4b9:	90                   	nop
8010d4ba:	90                   	nop
8010d4bb:	90                   	nop
8010d4bc:	90                   	nop
8010d4bd:	90                   	nop
8010d4be:	90                   	nop
8010d4bf:	90                   	nop

8010d4c0 <get_cgroup_names_at_path>:
8010d4c0:	55                   	push   %ebp
8010d4c1:	89 e5                	mov    %esp,%ebp
8010d4c3:	57                   	push   %edi
8010d4c4:	56                   	push   %esi
8010d4c5:	53                   	push   %ebx
8010d4c6:	83 ec 1c             	sub    $0x1c,%esp
8010d4c9:	8b 45 0c             	mov    0xc(%ebp),%eax
8010d4cc:	80 38 00             	cmpb   $0x0,(%eax)
8010d4cf:	0f 84 ba 00 00 00    	je     8010d58f <get_cgroup_names_at_path+0xcf>
8010d4d5:	bb dc c7 13 80       	mov    $0x8013c7dc,%ebx
8010d4da:	be 01 00 00 00       	mov    $0x1,%esi
8010d4df:	eb 19                	jmp    8010d4fa <get_cgroup_names_at_path+0x3a>
8010d4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010d4e8:	83 c6 01             	add    $0x1,%esi
8010d4eb:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010d4f1:	83 fe 40             	cmp    $0x40,%esi
8010d4f4:	0f 84 95 00 00 00    	je     8010d58f <get_cgroup_names_at_path+0xcf>
8010d4fa:	80 3b 00             	cmpb   $0x0,(%ebx)
8010d4fd:	74 e9                	je     8010d4e8 <get_cgroup_names_at_path+0x28>
8010d4ff:	83 ec 08             	sub    $0x8,%esp
8010d502:	ff 75 0c             	pushl  0xc(%ebp)
8010d505:	ff b3 08 03 00 00    	pushl  0x308(%ebx)
8010d50b:	e8 70 90 ff ff       	call   80106580 <strcmp>
8010d510:	83 c4 10             	add    $0x10,%esp
8010d513:	85 c0                	test   %eax,%eax
8010d515:	75 d1                	jne    8010d4e8 <get_cgroup_names_at_path+0x28>
8010d517:	83 ec 0c             	sub    $0xc,%esp
8010d51a:	ff 75 0c             	pushl  0xc(%ebp)
8010d51d:	e8 4e 91 ff ff       	call   80106670 <strlen>
8010d522:	69 ce 88 03 00 00    	imul   $0x388,%esi,%ecx
8010d528:	83 c0 01             	add    $0x1,%eax
8010d52b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010d52e:	8d bc 08 54 c4 13 80 	lea    -0x7fec3bac(%eax,%ecx,1),%edi
8010d535:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010d538:	89 3c 24             	mov    %edi,(%esp)
8010d53b:	e8 30 91 ff ff       	call   80106670 <strlen>
8010d540:	8b 55 e0             	mov    -0x20(%ebp),%edx
8010d543:	89 c1                	mov    %eax,%ecx
8010d545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010d548:	83 c4 10             	add    $0x10,%esp
8010d54b:	0f b6 84 10 54 c4 13 	movzbl -0x7fec3bac(%eax,%edx,1),%eax
8010d552:	80 
8010d553:	84 c0                	test   %al,%al
8010d555:	74 1c                	je     8010d573 <get_cgroup_names_at_path+0xb3>
8010d557:	8b 55 08             	mov    0x8(%ebp),%edx
8010d55a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d560:	83 c2 01             	add    $0x1,%edx
8010d563:	83 c7 01             	add    $0x1,%edi
8010d566:	88 42 ff             	mov    %al,-0x1(%edx)
8010d569:	0f b6 07             	movzbl (%edi),%eax
8010d56c:	84 c0                	test   %al,%al
8010d56e:	75 f0                	jne    8010d560 <get_cgroup_names_at_path+0xa0>
8010d570:	89 55 08             	mov    %edx,0x8(%ebp)
8010d573:	b8 40 00 00 00       	mov    $0x40,%eax
8010d578:	83 c6 01             	add    $0x1,%esi
8010d57b:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010d581:	29 c8                	sub    %ecx,%eax
8010d583:	01 45 08             	add    %eax,0x8(%ebp)
8010d586:	83 fe 40             	cmp    $0x40,%esi
8010d589:	0f 85 6b ff ff ff    	jne    8010d4fa <get_cgroup_names_at_path+0x3a>
8010d58f:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010d592:	5b                   	pop    %ebx
8010d593:	5e                   	pop    %esi
8010d594:	5f                   	pop    %edi
8010d595:	5d                   	pop    %ebp
8010d596:	c3                   	ret    
8010d597:	89 f6                	mov    %esi,%esi
8010d599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d5a0 <cgorup_num_of_immidiate_children>:
8010d5a0:	55                   	push   %ebp
8010d5a1:	89 e5                	mov    %esp,%ebp
8010d5a3:	57                   	push   %edi
8010d5a4:	56                   	push   %esi
8010d5a5:	53                   	push   %ebx
8010d5a6:	83 ec 0c             	sub    $0xc,%esp
8010d5a9:	8b 7d 08             	mov    0x8(%ebp),%edi
8010d5ac:	80 3f 00             	cmpb   $0x0,(%edi)
8010d5af:	74 52                	je     8010d603 <cgorup_num_of_immidiate_children+0x63>
8010d5b1:	bb 54 c4 13 80       	mov    $0x8013c454,%ebx
8010d5b6:	31 f6                	xor    %esi,%esi
8010d5b8:	eb 14                	jmp    8010d5ce <cgorup_num_of_immidiate_children+0x2e>
8010d5ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d5c0:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010d5c6:	81 fb 54 a6 14 80    	cmp    $0x8014a654,%ebx
8010d5cc:	74 2b                	je     8010d5f9 <cgorup_num_of_immidiate_children+0x59>
8010d5ce:	80 3b 00             	cmpb   $0x0,(%ebx)
8010d5d1:	74 ed                	je     8010d5c0 <cgorup_num_of_immidiate_children+0x20>
8010d5d3:	83 ec 08             	sub    $0x8,%esp
8010d5d6:	57                   	push   %edi
8010d5d7:	ff b3 08 03 00 00    	pushl  0x308(%ebx)
8010d5dd:	e8 9e 8f ff ff       	call   80106580 <strcmp>
8010d5e2:	83 c4 10             	add    $0x10,%esp
8010d5e5:	83 f8 01             	cmp    $0x1,%eax
8010d5e8:	83 d6 00             	adc    $0x0,%esi
8010d5eb:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010d5f1:	81 fb 54 a6 14 80    	cmp    $0x8014a654,%ebx
8010d5f7:	75 d5                	jne    8010d5ce <cgorup_num_of_immidiate_children+0x2e>
8010d5f9:	89 f0                	mov    %esi,%eax
8010d5fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010d5fe:	5b                   	pop    %ebx
8010d5ff:	5e                   	pop    %esi
8010d600:	5f                   	pop    %edi
8010d601:	5d                   	pop    %ebp
8010d602:	c3                   	ret    
8010d603:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d608:	eb f1                	jmp    8010d5fb <cgorup_num_of_immidiate_children+0x5b>
8010d60a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010d610 <decrement_nr_dying_descendants>:
8010d610:	55                   	push   %ebp
8010d611:	89 e5                	mov    %esp,%ebp
8010d613:	8b 45 08             	mov    0x8(%ebp),%eax
8010d616:	85 c0                	test   %eax,%eax
8010d618:	74 17                	je     8010d631 <decrement_nr_dying_descendants+0x21>
8010d61a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d620:	83 a8 28 03 00 00 01 	subl   $0x1,0x328(%eax)
8010d627:	8b 80 08 03 00 00    	mov    0x308(%eax),%eax
8010d62d:	85 c0                	test   %eax,%eax
8010d62f:	75 ef                	jne    8010d620 <decrement_nr_dying_descendants+0x10>
8010d631:	5d                   	pop    %ebp
8010d632:	c3                   	ret    
8010d633:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d639:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d640 <cg_open>:
8010d640:	55                   	push   %ebp
8010d641:	89 e5                	mov    %esp,%ebp
8010d643:	53                   	push   %ebx
8010d644:	83 ec 10             	sub    $0x10,%esp
8010d647:	68 20 c4 13 80       	push   $0x8013c420
8010d64c:	e8 1f 8c ff ff       	call   80106270 <acquire>
8010d651:	ff 75 14             	pushl  0x14(%ebp)
8010d654:	ff 75 10             	pushl  0x10(%ebp)
8010d657:	ff 75 0c             	pushl  0xc(%ebp)
8010d65a:	ff 75 08             	pushl  0x8(%ebp)
8010d65d:	e8 2e cd ff ff       	call   8010a390 <unsafe_cg_open>
8010d662:	83 c4 14             	add    $0x14,%esp
8010d665:	89 c3                	mov    %eax,%ebx
8010d667:	68 20 c4 13 80       	push   $0x8013c420
8010d66c:	e8 1f 8d ff ff       	call   80106390 <release>
8010d671:	89 d8                	mov    %ebx,%eax
8010d673:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d676:	c9                   	leave  
8010d677:	c3                   	ret    
8010d678:	90                   	nop
8010d679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010d680 <cg_sys_open>:
8010d680:	55                   	push   %ebp
8010d681:	89 e5                	mov    %esp,%ebp
8010d683:	57                   	push   %edi
8010d684:	56                   	push   %esi
8010d685:	53                   	push   %ebx
8010d686:	81 ec 18 04 00 00    	sub    $0x418,%esp
8010d68c:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010d68f:	53                   	push   %ebx
8010d690:	e8 7b fd ff ff       	call   8010d410 <get_cgroup_by_path>
8010d695:	83 c4 10             	add    $0x10,%esp
8010d698:	85 c0                	test   %eax,%eax
8010d69a:	74 1c                	je     8010d6b8 <cg_sys_open+0x38>
8010d69c:	ff 75 0c             	pushl  0xc(%ebp)
8010d69f:	50                   	push   %eax
8010d6a0:	6a 00                	push   $0x0
8010d6a2:	6a 01                	push   $0x1
8010d6a4:	e8 97 ff ff ff       	call   8010d640 <cg_open>
8010d6a9:	83 c4 10             	add    $0x10,%esp
8010d6ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010d6af:	5b                   	pop    %ebx
8010d6b0:	5e                   	pop    %esi
8010d6b1:	5f                   	pop    %edi
8010d6b2:	5d                   	pop    %ebp
8010d6b3:	c3                   	ret    
8010d6b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d6b8:	8d b5 e8 fb ff ff    	lea    -0x418(%ebp),%esi
8010d6be:	83 ec 08             	sub    $0x8,%esp
8010d6c1:	56                   	push   %esi
8010d6c2:	53                   	push   %ebx
8010d6c3:	e8 d8 f1 ff ff       	call   8010c8a0 <get_dir_name>
8010d6c8:	83 c4 10             	add    $0x10,%esp
8010d6cb:	85 c0                	test   %eax,%eax
8010d6cd:	75 41                	jne    8010d710 <cg_sys_open+0x90>
8010d6cf:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
8010d6d5:	83 ec 08             	sub    $0x8,%esp
8010d6d8:	57                   	push   %edi
8010d6d9:	53                   	push   %ebx
8010d6da:	e8 21 f1 ff ff       	call   8010c800 <get_base_name>
8010d6df:	83 c4 10             	add    $0x10,%esp
8010d6e2:	85 c0                	test   %eax,%eax
8010d6e4:	75 2a                	jne    8010d710 <cg_sys_open+0x90>
8010d6e6:	83 ec 0c             	sub    $0xc,%esp
8010d6e9:	56                   	push   %esi
8010d6ea:	e8 21 fd ff ff       	call   8010d410 <get_cgroup_by_path>
8010d6ef:	83 c4 10             	add    $0x10,%esp
8010d6f2:	85 c0                	test   %eax,%eax
8010d6f4:	74 1a                	je     8010d710 <cg_sys_open+0x90>
8010d6f6:	ff 75 0c             	pushl  0xc(%ebp)
8010d6f9:	50                   	push   %eax
8010d6fa:	57                   	push   %edi
8010d6fb:	6a 00                	push   $0x0
8010d6fd:	e8 3e ff ff ff       	call   8010d640 <cg_open>
8010d702:	83 c4 10             	add    $0x10,%esp
8010d705:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010d708:	5b                   	pop    %ebx
8010d709:	5e                   	pop    %esi
8010d70a:	5f                   	pop    %edi
8010d70b:	5d                   	pop    %ebp
8010d70c:	c3                   	ret    
8010d70d:	8d 76 00             	lea    0x0(%esi),%esi
8010d710:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d715:	eb 95                	jmp    8010d6ac <cg_sys_open+0x2c>
8010d717:	89 f6                	mov    %esi,%esi
8010d719:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d720 <cg_read>:
8010d720:	55                   	push   %ebp
8010d721:	89 e5                	mov    %esp,%ebp
8010d723:	53                   	push   %ebx
8010d724:	83 ec 10             	sub    $0x10,%esp
8010d727:	68 20 c4 13 80       	push   $0x8013c420
8010d72c:	e8 3f 8b ff ff       	call   80106270 <acquire>
8010d731:	ff 75 14             	pushl  0x14(%ebp)
8010d734:	ff 75 10             	pushl  0x10(%ebp)
8010d737:	ff 75 0c             	pushl  0xc(%ebp)
8010d73a:	ff 75 08             	pushl  0x8(%ebp)
8010d73d:	e8 ae cf ff ff       	call   8010a6f0 <unsafe_cg_read>
8010d742:	83 c4 14             	add    $0x14,%esp
8010d745:	89 c3                	mov    %eax,%ebx
8010d747:	68 20 c4 13 80       	push   $0x8013c420
8010d74c:	e8 3f 8c ff ff       	call   80106390 <release>
8010d751:	89 d8                	mov    %ebx,%eax
8010d753:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d756:	c9                   	leave  
8010d757:	c3                   	ret    
8010d758:	90                   	nop
8010d759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010d760 <cg_write>:
8010d760:	55                   	push   %ebp
8010d761:	89 e5                	mov    %esp,%ebp
8010d763:	53                   	push   %ebx
8010d764:	83 ec 10             	sub    $0x10,%esp
8010d767:	68 20 c4 13 80       	push   $0x8013c420
8010d76c:	e8 ff 8a ff ff       	call   80106270 <acquire>
8010d771:	83 c4 0c             	add    $0xc,%esp
8010d774:	ff 75 10             	pushl  0x10(%ebp)
8010d777:	ff 75 0c             	pushl  0xc(%ebp)
8010d77a:	ff 75 08             	pushl  0x8(%ebp)
8010d77d:	e8 ce e7 ff ff       	call   8010bf50 <unsafe_cg_write>
8010d782:	89 c3                	mov    %eax,%ebx
8010d784:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d78b:	e8 00 8c ff ff       	call   80106390 <release>
8010d790:	89 d8                	mov    %ebx,%eax
8010d792:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d795:	c9                   	leave  
8010d796:	c3                   	ret    
8010d797:	89 f6                	mov    %esi,%esi
8010d799:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d7a0 <cg_close>:
8010d7a0:	55                   	push   %ebp
8010d7a1:	89 e5                	mov    %esp,%ebp
8010d7a3:	53                   	push   %ebx
8010d7a4:	83 ec 10             	sub    $0x10,%esp
8010d7a7:	68 20 c4 13 80       	push   $0x8013c420
8010d7ac:	e8 bf 8a ff ff       	call   80106270 <acquire>
8010d7b1:	58                   	pop    %eax
8010d7b2:	ff 75 08             	pushl  0x8(%ebp)
8010d7b5:	e8 e6 ef ff ff       	call   8010c7a0 <unsafe_cg_close>
8010d7ba:	89 c3                	mov    %eax,%ebx
8010d7bc:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d7c3:	e8 c8 8b ff ff       	call   80106390 <release>
8010d7c8:	89 d8                	mov    %ebx,%eax
8010d7ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d7cd:	c9                   	leave  
8010d7ce:	c3                   	ret    
8010d7cf:	90                   	nop

8010d7d0 <cg_stat>:
8010d7d0:	55                   	push   %ebp
8010d7d1:	89 e5                	mov    %esp,%ebp
8010d7d3:	53                   	push   %ebx
8010d7d4:	83 ec 10             	sub    $0x10,%esp
8010d7d7:	68 20 c4 13 80       	push   $0x8013c420
8010d7dc:	e8 8f 8a ff ff       	call   80106270 <acquire>
8010d7e1:	58                   	pop    %eax
8010d7e2:	5a                   	pop    %edx
8010d7e3:	ff 75 0c             	pushl  0xc(%ebp)
8010d7e6:	ff 75 08             	pushl  0x8(%ebp)
8010d7e9:	e8 62 f1 ff ff       	call   8010c950 <unsafe_cg_stat>
8010d7ee:	89 c3                	mov    %eax,%ebx
8010d7f0:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d7f7:	e8 94 8b ff ff       	call   80106390 <release>
8010d7fc:	89 d8                	mov    %ebx,%eax
8010d7fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d801:	c9                   	leave  
8010d802:	c3                   	ret    
8010d803:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d809:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d810 <set_max_procs>:
8010d810:	55                   	push   %ebp
8010d811:	89 e5                	mov    %esp,%ebp
8010d813:	8b 55 08             	mov    0x8(%ebp),%edx
8010d816:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010d819:	85 d2                	test   %edx,%edx
8010d81b:	74 14                	je     8010d831 <set_max_procs+0x21>
8010d81d:	31 c0                	xor    %eax,%eax
8010d81f:	83 f9 40             	cmp    $0x40,%ecx
8010d822:	77 0b                	ja     8010d82f <set_max_procs+0x1f>
8010d824:	89 8a 2c 03 00 00    	mov    %ecx,0x32c(%edx)
8010d82a:	b8 01 00 00 00       	mov    $0x1,%eax
8010d82f:	5d                   	pop    %ebp
8010d830:	c3                   	ret    
8010d831:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d836:	5d                   	pop    %ebp
8010d837:	c3                   	ret    
8010d838:	90                   	nop
8010d839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010d840 <unsafe_enable_pid_controller>:
8010d840:	55                   	push   %ebp
8010d841:	89 e5                	mov    %esp,%ebp
8010d843:	8b 55 08             	mov    0x8(%ebp),%edx
8010d846:	85 d2                	test   %edx,%edx
8010d848:	74 52                	je     8010d89c <unsafe_enable_pid_controller+0x5c>
8010d84a:	80 ba 14 03 00 00 01 	cmpb   $0x1,0x314(%edx)
8010d851:	74 49                	je     8010d89c <unsafe_enable_pid_controller+0x5c>
8010d853:	80 ba 0f 03 00 00 00 	cmpb   $0x0,0x30f(%edx)
8010d85a:	75 3c                	jne    8010d898 <unsafe_enable_pid_controller+0x58>
8010d85c:	80 ba 0e 03 00 00 00 	cmpb   $0x0,0x30e(%edx)
8010d863:	74 33                	je     8010d898 <unsafe_enable_pid_controller+0x58>
8010d865:	c6 82 0f 03 00 00 01 	movb   $0x1,0x30f(%edx)
8010d86c:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010d871:	eb 11                	jmp    8010d884 <unsafe_enable_pid_controller+0x44>
8010d873:	90                   	nop
8010d874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d878:	05 88 03 00 00       	add    $0x388,%eax
8010d87d:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d882:	74 14                	je     8010d898 <unsafe_enable_pid_controller+0x58>
8010d884:	3b 10                	cmp    (%eax),%edx
8010d886:	75 f0                	jne    8010d878 <unsafe_enable_pid_controller+0x38>
8010d888:	c6 40 06 01          	movb   $0x1,0x6(%eax)
8010d88c:	05 88 03 00 00       	add    $0x388,%eax
8010d891:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d896:	75 ec                	jne    8010d884 <unsafe_enable_pid_controller+0x44>
8010d898:	31 c0                	xor    %eax,%eax
8010d89a:	5d                   	pop    %ebp
8010d89b:	c3                   	ret    
8010d89c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d8a1:	5d                   	pop    %ebp
8010d8a2:	c3                   	ret    
8010d8a3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010d8a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010d8b0 <unsafe_disable_pid_controller>:
8010d8b0:	55                   	push   %ebp
8010d8b1:	89 e5                	mov    %esp,%ebp
8010d8b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010d8b6:	85 c9                	test   %ecx,%ecx
8010d8b8:	74 2e                	je     8010d8e8 <unsafe_disable_pid_controller+0x38>
8010d8ba:	80 b9 0f 03 00 00 00 	cmpb   $0x0,0x30f(%ecx)
8010d8c1:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010d8c6:	89 c2                	mov    %eax,%edx
8010d8c8:	75 14                	jne    8010d8de <unsafe_disable_pid_controller+0x2e>
8010d8ca:	eb 24                	jmp    8010d8f0 <unsafe_disable_pid_controller+0x40>
8010d8cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d8d0:	81 c2 88 03 00 00    	add    $0x388,%edx
8010d8d6:	81 fa 5c a9 14 80    	cmp    $0x8014a95c,%edx
8010d8dc:	74 1a                	je     8010d8f8 <unsafe_disable_pid_controller+0x48>
8010d8de:	3b 0a                	cmp    (%edx),%ecx
8010d8e0:	75 ee                	jne    8010d8d0 <unsafe_disable_pid_controller+0x20>
8010d8e2:	80 7a 07 00          	cmpb   $0x0,0x7(%edx)
8010d8e6:	74 e8                	je     8010d8d0 <unsafe_disable_pid_controller+0x20>
8010d8e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d8ed:	5d                   	pop    %ebp
8010d8ee:	c3                   	ret    
8010d8ef:	90                   	nop
8010d8f0:	31 c0                	xor    %eax,%eax
8010d8f2:	5d                   	pop    %ebp
8010d8f3:	c3                   	ret    
8010d8f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d8f8:	c6 81 0f 03 00 00 00 	movb   $0x0,0x30f(%ecx)
8010d8ff:	eb 13                	jmp    8010d914 <unsafe_disable_pid_controller+0x64>
8010d901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010d908:	05 88 03 00 00       	add    $0x388,%eax
8010d90d:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d912:	74 dc                	je     8010d8f0 <unsafe_disable_pid_controller+0x40>
8010d914:	3b 08                	cmp    (%eax),%ecx
8010d916:	75 f0                	jne    8010d908 <unsafe_disable_pid_controller+0x58>
8010d918:	c6 40 06 00          	movb   $0x0,0x6(%eax)
8010d91c:	eb ea                	jmp    8010d908 <unsafe_disable_pid_controller+0x58>
8010d91e:	66 90                	xchg   %ax,%ax

8010d920 <enable_pid_controller>:
8010d920:	55                   	push   %ebp
8010d921:	89 e5                	mov    %esp,%ebp
8010d923:	53                   	push   %ebx
8010d924:	83 ec 10             	sub    $0x10,%esp
8010d927:	68 20 c4 13 80       	push   $0x8013c420
8010d92c:	e8 3f 89 ff ff       	call   80106270 <acquire>
8010d931:	58                   	pop    %eax
8010d932:	ff 75 08             	pushl  0x8(%ebp)
8010d935:	e8 06 ff ff ff       	call   8010d840 <unsafe_enable_pid_controller>
8010d93a:	89 c3                	mov    %eax,%ebx
8010d93c:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d943:	e8 48 8a ff ff       	call   80106390 <release>
8010d948:	89 d8                	mov    %ebx,%eax
8010d94a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d94d:	c9                   	leave  
8010d94e:	c3                   	ret    
8010d94f:	90                   	nop

8010d950 <disable_pid_controller>:
8010d950:	55                   	push   %ebp
8010d951:	89 e5                	mov    %esp,%ebp
8010d953:	53                   	push   %ebx
8010d954:	83 ec 10             	sub    $0x10,%esp
8010d957:	68 20 c4 13 80       	push   $0x8013c420
8010d95c:	e8 0f 89 ff ff       	call   80106270 <acquire>
8010d961:	58                   	pop    %eax
8010d962:	ff 75 08             	pushl  0x8(%ebp)
8010d965:	e8 46 ff ff ff       	call   8010d8b0 <unsafe_disable_pid_controller>
8010d96a:	89 c3                	mov    %eax,%ebx
8010d96c:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010d973:	e8 18 8a ff ff       	call   80106390 <release>
8010d978:	89 d8                	mov    %ebx,%eax
8010d97a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010d97d:	c9                   	leave  
8010d97e:	c3                   	ret    
8010d97f:	90                   	nop

8010d980 <set_cpu_id>:
8010d980:	55                   	push   %ebp
8010d981:	89 e5                	mov    %esp,%ebp
8010d983:	8b 55 08             	mov    0x8(%ebp),%edx
8010d986:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010d989:	85 d2                	test   %edx,%edx
8010d98b:	74 14                	je     8010d9a1 <set_cpu_id+0x21>
8010d98d:	31 c0                	xor    %eax,%eax
8010d98f:	83 f9 09             	cmp    $0x9,%ecx
8010d992:	77 0b                	ja     8010d99f <set_cpu_id+0x1f>
8010d994:	88 8a 30 03 00 00    	mov    %cl,0x330(%edx)
8010d99a:	b8 01 00 00 00       	mov    $0x1,%eax
8010d99f:	5d                   	pop    %ebp
8010d9a0:	c3                   	ret    
8010d9a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010d9a6:	5d                   	pop    %ebp
8010d9a7:	c3                   	ret    
8010d9a8:	90                   	nop
8010d9a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010d9b0 <unsafe_enable_set_controller>:
8010d9b0:	55                   	push   %ebp
8010d9b1:	89 e5                	mov    %esp,%ebp
8010d9b3:	8b 55 08             	mov    0x8(%ebp),%edx
8010d9b6:	85 d2                	test   %edx,%edx
8010d9b8:	74 52                	je     8010da0c <unsafe_enable_set_controller+0x5c>
8010d9ba:	80 ba 14 03 00 00 01 	cmpb   $0x1,0x314(%edx)
8010d9c1:	74 49                	je     8010da0c <unsafe_enable_set_controller+0x5c>
8010d9c3:	80 ba 11 03 00 00 00 	cmpb   $0x0,0x311(%edx)
8010d9ca:	75 3c                	jne    8010da08 <unsafe_enable_set_controller+0x58>
8010d9cc:	80 ba 10 03 00 00 00 	cmpb   $0x0,0x310(%edx)
8010d9d3:	74 33                	je     8010da08 <unsafe_enable_set_controller+0x58>
8010d9d5:	c6 82 11 03 00 00 01 	movb   $0x1,0x311(%edx)
8010d9dc:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010d9e1:	eb 11                	jmp    8010d9f4 <unsafe_enable_set_controller+0x44>
8010d9e3:	90                   	nop
8010d9e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010d9e8:	05 88 03 00 00       	add    $0x388,%eax
8010d9ed:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010d9f2:	74 14                	je     8010da08 <unsafe_enable_set_controller+0x58>
8010d9f4:	3b 10                	cmp    (%eax),%edx
8010d9f6:	75 f0                	jne    8010d9e8 <unsafe_enable_set_controller+0x38>
8010d9f8:	c6 40 08 01          	movb   $0x1,0x8(%eax)
8010d9fc:	05 88 03 00 00       	add    $0x388,%eax
8010da01:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010da06:	75 ec                	jne    8010d9f4 <unsafe_enable_set_controller+0x44>
8010da08:	31 c0                	xor    %eax,%eax
8010da0a:	5d                   	pop    %ebp
8010da0b:	c3                   	ret    
8010da0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010da11:	5d                   	pop    %ebp
8010da12:	c3                   	ret    
8010da13:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010da19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010da20 <unsafe_disable_set_controller>:
8010da20:	55                   	push   %ebp
8010da21:	89 e5                	mov    %esp,%ebp
8010da23:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010da26:	85 c9                	test   %ecx,%ecx
8010da28:	74 2e                	je     8010da58 <unsafe_disable_set_controller+0x38>
8010da2a:	80 b9 11 03 00 00 00 	cmpb   $0x0,0x311(%ecx)
8010da31:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010da36:	89 c2                	mov    %eax,%edx
8010da38:	75 14                	jne    8010da4e <unsafe_disable_set_controller+0x2e>
8010da3a:	eb 24                	jmp    8010da60 <unsafe_disable_set_controller+0x40>
8010da3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010da40:	81 c2 88 03 00 00    	add    $0x388,%edx
8010da46:	81 fa 5c a9 14 80    	cmp    $0x8014a95c,%edx
8010da4c:	74 1a                	je     8010da68 <unsafe_disable_set_controller+0x48>
8010da4e:	3b 0a                	cmp    (%edx),%ecx
8010da50:	75 ee                	jne    8010da40 <unsafe_disable_set_controller+0x20>
8010da52:	80 7a 09 00          	cmpb   $0x0,0x9(%edx)
8010da56:	74 e8                	je     8010da40 <unsafe_disable_set_controller+0x20>
8010da58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010da5d:	5d                   	pop    %ebp
8010da5e:	c3                   	ret    
8010da5f:	90                   	nop
8010da60:	31 c0                	xor    %eax,%eax
8010da62:	5d                   	pop    %ebp
8010da63:	c3                   	ret    
8010da64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010da68:	c6 81 11 03 00 00 00 	movb   $0x0,0x311(%ecx)
8010da6f:	eb 13                	jmp    8010da84 <unsafe_disable_set_controller+0x64>
8010da71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010da78:	05 88 03 00 00       	add    $0x388,%eax
8010da7d:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010da82:	74 dc                	je     8010da60 <unsafe_disable_set_controller+0x40>
8010da84:	3b 08                	cmp    (%eax),%ecx
8010da86:	75 f0                	jne    8010da78 <unsafe_disable_set_controller+0x58>
8010da88:	c6 40 08 00          	movb   $0x0,0x8(%eax)
8010da8c:	eb ea                	jmp    8010da78 <unsafe_disable_set_controller+0x58>
8010da8e:	66 90                	xchg   %ax,%ax

8010da90 <enable_set_controller>:
8010da90:	55                   	push   %ebp
8010da91:	89 e5                	mov    %esp,%ebp
8010da93:	53                   	push   %ebx
8010da94:	83 ec 10             	sub    $0x10,%esp
8010da97:	68 20 c4 13 80       	push   $0x8013c420
8010da9c:	e8 cf 87 ff ff       	call   80106270 <acquire>
8010daa1:	58                   	pop    %eax
8010daa2:	ff 75 08             	pushl  0x8(%ebp)
8010daa5:	e8 06 ff ff ff       	call   8010d9b0 <unsafe_enable_set_controller>
8010daaa:	89 c3                	mov    %eax,%ebx
8010daac:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010dab3:	e8 d8 88 ff ff       	call   80106390 <release>
8010dab8:	89 d8                	mov    %ebx,%eax
8010daba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010dabd:	c9                   	leave  
8010dabe:	c3                   	ret    
8010dabf:	90                   	nop

8010dac0 <disable_set_controller>:
8010dac0:	55                   	push   %ebp
8010dac1:	89 e5                	mov    %esp,%ebp
8010dac3:	53                   	push   %ebx
8010dac4:	83 ec 10             	sub    $0x10,%esp
8010dac7:	68 20 c4 13 80       	push   $0x8013c420
8010dacc:	e8 9f 87 ff ff       	call   80106270 <acquire>
8010dad1:	58                   	pop    %eax
8010dad2:	ff 75 08             	pushl  0x8(%ebp)
8010dad5:	e8 46 ff ff ff       	call   8010da20 <unsafe_disable_set_controller>
8010dada:	89 c3                	mov    %eax,%ebx
8010dadc:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010dae3:	e8 a8 88 ff ff       	call   80106390 <release>
8010dae8:	89 d8                	mov    %ebx,%eax
8010daea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010daed:	c9                   	leave  
8010daee:	c3                   	ret    
8010daef:	90                   	nop

8010daf0 <frz_grp>:
8010daf0:	55                   	push   %ebp
8010daf1:	89 e5                	mov    %esp,%ebp
8010daf3:	8b 55 08             	mov    0x8(%ebp),%edx
8010daf6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010daf9:	85 d2                	test   %edx,%edx
8010dafb:	74 20                	je     8010db1d <frz_grp+0x2d>
8010dafd:	31 c0                	xor    %eax,%eax
8010daff:	83 f9 01             	cmp    $0x1,%ecx
8010db02:	76 0c                	jbe    8010db10 <frz_grp+0x20>
8010db04:	5d                   	pop    %ebp
8010db05:	c3                   	ret    
8010db06:	8d 76 00             	lea    0x0(%esi),%esi
8010db09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010db10:	89 8a 34 03 00 00    	mov    %ecx,0x334(%edx)
8010db16:	b8 01 00 00 00       	mov    $0x1,%eax
8010db1b:	5d                   	pop    %ebp
8010db1c:	c3                   	ret    
8010db1d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010db22:	5d                   	pop    %ebp
8010db23:	c3                   	ret    
8010db24:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010db2a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

8010db30 <set_max_mem>:
8010db30:	55                   	push   %ebp
8010db31:	89 e5                	mov    %esp,%ebp
8010db33:	8b 55 08             	mov    0x8(%ebp),%edx
8010db36:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010db39:	85 d2                	test   %edx,%edx
8010db3b:	74 1f                	je     8010db5c <set_max_mem+0x2c>
8010db3d:	31 c0                	xor    %eax,%eax
8010db3f:	81 f9 00 00 00 80    	cmp    $0x80000000,%ecx
8010db45:	77 13                	ja     8010db5a <set_max_mem+0x2a>
8010db47:	3b 8a 54 03 00 00    	cmp    0x354(%edx),%ecx
8010db4d:	72 0b                	jb     8010db5a <set_max_mem+0x2a>
8010db4f:	89 8a 50 03 00 00    	mov    %ecx,0x350(%edx)
8010db55:	b8 01 00 00 00       	mov    $0x1,%eax
8010db5a:	5d                   	pop    %ebp
8010db5b:	c3                   	ret    
8010db5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010db61:	5d                   	pop    %ebp
8010db62:	c3                   	ret    
8010db63:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010db69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010db70 <set_protect_mem>:
8010db70:	55                   	push   %ebp
8010db71:	89 e5                	mov    %esp,%ebp
8010db73:	57                   	push   %edi
8010db74:	56                   	push   %esi
8010db75:	53                   	push   %ebx
8010db76:	83 ec 0c             	sub    $0xc,%esp
8010db79:	8b 75 08             	mov    0x8(%ebp),%esi
8010db7c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010db7f:	2b 9e 3c 03 00 00    	sub    0x33c(%esi),%ebx
8010db85:	85 db                	test   %ebx,%ebx
8010db87:	7e 2f                	jle    8010dbb8 <set_protect_mem+0x48>
8010db89:	89 d8                	mov    %ebx,%eax
8010db8b:	2b 86 58 03 00 00    	sub    0x358(%esi),%eax
8010db91:	83 ec 0c             	sub    $0xc,%esp
8010db94:	50                   	push   %eax
8010db95:	e8 86 53 ff ff       	call   80102f20 <increse_protect_counter>
8010db9a:	83 c4 10             	add    $0x10,%esp
8010db9d:	85 c0                	test   %eax,%eax
8010db9f:	89 c7                	mov    %eax,%edi
8010dba1:	75 45                	jne    8010dbe8 <set_protect_mem+0x78>
8010dba3:	89 9e 58 03 00 00    	mov    %ebx,0x358(%esi)
8010dba9:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010dbac:	89 f8                	mov    %edi,%eax
8010dbae:	5b                   	pop    %ebx
8010dbaf:	5e                   	pop    %esi
8010dbb0:	5f                   	pop    %edi
8010dbb1:	5d                   	pop    %ebp
8010dbb2:	c3                   	ret    
8010dbb3:	90                   	nop
8010dbb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010dbb8:	8b 86 58 03 00 00    	mov    0x358(%esi),%eax
8010dbbe:	31 ff                	xor    %edi,%edi
8010dbc0:	85 c0                	test   %eax,%eax
8010dbc2:	74 e5                	je     8010dba9 <set_protect_mem+0x39>
8010dbc4:	83 ec 0c             	sub    $0xc,%esp
8010dbc7:	50                   	push   %eax
8010dbc8:	e8 f3 52 ff ff       	call   80102ec0 <decrese_protect_counter>
8010dbcd:	c7 86 58 03 00 00 00 	movl   $0x0,0x358(%esi)
8010dbd4:	00 00 00 
8010dbd7:	83 c4 10             	add    $0x10,%esp
8010dbda:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010dbdd:	89 f8                	mov    %edi,%eax
8010dbdf:	5b                   	pop    %ebx
8010dbe0:	5e                   	pop    %esi
8010dbe1:	5f                   	pop    %edi
8010dbe2:	5d                   	pop    %ebp
8010dbe3:	c3                   	ret    
8010dbe4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010dbe8:	bf ff ff ff ff       	mov    $0xffffffff,%edi
8010dbed:	eb ba                	jmp    8010dba9 <set_protect_mem+0x39>
8010dbef:	90                   	nop

8010dbf0 <set_min_mem.part.10>:
8010dbf0:	55                   	push   %ebp
8010dbf1:	89 e5                	mov    %esp,%ebp
8010dbf3:	56                   	push   %esi
8010dbf4:	53                   	push   %ebx
8010dbf5:	89 c3                	mov    %eax,%ebx
8010dbf7:	8d 82 ff 0f 00 00    	lea    0xfff(%edx),%eax
8010dbfd:	89 d6                	mov    %edx,%esi
8010dbff:	83 ec 08             	sub    $0x8,%esp
8010dc02:	c1 e8 0c             	shr    $0xc,%eax
8010dc05:	50                   	push   %eax
8010dc06:	53                   	push   %ebx
8010dc07:	e8 64 ff ff ff       	call   8010db70 <set_protect_mem>
8010dc0c:	83 c4 10             	add    $0x10,%esp
8010dc0f:	85 c0                	test   %eax,%eax
8010dc11:	75 15                	jne    8010dc28 <set_min_mem.part.10+0x38>
8010dc13:	89 b3 54 03 00 00    	mov    %esi,0x354(%ebx)
8010dc19:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010dc1c:	b8 01 00 00 00       	mov    $0x1,%eax
8010dc21:	5b                   	pop    %ebx
8010dc22:	5e                   	pop    %esi
8010dc23:	5d                   	pop    %ebp
8010dc24:	c3                   	ret    
8010dc25:	8d 76 00             	lea    0x0(%esi),%esi
8010dc28:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010dc2b:	31 c0                	xor    %eax,%eax
8010dc2d:	5b                   	pop    %ebx
8010dc2e:	5e                   	pop    %esi
8010dc2f:	5d                   	pop    %ebp
8010dc30:	c3                   	ret    
8010dc31:	eb 0d                	jmp    8010dc40 <set_min_mem>
8010dc33:	90                   	nop
8010dc34:	90                   	nop
8010dc35:	90                   	nop
8010dc36:	90                   	nop
8010dc37:	90                   	nop
8010dc38:	90                   	nop
8010dc39:	90                   	nop
8010dc3a:	90                   	nop
8010dc3b:	90                   	nop
8010dc3c:	90                   	nop
8010dc3d:	90                   	nop
8010dc3e:	90                   	nop
8010dc3f:	90                   	nop

8010dc40 <set_min_mem>:
8010dc40:	55                   	push   %ebp
8010dc41:	89 e5                	mov    %esp,%ebp
8010dc43:	8b 4d 08             	mov    0x8(%ebp),%ecx
8010dc46:	8b 55 0c             	mov    0xc(%ebp),%edx
8010dc49:	85 c9                	test   %ecx,%ecx
8010dc4b:	74 20                	je     8010dc6d <set_min_mem+0x2d>
8010dc4d:	31 c0                	xor    %eax,%eax
8010dc4f:	81 fa 00 00 00 80    	cmp    $0x80000000,%edx
8010dc55:	77 08                	ja     8010dc5f <set_min_mem+0x1f>
8010dc57:	3b 91 50 03 00 00    	cmp    0x350(%ecx),%edx
8010dc5d:	76 09                	jbe    8010dc68 <set_min_mem+0x28>
8010dc5f:	5d                   	pop    %ebp
8010dc60:	c3                   	ret    
8010dc61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010dc68:	5d                   	pop    %ebp
8010dc69:	89 c8                	mov    %ecx,%eax
8010dc6b:	eb 83                	jmp    8010dbf0 <set_min_mem.part.10>
8010dc6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010dc72:	5d                   	pop    %ebp
8010dc73:	c3                   	ret    
8010dc74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010dc7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

8010dc80 <cgroup_delete>:
8010dc80:	55                   	push   %ebp
8010dc81:	89 e5                	mov    %esp,%ebp
8010dc83:	56                   	push   %esi
8010dc84:	53                   	push   %ebx
8010dc85:	8b 75 0c             	mov    0xc(%ebp),%esi
8010dc88:	83 ec 0c             	sub    $0xc,%esp
8010dc8b:	68 20 c4 13 80       	push   $0x8013c420
8010dc90:	e8 db 85 ff ff       	call   80106270 <acquire>
8010dc95:	8b 45 08             	mov    0x8(%ebp),%eax
8010dc98:	e8 83 f1 ff ff       	call   8010ce20 <unsafe_get_cgroup_by_path>
8010dc9d:	83 c4 10             	add    $0x10,%esp
8010dca0:	85 c0                	test   %eax,%eax
8010dca2:	0f 84 ec 00 00 00    	je     8010dd94 <cgroup_delete+0x114>
8010dca8:	83 ec 08             	sub    $0x8,%esp
8010dcab:	89 c3                	mov    %eax,%ebx
8010dcad:	68 d1 f1 10 80       	push   $0x8010f1d1
8010dcb2:	56                   	push   %esi
8010dcb3:	e8 c8 88 ff ff       	call   80106580 <strcmp>
8010dcb8:	83 c4 10             	add    $0x10,%esp
8010dcbb:	81 fb 54 c4 13 80    	cmp    $0x8013c454,%ebx
8010dcc1:	74 08                	je     8010dccb <cgroup_delete+0x4b>
8010dcc3:	85 c0                	test   %eax,%eax
8010dcc5:	0f 84 ad 00 00 00    	je     8010dd78 <cgroup_delete+0xf8>
8010dccb:	83 ec 08             	sub    $0x8,%esp
8010dcce:	68 4f f1 10 80       	push   $0x8010f14f
8010dcd3:	56                   	push   %esi
8010dcd4:	e8 a7 88 ff ff       	call   80106580 <strcmp>
8010dcd9:	83 c4 10             	add    $0x10,%esp
8010dcdc:	81 fb 54 c4 13 80    	cmp    $0x8013c454,%ebx
8010dce2:	75 08                	jne    8010dcec <cgroup_delete+0x6c>
8010dce4:	85 c0                	test   %eax,%eax
8010dce6:	0f 84 8c 00 00 00    	je     8010dd78 <cgroup_delete+0xf8>
8010dcec:	8b 93 24 03 00 00    	mov    0x324(%ebx),%edx
8010dcf2:	85 d2                	test   %edx,%edx
8010dcf4:	0f 85 7e 00 00 00    	jne    8010dd78 <cgroup_delete+0xf8>
8010dcfa:	8b 83 04 03 00 00    	mov    0x304(%ebx),%eax
8010dd00:	85 c0                	test   %eax,%eax
8010dd02:	74 54                	je     8010dd58 <cgroup_delete+0xd8>
8010dd04:	81 fb 54 c4 13 80    	cmp    $0x8013c454,%ebx
8010dd0a:	75 6c                	jne    8010dd78 <cgroup_delete+0xf8>
8010dd0c:	8b 83 08 03 00 00    	mov    0x308(%ebx),%eax
8010dd12:	c6 03 00             	movb   $0x0,(%ebx)
8010dd15:	8b 93 00 02 00 00    	mov    0x200(%ebx),%edx
8010dd1b:	85 c0                	test   %eax,%eax
8010dd1d:	74 1d                	je     8010dd3c <cgroup_delete+0xbc>
8010dd1f:	90                   	nop
8010dd20:	83 a8 24 03 00 00 01 	subl   $0x1,0x324(%eax)
8010dd27:	85 d2                	test   %edx,%edx
8010dd29:	7e 07                	jle    8010dd32 <cgroup_delete+0xb2>
8010dd2b:	83 80 28 03 00 00 01 	addl   $0x1,0x328(%eax)
8010dd32:	8b 80 08 03 00 00    	mov    0x308(%eax),%eax
8010dd38:	85 c0                	test   %eax,%eax
8010dd3a:	75 e4                	jne    8010dd20 <cgroup_delete+0xa0>
8010dd3c:	83 ec 0c             	sub    $0xc,%esp
8010dd3f:	68 20 c4 13 80       	push   $0x8013c420
8010dd44:	e8 47 86 ff ff       	call   80106390 <release>
8010dd49:	83 c4 10             	add    $0x10,%esp
8010dd4c:	31 c0                	xor    %eax,%eax
8010dd4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010dd51:	5b                   	pop    %ebx
8010dd52:	5e                   	pop    %esi
8010dd53:	5d                   	pop    %ebp
8010dd54:	c3                   	ret    
8010dd55:	8d 76 00             	lea    0x0(%esi),%esi
8010dd58:	81 fb 54 c4 13 80    	cmp    $0x8013c454,%ebx
8010dd5e:	74 ac                	je     8010dd0c <cgroup_delete+0x8c>
8010dd60:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
8010dd67:	74 a3                	je     8010dd0c <cgroup_delete+0x8c>
8010dd69:	31 d2                	xor    %edx,%edx
8010dd6b:	89 d8                	mov    %ebx,%eax
8010dd6d:	e8 7e fe ff ff       	call   8010dbf0 <set_min_mem.part.10>
8010dd72:	eb 98                	jmp    8010dd0c <cgroup_delete+0x8c>
8010dd74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010dd78:	83 ec 0c             	sub    $0xc,%esp
8010dd7b:	68 20 c4 13 80       	push   $0x8013c420
8010dd80:	e8 0b 86 ff ff       	call   80106390 <release>
8010dd85:	83 c4 10             	add    $0x10,%esp
8010dd88:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010dd8b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
8010dd90:	5b                   	pop    %ebx
8010dd91:	5e                   	pop    %esi
8010dd92:	5d                   	pop    %ebp
8010dd93:	c3                   	ret    
8010dd94:	83 ec 0c             	sub    $0xc,%esp
8010dd97:	68 20 c4 13 80       	push   $0x8013c420
8010dd9c:	e8 ef 85 ff ff       	call   80106390 <release>
8010dda1:	83 c4 10             	add    $0x10,%esp
8010dda4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010dda9:	eb a3                	jmp    8010dd4e <cgroup_delete+0xce>
8010ddab:	90                   	nop
8010ddac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

8010ddb0 <cgroup_initialize>:
8010ddb0:	55                   	push   %ebp
8010ddb1:	89 e5                	mov    %esp,%ebp
8010ddb3:	53                   	push   %ebx
8010ddb4:	83 ec 04             	sub    $0x4,%esp
8010ddb7:	8b 45 10             	mov    0x10(%ebp),%eax
8010ddba:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010ddbd:	85 c0                	test   %eax,%eax
8010ddbf:	0f 84 cb 01 00 00    	je     8010df90 <cgroup_initialize+0x1e0>
8010ddc5:	89 83 08 03 00 00    	mov    %eax,0x308(%ebx)
8010ddcb:	80 b8 0d 03 00 00 00 	cmpb   $0x0,0x30d(%eax)
8010ddd2:	0f 95 83 0c 03 00 00 	setne  0x30c(%ebx)
8010ddd9:	80 b8 0f 03 00 00 00 	cmpb   $0x0,0x30f(%eax)
8010dde0:	0f 95 83 0e 03 00 00 	setne  0x30e(%ebx)
8010dde7:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010ddec:	74 0d                	je     8010ddfb <cgroup_initialize+0x4b>
8010ddee:	80 b8 11 03 00 00 00 	cmpb   $0x0,0x311(%eax)
8010ddf5:	0f 84 85 01 00 00    	je     8010df80 <cgroup_initialize+0x1d0>
8010ddfb:	c6 83 10 03 00 00 01 	movb   $0x1,0x310(%ebx)
8010de02:	80 b8 13 03 00 00 00 	cmpb   $0x0,0x313(%eax)
8010de09:	c6 83 0f 03 00 00 00 	movb   $0x0,0x30f(%ebx)
8010de10:	c6 83 0d 03 00 00 00 	movb   $0x0,0x30d(%ebx)
8010de17:	c6 83 11 03 00 00 00 	movb   $0x0,0x311(%ebx)
8010de1e:	c6 83 13 03 00 00 00 	movb   $0x0,0x313(%ebx)
8010de25:	8b 55 0c             	mov    0xc(%ebp),%edx
8010de28:	0f 95 83 12 03 00 00 	setne  0x312(%ebx)
8010de2f:	8b 80 20 03 00 00    	mov    0x320(%eax),%eax
8010de35:	83 c0 01             	add    $0x1,%eax
8010de38:	89 83 20 03 00 00    	mov    %eax,0x320(%ebx)
8010de3e:	89 d8                	mov    %ebx,%eax
8010de40:	e8 4b f0 ff ff       	call   8010ce90 <unsafe_set_cgroup_dir_path>
8010de45:	81 bb 54 03 00 00 00 	cmpl   $0x80000000,0x354(%ebx)
8010de4c:	00 00 80 
8010de4f:	c7 83 00 02 00 00 00 	movl   $0x0,0x200(%ebx)
8010de56:	00 00 00 
8010de59:	c7 83 04 03 00 00 00 	movl   $0x0,0x304(%ebx)
8010de60:	00 00 00 
8010de63:	c6 83 14 03 00 00 00 	movb   $0x0,0x314(%ebx)
8010de6a:	c7 83 38 03 00 00 00 	movl   $0x0,0x338(%ebx)
8010de71:	00 00 00 
8010de74:	c7 83 18 03 00 00 40 	movl   $0x40,0x318(%ebx)
8010de7b:	00 00 00 
8010de7e:	c7 83 1c 03 00 00 40 	movl   $0x40,0x31c(%ebx)
8010de85:	00 00 00 
8010de88:	c7 83 24 03 00 00 00 	movl   $0x0,0x324(%ebx)
8010de8f:	00 00 00 
8010de92:	c7 83 28 03 00 00 00 	movl   $0x0,0x328(%ebx)
8010de99:	00 00 00 
8010de9c:	c7 83 2c 03 00 00 40 	movl   $0x40,0x32c(%ebx)
8010dea3:	00 00 00 
8010dea6:	c6 83 30 03 00 00 00 	movb   $0x0,0x330(%ebx)
8010dead:	c7 83 34 03 00 00 00 	movl   $0x0,0x334(%ebx)
8010deb4:	00 00 00 
8010deb7:	c7 83 40 03 00 00 00 	movl   $0x0,0x340(%ebx)
8010debe:	00 00 00 
8010dec1:	c7 83 44 03 00 00 00 	movl   $0x0,0x344(%ebx)
8010dec8:	00 00 00 
8010decb:	c7 83 48 03 00 00 00 	movl   $0x0,0x348(%ebx)
8010ded2:	00 00 00 
8010ded5:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%ebx)
8010dedc:	00 00 00 
8010dedf:	77 0a                	ja     8010deeb <cgroup_initialize+0x13b>
8010dee1:	c7 83 50 03 00 00 00 	movl   $0x80000000,0x350(%ebx)
8010dee8:	00 00 80 
8010deeb:	89 d8                	mov    %ebx,%eax
8010deed:	31 d2                	xor    %edx,%edx
8010deef:	e8 fc fc ff ff       	call   8010dbf0 <set_min_mem.part.10>
8010def4:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%ebx)
8010defb:	00 00 00 
8010defe:	c7 83 58 03 00 00 00 	movl   $0x0,0x358(%ebx)
8010df05:	00 00 00 
8010df08:	c7 83 74 03 00 00 00 	movl   $0x0,0x374(%ebx)
8010df0f:	00 00 00 
8010df12:	c7 83 68 03 00 00 00 	movl   $0x0,0x368(%ebx)
8010df19:	00 00 00 
8010df1c:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%ebx)
8010df23:	00 00 00 
8010df26:	c7 83 60 03 00 00 00 	movl   $0x0,0x360(%ebx)
8010df2d:	00 00 00 
8010df30:	c7 83 64 03 00 00 00 	movl   $0x0,0x364(%ebx)
8010df37:	00 00 00 
8010df3a:	c7 83 70 03 00 00 ff 	movl   $0xffffffff,0x370(%ebx)
8010df41:	ff ff ff 
8010df44:	c7 83 6c 03 00 00 a0 	movl   $0x186a0,0x36c(%ebx)
8010df4b:	86 01 00 
8010df4e:	c7 83 78 03 00 00 00 	movl   $0x0,0x378(%ebx)
8010df55:	00 00 00 
8010df58:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%ebx)
8010df5f:	00 00 00 
8010df62:	c7 83 80 03 00 00 00 	movl   $0x0,0x380(%ebx)
8010df69:	00 00 00 
8010df6c:	c6 83 84 03 00 00 00 	movb   $0x0,0x384(%ebx)
8010df73:	83 c4 04             	add    $0x4,%esp
8010df76:	5b                   	pop    %ebx
8010df77:	5d                   	pop    %ebp
8010df78:	c3                   	ret    
8010df79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010df80:	c6 83 10 03 00 00 00 	movb   $0x0,0x310(%ebx)
8010df87:	e9 76 fe ff ff       	jmp    8010de02 <cgroup_initialize+0x52>
8010df8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010df90:	c6 83 0c 03 00 00 01 	movb   $0x1,0x30c(%ebx)
8010df97:	c6 83 0d 03 00 00 01 	movb   $0x1,0x30d(%ebx)
8010df9e:	c7 83 20 03 00 00 00 	movl   $0x0,0x320(%ebx)
8010dfa5:	00 00 00 
8010dfa8:	c6 03 00             	movb   $0x0,(%ebx)
8010dfab:	c7 83 08 03 00 00 00 	movl   $0x0,0x308(%ebx)
8010dfb2:	00 00 00 
8010dfb5:	c6 83 0e 03 00 00 01 	movb   $0x1,0x30e(%ebx)
8010dfbc:	c6 83 0f 03 00 00 01 	movb   $0x1,0x30f(%ebx)
8010dfc3:	c6 83 10 03 00 00 01 	movb   $0x1,0x310(%ebx)
8010dfca:	c6 83 11 03 00 00 00 	movb   $0x0,0x311(%ebx)
8010dfd1:	c6 83 12 03 00 00 01 	movb   $0x1,0x312(%ebx)
8010dfd8:	c6 83 13 03 00 00 01 	movb   $0x1,0x313(%ebx)
8010dfdf:	e9 61 fe ff ff       	jmp    8010de45 <cgroup_initialize+0x95>
8010dfe4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010dfea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi

8010dff0 <cgroup_create>:
8010dff0:	55                   	push   %ebp
8010dff1:	89 e5                	mov    %esp,%ebp
8010dff3:	57                   	push   %edi
8010dff4:	56                   	push   %esi
8010dff5:	53                   	push   %ebx
8010dff6:	8d 9d e8 f9 ff ff    	lea    -0x618(%ebp),%ebx
8010dffc:	8d b5 e8 fb ff ff    	lea    -0x418(%ebp),%esi
8010e002:	81 ec 14 06 00 00    	sub    $0x614,%esp
8010e008:	ff 75 08             	pushl  0x8(%ebp)
8010e00b:	53                   	push   %ebx
8010e00c:	e8 af ec ff ff       	call   8010ccc0 <format_path>
8010e011:	5a                   	pop    %edx
8010e012:	59                   	pop    %ecx
8010e013:	56                   	push   %esi
8010e014:	53                   	push   %ebx
8010e015:	e8 86 e8 ff ff       	call   8010c8a0 <get_dir_name>
8010e01a:	83 c4 10             	add    $0x10,%esp
8010e01d:	85 c0                	test   %eax,%eax
8010e01f:	0f 88 14 01 00 00    	js     8010e139 <cgroup_create+0x149>
8010e025:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
8010e02b:	83 ec 08             	sub    $0x8,%esp
8010e02e:	50                   	push   %eax
8010e02f:	53                   	push   %ebx
8010e030:	e8 cb e7 ff ff       	call   8010c800 <get_base_name>
8010e035:	83 c4 10             	add    $0x10,%esp
8010e038:	85 c0                	test   %eax,%eax
8010e03a:	0f 88 f9 00 00 00    	js     8010e139 <cgroup_create+0x149>
8010e040:	83 ec 0c             	sub    $0xc,%esp
8010e043:	68 20 c4 13 80       	push   $0x8013c420
8010e048:	e8 23 82 ff ff       	call   80106270 <acquire>
8010e04d:	89 f0                	mov    %esi,%eax
8010e04f:	e8 cc ed ff ff       	call   8010ce20 <unsafe_get_cgroup_by_path>
8010e054:	83 c4 10             	add    $0x10,%esp
8010e057:	85 c0                	test   %eax,%eax
8010e059:	89 c6                	mov    %eax,%esi
8010e05b:	0f 84 c8 00 00 00    	je     8010e129 <cgroup_create+0x139>
8010e061:	89 c2                	mov    %eax,%edx
8010e063:	31 c9                	xor    %ecx,%ecx
8010e065:	8d 76 00             	lea    0x0(%esi),%esi
8010e068:	39 8a 1c 03 00 00    	cmp    %ecx,0x31c(%edx)
8010e06e:	0f 86 cf 00 00 00    	jbe    8010e143 <cgroup_create+0x153>
8010e074:	8b 82 24 03 00 00    	mov    0x324(%edx),%eax
8010e07a:	39 82 18 03 00 00    	cmp    %eax,0x318(%edx)
8010e080:	0f 84 d6 00 00 00    	je     8010e15c <cgroup_create+0x16c>
8010e086:	8b 92 08 03 00 00    	mov    0x308(%edx),%edx
8010e08c:	83 c1 01             	add    $0x1,%ecx
8010e08f:	85 d2                	test   %edx,%edx
8010e091:	75 d5                	jne    8010e068 <cgroup_create+0x78>
8010e093:	ba dc c7 13 80       	mov    $0x8013c7dc,%edx
8010e098:	b9 01 00 00 00       	mov    $0x1,%ecx
8010e09d:	eb 0f                	jmp    8010e0ae <cgroup_create+0xbe>
8010e09f:	90                   	nop
8010e0a0:	83 c1 01             	add    $0x1,%ecx
8010e0a3:	81 c2 88 03 00 00    	add    $0x388,%edx
8010e0a9:	83 f9 40             	cmp    $0x40,%ecx
8010e0ac:	74 62                	je     8010e110 <cgroup_create+0x120>
8010e0ae:	80 3a 00             	cmpb   $0x0,(%edx)
8010e0b1:	75 ed                	jne    8010e0a0 <cgroup_create+0xb0>
8010e0b3:	8b 82 00 02 00 00    	mov    0x200(%edx),%eax
8010e0b9:	85 c0                	test   %eax,%eax
8010e0bb:	75 e3                	jne    8010e0a0 <cgroup_create+0xb0>
8010e0bd:	69 c9 88 03 00 00    	imul   $0x388,%ecx,%ecx
8010e0c3:	83 ec 04             	sub    $0x4,%esp
8010e0c6:	56                   	push   %esi
8010e0c7:	53                   	push   %ebx
8010e0c8:	8d b9 54 c4 13 80    	lea    -0x7fec3bac(%ecx),%edi
8010e0ce:	57                   	push   %edi
8010e0cf:	e8 dc fc ff ff       	call   8010ddb0 <cgroup_initialize>
8010e0d4:	83 c4 10             	add    $0x10,%esp
8010e0d7:	89 f6                	mov    %esi,%esi
8010e0d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010e0e0:	83 86 24 03 00 00 01 	addl   $0x1,0x324(%esi)
8010e0e7:	8b b6 08 03 00 00    	mov    0x308(%esi),%esi
8010e0ed:	85 f6                	test   %esi,%esi
8010e0ef:	75 ef                	jne    8010e0e0 <cgroup_create+0xf0>
8010e0f1:	83 ec 0c             	sub    $0xc,%esp
8010e0f4:	68 20 c4 13 80       	push   $0x8013c420
8010e0f9:	e8 92 82 ff ff       	call   80106390 <release>
8010e0fe:	83 c4 10             	add    $0x10,%esp
8010e101:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010e104:	89 f8                	mov    %edi,%eax
8010e106:	5b                   	pop    %ebx
8010e107:	5e                   	pop    %esi
8010e108:	5f                   	pop    %edi
8010e109:	5d                   	pop    %ebp
8010e10a:	c3                   	ret    
8010e10b:	90                   	nop
8010e10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e110:	83 ec 0c             	sub    $0xc,%esp
8010e113:	68 20 c4 13 80       	push   $0x8013c420
8010e118:	e8 73 82 ff ff       	call   80106390 <release>
8010e11d:	c7 04 24 c8 f7 10 80 	movl   $0x8010f7c8,(%esp)
8010e124:	e8 a7 22 ff ff       	call   801003d0 <panic>
8010e129:	83 ec 0c             	sub    $0xc,%esp
8010e12c:	68 20 c4 13 80       	push   $0x8013c420
8010e131:	e8 5a 82 ff ff       	call   80106390 <release>
8010e136:	83 c4 10             	add    $0x10,%esp
8010e139:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010e13c:	31 c0                	xor    %eax,%eax
8010e13e:	5b                   	pop    %ebx
8010e13f:	5e                   	pop    %esi
8010e140:	5f                   	pop    %edi
8010e141:	5d                   	pop    %ebp
8010e142:	c3                   	ret    
8010e143:	83 ec 0c             	sub    $0xc,%esp
8010e146:	68 20 c4 13 80       	push   $0x8013c420
8010e14b:	e8 40 82 ff ff       	call   80106390 <release>
8010e150:	c7 04 24 60 f7 10 80 	movl   $0x8010f760,(%esp)
8010e157:	e8 74 22 ff ff       	call   801003d0 <panic>
8010e15c:	83 ec 0c             	sub    $0xc,%esp
8010e15f:	68 20 c4 13 80       	push   $0x8013c420
8010e164:	e8 27 82 ff ff       	call   80106390 <release>
8010e169:	c7 04 24 8c f7 10 80 	movl   $0x8010f78c,(%esp)
8010e170:	e8 5b 22 ff ff       	call   801003d0 <panic>
8010e175:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e180 <unsafe_enable_mem_controller>:
8010e180:	55                   	push   %ebp
8010e181:	89 e5                	mov    %esp,%ebp
8010e183:	53                   	push   %ebx
8010e184:	83 ec 04             	sub    $0x4,%esp
8010e187:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010e18a:	85 db                	test   %ebx,%ebx
8010e18c:	74 79                	je     8010e207 <unsafe_enable_mem_controller+0x87>
8010e18e:	80 bb 14 03 00 00 01 	cmpb   $0x1,0x314(%ebx)
8010e195:	74 70                	je     8010e207 <unsafe_enable_mem_controller+0x87>
8010e197:	80 bb 13 03 00 00 00 	cmpb   $0x0,0x313(%ebx)
8010e19e:	75 60                	jne    8010e200 <unsafe_enable_mem_controller+0x80>
8010e1a0:	8b 83 54 03 00 00    	mov    0x354(%ebx),%eax
8010e1a6:	05 ff 0f 00 00       	add    $0xfff,%eax
8010e1ab:	c1 e8 0c             	shr    $0xc,%eax
8010e1ae:	2b 83 3c 03 00 00    	sub    0x33c(%ebx),%eax
8010e1b4:	85 c0                	test   %eax,%eax
8010e1b6:	7e 10                	jle    8010e1c8 <unsafe_enable_mem_controller+0x48>
8010e1b8:	83 ec 0c             	sub    $0xc,%esp
8010e1bb:	50                   	push   %eax
8010e1bc:	e8 5f 4d ff ff       	call   80102f20 <increse_protect_counter>
8010e1c1:	83 c4 10             	add    $0x10,%esp
8010e1c4:	85 c0                	test   %eax,%eax
8010e1c6:	75 3f                	jne    8010e207 <unsafe_enable_mem_controller+0x87>
8010e1c8:	80 bb 12 03 00 00 00 	cmpb   $0x0,0x312(%ebx)
8010e1cf:	74 2f                	je     8010e200 <unsafe_enable_mem_controller+0x80>
8010e1d1:	c6 83 13 03 00 00 01 	movb   $0x1,0x313(%ebx)
8010e1d8:	b8 e4 ca 13 80       	mov    $0x8013cae4,%eax
8010e1dd:	eb 0d                	jmp    8010e1ec <unsafe_enable_mem_controller+0x6c>
8010e1df:	90                   	nop
8010e1e0:	05 88 03 00 00       	add    $0x388,%eax
8010e1e5:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010e1ea:	74 14                	je     8010e200 <unsafe_enable_mem_controller+0x80>
8010e1ec:	3b 18                	cmp    (%eax),%ebx
8010e1ee:	75 f0                	jne    8010e1e0 <unsafe_enable_mem_controller+0x60>
8010e1f0:	c6 40 0a 01          	movb   $0x1,0xa(%eax)
8010e1f4:	05 88 03 00 00       	add    $0x388,%eax
8010e1f9:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010e1fe:	75 ec                	jne    8010e1ec <unsafe_enable_mem_controller+0x6c>
8010e200:	31 c0                	xor    %eax,%eax
8010e202:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010e205:	c9                   	leave  
8010e206:	c3                   	ret    
8010e207:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010e20c:	eb f4                	jmp    8010e202 <unsafe_enable_mem_controller+0x82>
8010e20e:	66 90                	xchg   %ax,%ax

8010e210 <unsafe_disable_mem_controller>:
8010e210:	55                   	push   %ebp
8010e211:	89 e5                	mov    %esp,%ebp
8010e213:	56                   	push   %esi
8010e214:	53                   	push   %ebx
8010e215:	8b 75 08             	mov    0x8(%ebp),%esi
8010e218:	85 f6                	test   %esi,%esi
8010e21a:	74 2a                	je     8010e246 <unsafe_disable_mem_controller+0x36>
8010e21c:	80 be 13 03 00 00 00 	cmpb   $0x0,0x313(%esi)
8010e223:	bb e4 ca 13 80       	mov    $0x8013cae4,%ebx
8010e228:	89 d8                	mov    %ebx,%eax
8010e22a:	75 10                	jne    8010e23c <unsafe_disable_mem_controller+0x2c>
8010e22c:	eb 22                	jmp    8010e250 <unsafe_disable_mem_controller+0x40>
8010e22e:	66 90                	xchg   %ax,%ax
8010e230:	05 88 03 00 00       	add    $0x388,%eax
8010e235:	3d 5c a9 14 80       	cmp    $0x8014a95c,%eax
8010e23a:	74 24                	je     8010e260 <unsafe_disable_mem_controller+0x50>
8010e23c:	3b 30                	cmp    (%eax),%esi
8010e23e:	75 f0                	jne    8010e230 <unsafe_disable_mem_controller+0x20>
8010e240:	80 78 0b 00          	cmpb   $0x0,0xb(%eax)
8010e244:	74 ea                	je     8010e230 <unsafe_disable_mem_controller+0x20>
8010e246:	5b                   	pop    %ebx
8010e247:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010e24c:	5e                   	pop    %esi
8010e24d:	5d                   	pop    %ebp
8010e24e:	c3                   	ret    
8010e24f:	90                   	nop
8010e250:	5b                   	pop    %ebx
8010e251:	31 c0                	xor    %eax,%eax
8010e253:	5e                   	pop    %esi
8010e254:	5d                   	pop    %ebp
8010e255:	c3                   	ret    
8010e256:	8d 76 00             	lea    0x0(%esi),%esi
8010e259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010e260:	31 d2                	xor    %edx,%edx
8010e262:	c6 86 13 03 00 00 00 	movb   $0x0,0x313(%esi)
8010e269:	89 f0                	mov    %esi,%eax
8010e26b:	e8 80 f9 ff ff       	call   8010dbf0 <set_min_mem.part.10>
8010e270:	81 be 54 03 00 00 00 	cmpl   $0x80000000,0x354(%esi)
8010e277:	00 00 80 
8010e27a:	77 22                	ja     8010e29e <unsafe_disable_mem_controller+0x8e>
8010e27c:	c7 86 50 03 00 00 00 	movl   $0x80000000,0x350(%esi)
8010e283:	00 00 80 
8010e286:	3b 33                	cmp    (%ebx),%esi
8010e288:	74 18                	je     8010e2a2 <unsafe_disable_mem_controller+0x92>
8010e28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010e290:	81 c3 88 03 00 00    	add    $0x388,%ebx
8010e296:	81 fb 5c a9 14 80    	cmp    $0x8014a95c,%ebx
8010e29c:	74 b2                	je     8010e250 <unsafe_disable_mem_controller+0x40>
8010e29e:	3b 33                	cmp    (%ebx),%esi
8010e2a0:	75 ee                	jne    8010e290 <unsafe_disable_mem_controller+0x80>
8010e2a2:	c6 43 0a 00          	movb   $0x0,0xa(%ebx)
8010e2a6:	eb e8                	jmp    8010e290 <unsafe_disable_mem_controller+0x80>
8010e2a8:	90                   	nop
8010e2a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010e2b0 <enable_mem_controller>:
8010e2b0:	55                   	push   %ebp
8010e2b1:	89 e5                	mov    %esp,%ebp
8010e2b3:	53                   	push   %ebx
8010e2b4:	83 ec 10             	sub    $0x10,%esp
8010e2b7:	68 20 c4 13 80       	push   $0x8013c420
8010e2bc:	e8 af 7f ff ff       	call   80106270 <acquire>
8010e2c1:	58                   	pop    %eax
8010e2c2:	ff 75 08             	pushl  0x8(%ebp)
8010e2c5:	e8 b6 fe ff ff       	call   8010e180 <unsafe_enable_mem_controller>
8010e2ca:	89 c3                	mov    %eax,%ebx
8010e2cc:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010e2d3:	e8 b8 80 ff ff       	call   80106390 <release>
8010e2d8:	89 d8                	mov    %ebx,%eax
8010e2da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010e2dd:	c9                   	leave  
8010e2de:	c3                   	ret    
8010e2df:	90                   	nop

8010e2e0 <disable_mem_controller>:
8010e2e0:	55                   	push   %ebp
8010e2e1:	89 e5                	mov    %esp,%ebp
8010e2e3:	53                   	push   %ebx
8010e2e4:	83 ec 10             	sub    $0x10,%esp
8010e2e7:	68 20 c4 13 80       	push   $0x8013c420
8010e2ec:	e8 7f 7f ff ff       	call   80106270 <acquire>
8010e2f1:	58                   	pop    %eax
8010e2f2:	ff 75 08             	pushl  0x8(%ebp)
8010e2f5:	e8 16 ff ff ff       	call   8010e210 <unsafe_disable_mem_controller>
8010e2fa:	89 c3                	mov    %eax,%ebx
8010e2fc:	c7 04 24 20 c4 13 80 	movl   $0x8013c420,(%esp)
8010e303:	e8 88 80 ff ff       	call   80106390 <release>
8010e308:	89 d8                	mov    %ebx,%eax
8010e30a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010e30d:	c9                   	leave  
8010e30e:	c3                   	ret    
8010e30f:	90                   	nop

8010e310 <cgroup_mem_stat_file_dirty_incr>:
8010e310:	55                   	push   %ebp
8010e311:	89 e5                	mov    %esp,%ebp
8010e313:	8b 45 08             	mov    0x8(%ebp),%eax
8010e316:	85 c0                	test   %eax,%eax
8010e318:	74 10                	je     8010e32a <cgroup_mem_stat_file_dirty_incr+0x1a>
8010e31a:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010e31f:	74 09                	je     8010e32a <cgroup_mem_stat_file_dirty_incr+0x1a>
8010e321:	80 b8 14 03 00 00 01 	cmpb   $0x1,0x314(%eax)
8010e328:	74 06                	je     8010e330 <cgroup_mem_stat_file_dirty_incr+0x20>
8010e32a:	5d                   	pop    %ebp
8010e32b:	c3                   	ret    
8010e32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e330:	83 80 40 03 00 00 01 	addl   $0x1,0x340(%eax)
8010e337:	5d                   	pop    %ebp
8010e338:	c3                   	ret    
8010e339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010e340 <cgroup_mem_stat_file_dirty_decr>:
8010e340:	55                   	push   %ebp
8010e341:	89 e5                	mov    %esp,%ebp
8010e343:	8b 45 08             	mov    0x8(%ebp),%eax
8010e346:	85 c0                	test   %eax,%eax
8010e348:	74 10                	je     8010e35a <cgroup_mem_stat_file_dirty_decr+0x1a>
8010e34a:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010e34f:	74 09                	je     8010e35a <cgroup_mem_stat_file_dirty_decr+0x1a>
8010e351:	80 b8 14 03 00 00 01 	cmpb   $0x1,0x314(%eax)
8010e358:	74 06                	je     8010e360 <cgroup_mem_stat_file_dirty_decr+0x20>
8010e35a:	5d                   	pop    %ebp
8010e35b:	c3                   	ret    
8010e35c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e360:	83 a8 40 03 00 00 01 	subl   $0x1,0x340(%eax)
8010e367:	5d                   	pop    %ebp
8010e368:	c3                   	ret    
8010e369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010e370 <cgroup_mem_stat_file_dirty_aggregated_incr>:
8010e370:	55                   	push   %ebp
8010e371:	89 e5                	mov    %esp,%ebp
8010e373:	8b 45 08             	mov    0x8(%ebp),%eax
8010e376:	85 c0                	test   %eax,%eax
8010e378:	74 10                	je     8010e38a <cgroup_mem_stat_file_dirty_aggregated_incr+0x1a>
8010e37a:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010e37f:	74 09                	je     8010e38a <cgroup_mem_stat_file_dirty_aggregated_incr+0x1a>
8010e381:	80 b8 14 03 00 00 01 	cmpb   $0x1,0x314(%eax)
8010e388:	74 06                	je     8010e390 <cgroup_mem_stat_file_dirty_aggregated_incr+0x20>
8010e38a:	5d                   	pop    %ebp
8010e38b:	c3                   	ret    
8010e38c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e390:	83 80 44 03 00 00 01 	addl   $0x1,0x344(%eax)
8010e397:	5d                   	pop    %ebp
8010e398:	c3                   	ret    
8010e399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010e3a0 <cgroup_mem_stat_pgfault_incr>:
8010e3a0:	55                   	push   %ebp
8010e3a1:	89 e5                	mov    %esp,%ebp
8010e3a3:	8b 45 08             	mov    0x8(%ebp),%eax
8010e3a6:	85 c0                	test   %eax,%eax
8010e3a8:	74 10                	je     8010e3ba <cgroup_mem_stat_pgfault_incr+0x1a>
8010e3aa:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010e3af:	74 09                	je     8010e3ba <cgroup_mem_stat_pgfault_incr+0x1a>
8010e3b1:	80 b8 14 03 00 00 01 	cmpb   $0x1,0x314(%eax)
8010e3b8:	74 06                	je     8010e3c0 <cgroup_mem_stat_pgfault_incr+0x20>
8010e3ba:	5d                   	pop    %ebp
8010e3bb:	c3                   	ret    
8010e3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e3c0:	83 80 48 03 00 00 01 	addl   $0x1,0x348(%eax)
8010e3c7:	5d                   	pop    %ebp
8010e3c8:	c3                   	ret    
8010e3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

8010e3d0 <cgroup_mem_stat_pgmajfault_incr>:
8010e3d0:	55                   	push   %ebp
8010e3d1:	89 e5                	mov    %esp,%ebp
8010e3d3:	8b 45 08             	mov    0x8(%ebp),%eax
8010e3d6:	85 c0                	test   %eax,%eax
8010e3d8:	74 10                	je     8010e3ea <cgroup_mem_stat_pgmajfault_incr+0x1a>
8010e3da:	3d 54 c4 13 80       	cmp    $0x8013c454,%eax
8010e3df:	74 09                	je     8010e3ea <cgroup_mem_stat_pgmajfault_incr+0x1a>
8010e3e1:	80 b8 14 03 00 00 01 	cmpb   $0x1,0x314(%eax)
8010e3e8:	74 06                	je     8010e3f0 <cgroup_mem_stat_pgmajfault_incr+0x20>
8010e3ea:	5d                   	pop    %ebp
8010e3eb:	c3                   	ret    
8010e3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e3f0:	83 80 4c 03 00 00 01 	addl   $0x1,0x34c(%eax)
8010e3f7:	5d                   	pop    %ebp
8010e3f8:	c3                   	ret    
8010e3f9:	66 90                	xchg   %ax,%ax
8010e3fb:	66 90                	xchg   %ax,%ax
8010e3fd:	66 90                	xchg   %ax,%ax
8010e3ff:	90                   	nop

8010e400 <cpu_account_initialize>:
8010e400:	55                   	push   %ebp
8010e401:	89 e5                	mov    %esp,%ebp
8010e403:	8b 45 08             	mov    0x8(%ebp),%eax
8010e406:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
8010e40d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
8010e414:	c7 40 04 a0 86 01 00 	movl   $0x186a0,0x4(%eax)
8010e41b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
8010e421:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
8010e428:	5d                   	pop    %ebp
8010e429:	c3                   	ret    
8010e42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

8010e430 <cpu_account_schedule_start>:
8010e430:	55                   	push   %ebp
8010e431:	89 e5                	mov    %esp,%ebp
8010e433:	83 ec 08             	sub    $0x8,%esp
8010e436:	e8 45 ba ff ff       	call   80109e80 <steady_clock_now>
8010e43b:	8b 55 08             	mov    0x8(%ebp),%edx
8010e43e:	89 02                	mov    %eax,(%edx)
8010e440:	c9                   	leave  
8010e441:	c3                   	ret    
8010e442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010e449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e450 <cpu_account_schedule_proc_update>:
8010e450:	55                   	push   %ebp
8010e451:	89 e5                	mov    %esp,%ebp
8010e453:	57                   	push   %edi
8010e454:	56                   	push   %esi
8010e455:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010e458:	53                   	push   %ebx
8010e459:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010e45c:	8b 81 bc 02 00 00    	mov    0x2bc(%ecx),%eax
8010e462:	39 43 08             	cmp    %eax,0x8(%ebx)
8010e465:	76 36                	jbe    8010e49d <cpu_account_schedule_proc_update+0x4d>
8010e467:	8b 73 04             	mov    0x4(%ebx),%esi
8010e46a:	39 b1 b4 02 00 00    	cmp    %esi,0x2b4(%ecx)
8010e470:	89 f7                	mov    %esi,%edi
8010e472:	0f 46 b9 b4 02 00 00 	cmovbe 0x2b4(%ecx),%edi
8010e479:	31 d2                	xor    %edx,%edx
8010e47b:	6b c7 64             	imul   $0x64,%edi,%eax
8010e47e:	f7 f6                	div    %esi
8010e480:	89 81 b8 02 00 00    	mov    %eax,0x2b8(%ecx)
8010e486:	8b 43 08             	mov    0x8(%ebx),%eax
8010e489:	89 81 bc 02 00 00    	mov    %eax,0x2bc(%ecx)
8010e48f:	8b 81 b4 02 00 00    	mov    0x2b4(%ecx),%eax
8010e495:	29 f8                	sub    %edi,%eax
8010e497:	89 81 b4 02 00 00    	mov    %eax,0x2b4(%ecx)
8010e49d:	5b                   	pop    %ebx
8010e49e:	5e                   	pop    %esi
8010e49f:	5f                   	pop    %edi
8010e4a0:	5d                   	pop    %ebp
8010e4a1:	c3                   	ret    
8010e4a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
8010e4a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e4b0 <cpu_account_schedule_process_decision>:
8010e4b0:	55                   	push   %ebp
8010e4b1:	89 e5                	mov    %esp,%ebp
8010e4b3:	57                   	push   %edi
8010e4b4:	56                   	push   %esi
8010e4b5:	53                   	push   %ebx
8010e4b6:	83 ec 1c             	sub    $0x1c,%esp
8010e4b9:	8b 45 0c             	mov    0xc(%ebp),%eax
8010e4bc:	8b b8 ac 02 00 00    	mov    0x2ac(%eax),%edi
8010e4c2:	8b 45 08             	mov    0x8(%ebp),%eax
8010e4c5:	89 78 10             	mov    %edi,0x10(%eax)
8010e4c8:	e8 b3 e7 ff ff       	call   8010cc80 <cgroup_lock>
8010e4cd:	85 ff                	test   %edi,%edi
8010e4cf:	0f 84 e7 00 00 00    	je     8010e5bc <cpu_account_schedule_process_decision+0x10c>
8010e4d5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
8010e4d9:	eb 59                	jmp    8010e534 <cpu_account_schedule_process_decision+0x84>
8010e4db:	90                   	nop
8010e4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e4e0:	0f b6 9f 0d 03 00 00 	movzbl 0x30d(%edi),%ebx
8010e4e7:	84 db                	test   %bl,%bl
8010e4e9:	0f 84 b0 00 00 00    	je     8010e59f <cpu_account_schedule_process_decision+0xef>
8010e4ef:	8b 87 64 03 00 00    	mov    0x364(%edi),%eax
8010e4f5:	3b 87 70 03 00 00    	cmp    0x370(%edi),%eax
8010e4fb:	0f 86 9e 00 00 00    	jbe    8010e59f <cpu_account_schedule_process_decision+0xef>
8010e501:	80 bf 84 03 00 00 00 	cmpb   $0x0,0x384(%edi)
8010e508:	75 1c                	jne    8010e526 <cpu_account_schedule_process_decision+0x76>
8010e50a:	03 8f 80 03 00 00    	add    0x380(%edi),%ecx
8010e510:	83 87 7c 03 00 00 01 	addl   $0x1,0x37c(%edi)
8010e517:	c6 87 84 03 00 00 01 	movb   $0x1,0x384(%edi)
8010e51e:	29 c1                	sub    %eax,%ecx
8010e520:	89 8f 80 03 00 00    	mov    %ecx,0x380(%edi)
8010e526:	8b bf 08 03 00 00    	mov    0x308(%edi),%edi
8010e52c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
8010e530:	85 ff                	test   %edi,%edi
8010e532:	74 75                	je     8010e5a9 <cpu_account_schedule_process_decision+0xf9>
8010e534:	8b 45 08             	mov    0x8(%ebp),%eax
8010e537:	8b 8f 6c 03 00 00    	mov    0x36c(%edi),%ecx
8010e53d:	31 d2                	xor    %edx,%edx
8010e53f:	8b 00                	mov    (%eax),%eax
8010e541:	f7 f1                	div    %ecx
8010e543:	3b 87 74 03 00 00    	cmp    0x374(%edi),%eax
8010e549:	89 c6                	mov    %eax,%esi
8010e54b:	76 93                	jbe    8010e4e0 <cpu_account_schedule_process_decision+0x30>
8010e54d:	8b 87 64 03 00 00    	mov    0x364(%edi),%eax
8010e553:	0f b6 9f 0d 03 00 00 	movzbl 0x30d(%edi),%ebx
8010e55a:	39 c1                	cmp    %eax,%ecx
8010e55c:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010e55f:	0f 46 c1             	cmovbe %ecx,%eax
8010e562:	84 db                	test   %bl,%bl
8010e564:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010e567:	74 07                	je     8010e570 <cpu_account_schedule_process_decision+0xc0>
8010e569:	83 87 78 03 00 00 01 	addl   $0x1,0x378(%edi)
8010e570:	6b 45 e4 64          	imul   $0x64,-0x1c(%ebp),%eax
8010e574:	31 d2                	xor    %edx,%edx
8010e576:	c6 87 84 03 00 00 00 	movb   $0x0,0x384(%edi)
8010e57d:	89 b7 74 03 00 00    	mov    %esi,0x374(%edi)
8010e583:	f7 f1                	div    %ecx
8010e585:	89 87 68 03 00 00    	mov    %eax,0x368(%edi)
8010e58b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010e58e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
8010e591:	84 db                	test   %bl,%bl
8010e593:	89 87 64 03 00 00    	mov    %eax,0x364(%edi)
8010e599:	0f 85 50 ff ff ff    	jne    8010e4ef <cpu_account_schedule_process_decision+0x3f>
8010e59f:	8b bf 08 03 00 00    	mov    0x308(%edi),%edi
8010e5a5:	85 ff                	test   %edi,%edi
8010e5a7:	75 8b                	jne    8010e534 <cpu_account_schedule_process_decision+0x84>
8010e5a9:	0f be 5d df          	movsbl -0x21(%ebp),%ebx
8010e5ad:	e8 ee e6 ff ff       	call   8010cca0 <cgroup_unlock>
8010e5b2:	83 c4 1c             	add    $0x1c,%esp
8010e5b5:	89 d8                	mov    %ebx,%eax
8010e5b7:	5b                   	pop    %ebx
8010e5b8:	5e                   	pop    %esi
8010e5b9:	5f                   	pop    %edi
8010e5ba:	5d                   	pop    %ebp
8010e5bb:	c3                   	ret    
8010e5bc:	bb 01 00 00 00       	mov    $0x1,%ebx
8010e5c1:	eb ea                	jmp    8010e5ad <cpu_account_schedule_process_decision+0xfd>
8010e5c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010e5c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e5d0 <cpu_account_before_process_schedule>:
8010e5d0:	55                   	push   %ebp
8010e5d1:	89 e5                	mov    %esp,%ebp
8010e5d3:	83 ec 08             	sub    $0x8,%esp
8010e5d6:	e8 a5 b8 ff ff       	call   80109e80 <steady_clock_now>
8010e5db:	8b 55 08             	mov    0x8(%ebp),%edx
8010e5de:	89 42 0c             	mov    %eax,0xc(%edx)
8010e5e1:	c9                   	leave  
8010e5e2:	c3                   	ret    
8010e5e3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
8010e5e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e5f0 <cpu_account_after_process_schedule>:
8010e5f0:	55                   	push   %ebp
8010e5f1:	89 e5                	mov    %esp,%ebp
8010e5f3:	57                   	push   %edi
8010e5f4:	56                   	push   %esi
8010e5f5:	53                   	push   %ebx
8010e5f6:	83 ec 0c             	sub    $0xc,%esp
8010e5f9:	8b 75 08             	mov    0x8(%ebp),%esi
8010e5fc:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010e5ff:	8b 5e 10             	mov    0x10(%esi),%ebx
8010e602:	e8 79 b8 ff ff       	call   80109e80 <steady_clock_now>
8010e607:	89 06                	mov    %eax,(%esi)
8010e609:	2b 46 0c             	sub    0xc(%esi),%eax
8010e60c:	89 46 0c             	mov    %eax,0xc(%esi)
8010e60f:	01 87 b0 02 00 00    	add    %eax,0x2b0(%edi)
8010e615:	8b 46 0c             	mov    0xc(%esi),%eax
8010e618:	01 87 b4 02 00 00    	add    %eax,0x2b4(%edi)
8010e61e:	e8 5d e6 ff ff       	call   8010cc80 <cgroup_lock>
8010e623:	85 db                	test   %ebx,%ebx
8010e625:	74 2d                	je     8010e654 <cpu_account_after_process_schedule+0x64>
8010e627:	89 f6                	mov    %esi,%esi
8010e629:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
8010e630:	8b 46 0c             	mov    0xc(%esi),%eax
8010e633:	31 d2                	xor    %edx,%edx
8010e635:	01 83 5c 03 00 00    	add    %eax,0x35c(%ebx)
8010e63b:	11 93 60 03 00 00    	adc    %edx,0x360(%ebx)
8010e641:	8b 46 0c             	mov    0xc(%esi),%eax
8010e644:	01 83 64 03 00 00    	add    %eax,0x364(%ebx)
8010e64a:	8b 9b 08 03 00 00    	mov    0x308(%ebx),%ebx
8010e650:	85 db                	test   %ebx,%ebx
8010e652:	75 dc                	jne    8010e630 <cpu_account_after_process_schedule+0x40>
8010e654:	83 c4 0c             	add    $0xc,%esp
8010e657:	5b                   	pop    %ebx
8010e658:	5e                   	pop    %esi
8010e659:	5f                   	pop    %edi
8010e65a:	5d                   	pop    %ebp
8010e65b:	e9 40 e6 ff ff       	jmp    8010cca0 <cgroup_unlock>

8010e660 <cpu_account_schedule_finish>:
8010e660:	55                   	push   %ebp
8010e661:	89 e5                	mov    %esp,%ebp
8010e663:	5d                   	pop    %ebp
8010e664:	c3                   	ret    
8010e665:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e669:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e670 <cpu_account_before_hlt>:
8010e670:	55                   	push   %ebp
8010e671:	89 e5                	mov    %esp,%ebp
8010e673:	5d                   	pop    %ebp
8010e674:	c3                   	ret    
8010e675:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
8010e679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

8010e680 <cpu_account_after_hlt>:
8010e680:	55                   	push   %ebp
8010e681:	89 e5                	mov    %esp,%ebp
8010e683:	5d                   	pop    %ebp
8010e684:	c3                   	ret    
